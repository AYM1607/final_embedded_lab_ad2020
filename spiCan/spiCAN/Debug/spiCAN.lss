
spiCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025d4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  000025d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000074  2000043c  00002a10  0002043c  2**2
                  ALLOC
  3 .stack        00002000  200004b0  00002a84  0002043c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000fc43  00000000  00000000  000204bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e47  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000253d  00000000  00000000  00030f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000280  00000000  00000000  00033484  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000298  00000000  00000000  00033704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001221d  00000000  00000000  0003399c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003766  00000000  00000000  00045bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00070064  00000000  00000000  0004931f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000009bc  00000000  00000000  000b9384  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 24 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .$. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 00 00 00 00 00 00 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000043c 	.word	0x2000043c
      d4:	00000000 	.word	0x00000000
      d8:	000025d4 	.word	0x000025d4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000440 	.word	0x20000440
     108:	000025d4 	.word	0x000025d4
     10c:	000025d4 	.word	0x000025d4
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	000025d4 	.word	0x000025d4
     1c8:	20000000 	.word	0x20000000
     1cc:	2000043c 	.word	0x2000043c
     1d0:	20000004 	.word	0x20000004
     1d4:	2000043c 	.word	0x2000043c
     1d8:	200004b0 	.word	0x200004b0
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	000022e9 	.word	0x000022e9
     1f8:	000002f1 	.word	0x000002f1

000001fc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
        // Keep the default device state after reset
        SystemCoreClock = __SYSTEM_CLOCK;
     1fc:	4a01      	ldr	r2, [pc, #4]	; (204 <SystemInit+0x8>)
     1fe:	4b02      	ldr	r3, [pc, #8]	; (208 <SystemInit+0xc>)
     200:	601a      	str	r2, [r3, #0]
        return;
}
     202:	4770      	bx	lr
     204:	000f4240 	.word	0x000f4240
     208:	20000000 	.word	0x20000000

0000020c <clearCanData>:
	for(i = 0; i <10000000; i++) {
		;
	}
}

void clearCanData() {
     20c:	4b04      	ldr	r3, [pc, #16]	; (220 <clearCanData+0x14>)
     20e:	0019      	movs	r1, r3
     210:	3108      	adds	r1, #8
	uint8_t i;
	for (i=0;i<8;i++) {
		canData[i] = 0xFF;
     212:	22ff      	movs	r2, #255	; 0xff
     214:	701a      	strb	r2, [r3, #0]
     216:	3301      	adds	r3, #1
	for (i=0;i<8;i++) {
     218:	428b      	cmp	r3, r1
     21a:	d1fb      	bne.n	214 <clearCanData+0x8>
	}
}
     21c:	4770      	bx	lr
     21e:	46c0      	nop			; (mov r8, r8)
     220:	20000004 	.word	0x20000004

00000224 <setEngineSpeed>:

// Min speed 0, max speed 3000.
void setEngineSpeed(uint16_t speed) {
     224:	b510      	push	{r4, lr}
	speed /= 0.16;
     226:	4b0a      	ldr	r3, [pc, #40]	; (250 <setEngineSpeed+0x2c>)
     228:	4798      	blx	r3
     22a:	4a0a      	ldr	r2, [pc, #40]	; (254 <setEngineSpeed+0x30>)
     22c:	4b0a      	ldr	r3, [pc, #40]	; (258 <setEngineSpeed+0x34>)
     22e:	4c0b      	ldr	r4, [pc, #44]	; (25c <setEngineSpeed+0x38>)
     230:	47a0      	blx	r4
     232:	4b0b      	ldr	r3, [pc, #44]	; (260 <setEngineSpeed+0x3c>)
     234:	4798      	blx	r3
     236:	b284      	uxth	r4, r0
	clearCanData();
     238:	4b0a      	ldr	r3, [pc, #40]	; (264 <setEngineSpeed+0x40>)
     23a:	4798      	blx	r3
	canData[3] = speed & 0xFF;
     23c:	4b0a      	ldr	r3, [pc, #40]	; (268 <setEngineSpeed+0x44>)
     23e:	70dc      	strb	r4, [r3, #3]
	canData[4] = (uint8_t)(speed >> 8);
     240:	0a24      	lsrs	r4, r4, #8
     242:	711c      	strb	r4, [r3, #4]
	sendMsgBuf(0x0CF004A3, 1, 8, canData);
     244:	2208      	movs	r2, #8
     246:	2101      	movs	r1, #1
     248:	4808      	ldr	r0, [pc, #32]	; (26c <setEngineSpeed+0x48>)
     24a:	4c09      	ldr	r4, [pc, #36]	; (270 <setEngineSpeed+0x4c>)
     24c:	47a0      	blx	r4
}
     24e:	bd10      	pop	{r4, pc}
     250:	00001fad 	.word	0x00001fad
     254:	47ae147b 	.word	0x47ae147b
     258:	3fc47ae1 	.word	0x3fc47ae1
     25c:	000012b1 	.word	0x000012b1
     260:	00001275 	.word	0x00001275
     264:	0000020d 	.word	0x0000020d
     268:	20000004 	.word	0x20000004
     26c:	0cf004a3 	.word	0x0cf004a3
     270:	00000c61 	.word	0x00000c61

00000274 <setFuelLevel>:

void setFuelLevel(uint8_t percentage) {
     274:	b5d0      	push	{r4, r6, r7, lr}
	percentage /= 0.4;
     276:	4b0b      	ldr	r3, [pc, #44]	; (2a4 <setFuelLevel+0x30>)
     278:	4798      	blx	r3
     27a:	4a0b      	ldr	r2, [pc, #44]	; (2a8 <setFuelLevel+0x34>)
     27c:	4b0b      	ldr	r3, [pc, #44]	; (2ac <setFuelLevel+0x38>)
     27e:	4c0c      	ldr	r4, [pc, #48]	; (2b0 <setFuelLevel+0x3c>)
     280:	47a0      	blx	r4
     282:	0006      	movs	r6, r0
     284:	000f      	movs	r7, r1
	clearCanData();
     286:	4b0b      	ldr	r3, [pc, #44]	; (2b4 <setFuelLevel+0x40>)
     288:	4798      	blx	r3
	
	canData[1] = percentage;
     28a:	4c0b      	ldr	r4, [pc, #44]	; (2b8 <setFuelLevel+0x44>)
	percentage /= 0.4;
     28c:	0030      	movs	r0, r6
     28e:	0039      	movs	r1, r7
     290:	4b0a      	ldr	r3, [pc, #40]	; (2bc <setFuelLevel+0x48>)
     292:	4798      	blx	r3
	canData[1] = percentage;
     294:	7060      	strb	r0, [r4, #1]
	sendMsgBuf(0x18FEFCA3,1, 8, canData);
     296:	0023      	movs	r3, r4
     298:	2208      	movs	r2, #8
     29a:	2101      	movs	r1, #1
     29c:	4808      	ldr	r0, [pc, #32]	; (2c0 <setFuelLevel+0x4c>)
     29e:	4c09      	ldr	r4, [pc, #36]	; (2c4 <setFuelLevel+0x50>)
     2a0:	47a0      	blx	r4
}
     2a2:	bdd0      	pop	{r4, r6, r7, pc}
     2a4:	00001fad 	.word	0x00001fad
     2a8:	9999999a 	.word	0x9999999a
     2ac:	3fd99999 	.word	0x3fd99999
     2b0:	000012b1 	.word	0x000012b1
     2b4:	0000020d 	.word	0x0000020d
     2b8:	20000004 	.word	0x20000004
     2bc:	00001275 	.word	0x00001275
     2c0:	18fefca3 	.word	0x18fefca3
     2c4:	00000c61 	.word	0x00000c61

000002c8 <setOilLampValue>:

// Possible values 0 or 1
void setOilLampValue(uint8_t value) {
     2c8:	b510      	push	{r4, lr}
     2ca:	0004      	movs	r4, r0
	clearCanData();
     2cc:	4b04      	ldr	r3, [pc, #16]	; (2e0 <setOilLampValue+0x18>)
     2ce:	4798      	blx	r3
	
	canData[7] = value;
     2d0:	4b04      	ldr	r3, [pc, #16]	; (2e4 <setOilLampValue+0x1c>)
     2d2:	71dc      	strb	r4, [r3, #7]
	sendMsgBuf(0x18FF14A3, 1, 8, canData);
     2d4:	2208      	movs	r2, #8
     2d6:	2101      	movs	r1, #1
     2d8:	4803      	ldr	r0, [pc, #12]	; (2e8 <setOilLampValue+0x20>)
     2da:	4c04      	ldr	r4, [pc, #16]	; (2ec <setOilLampValue+0x24>)
     2dc:	47a0      	blx	r4
}
     2de:	bd10      	pop	{r4, pc}
     2e0:	0000020d 	.word	0x0000020d
     2e4:	20000004 	.word	0x20000004
     2e8:	18ff14a3 	.word	0x18ff14a3
     2ec:	00000c61 	.word	0x00000c61

000002f0 <main>:



int main(void)
{
     2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     2f2:	46de      	mov	lr, fp
     2f4:	4657      	mov	r7, sl
     2f6:	b580      	push	{r7, lr}
     2f8:	b083      	sub	sp, #12
	uint8_t ret;
	
    /* Initialize the SAM system */
    SystemInit();
     2fa:	4b50      	ldr	r3, [pc, #320]	; (43c <main+0x14c>)
     2fc:	4798      	blx	r3
	SYSCTRL->OSC8M.bit.PRESC = 0;
     2fe:	4a50      	ldr	r2, [pc, #320]	; (440 <main+0x150>)
     300:	6a13      	ldr	r3, [r2, #32]
     302:	4950      	ldr	r1, [pc, #320]	; (444 <main+0x154>)
     304:	400b      	ands	r3, r1
     306:	6213      	str	r3, [r2, #32]
	initUART();
     308:	4b4f      	ldr	r3, [pc, #316]	; (448 <main+0x158>)
     30a:	4798      	blx	r3
	spiInit();
     30c:	4b4f      	ldr	r3, [pc, #316]	; (44c <main+0x15c>)
     30e:	4798      	blx	r3
	
	canBegin(SLAVE_CAN_0, CAN0_SPEED);
     310:	210e      	movs	r1, #14
     312:	2000      	movs	r0, #0
     314:	4b4e      	ldr	r3, [pc, #312]	; (450 <main+0x160>)
     316:	4798      	blx	r3
	
	uint8_t beta, alfa = uart_read_byte();
     318:	4b4e      	ldr	r3, [pc, #312]	; (454 <main+0x164>)
     31a:	4798      	blx	r3
     31c:	0004      	movs	r4, r0
	uint16_t charlie;
	
	
	init_Mask(0,0x03FFFF00);
     31e:	4e4e      	ldr	r6, [pc, #312]	; (458 <main+0x168>)
     320:	0031      	movs	r1, r6
     322:	2000      	movs	r0, #0
     324:	4d4d      	ldr	r5, [pc, #308]	; (45c <main+0x16c>)
     326:	47a8      	blx	r5
	init_Mask(1,0x03FFFF00);
     328:	0031      	movs	r1, r6
     32a:	2001      	movs	r0, #1
     32c:	47a8      	blx	r5
	
	init_Filt(0,1,0x18FF14A3);
     32e:	4e4c      	ldr	r6, [pc, #304]	; (460 <main+0x170>)
     330:	0032      	movs	r2, r6
     332:	2101      	movs	r1, #1
     334:	2000      	movs	r0, #0
     336:	4d4b      	ldr	r5, [pc, #300]	; (464 <main+0x174>)
     338:	47a8      	blx	r5
	init_Filt(2,1,0x18FF14A3);
     33a:	0032      	movs	r2, r6
     33c:	2101      	movs	r1, #1
     33e:	2002      	movs	r0, #2
     340:	47a8      	blx	r5
				int a = 0;
				alfa = uart_read_byte();
				while(a < alfa){
					a++;
					
					readMsgBufID(&canId, &dataLength, canData);
     342:	4f49      	ldr	r7, [pc, #292]	; (468 <main+0x178>)
     344:	1d3b      	adds	r3, r7, #4
     346:	9301      	str	r3, [sp, #4]
     348:	e01f      	b.n	38a <main+0x9a>
			myprintf("Recibi a\n");
     34a:	4848      	ldr	r0, [pc, #288]	; (46c <main+0x17c>)
     34c:	4b48      	ldr	r3, [pc, #288]	; (470 <main+0x180>)
     34e:	4798      	blx	r3
			setOilLampValue(0);
     350:	2000      	movs	r0, #0
     352:	4b48      	ldr	r3, [pc, #288]	; (474 <main+0x184>)
     354:	4798      	blx	r3
			setFuelLevel(100);
     356:	2064      	movs	r0, #100	; 0x64
     358:	4b47      	ldr	r3, [pc, #284]	; (478 <main+0x188>)
     35a:	4798      	blx	r3
			setEngineSpeed(0);
     35c:	2000      	movs	r0, #0
     35e:	4b47      	ldr	r3, [pc, #284]	; (47c <main+0x18c>)
     360:	4798      	blx	r3
     362:	4b47      	ldr	r3, [pc, #284]	; (480 <main+0x190>)
     364:	3b01      	subs	r3, #1
			for(i = 0; i < 120000000; i++) {
     366:	2b00      	cmp	r3, #0
     368:	d1fc      	bne.n	364 <main+0x74>
			setEngineSpeed(3000);
     36a:	4846      	ldr	r0, [pc, #280]	; (484 <main+0x194>)
     36c:	4b43      	ldr	r3, [pc, #268]	; (47c <main+0x18c>)
     36e:	4798      	blx	r3
			setFuelLevel(0);
     370:	2000      	movs	r0, #0
     372:	4b41      	ldr	r3, [pc, #260]	; (478 <main+0x188>)
     374:	4798      	blx	r3
     376:	4b44      	ldr	r3, [pc, #272]	; (488 <main+0x198>)
     378:	3b01      	subs	r3, #1
			for(i = 0; i <10000000; i++) { // 10000000
     37a:	2b00      	cmp	r3, #0
     37c:	d1fc      	bne.n	378 <main+0x88>
			setOilLampValue(1);
     37e:	2001      	movs	r0, #1
     380:	4b3c      	ldr	r3, [pc, #240]	; (474 <main+0x184>)
     382:	4798      	blx	r3
						myprintf(" %d", canData[i]);
					}
					myprintf("\r\n");
				}
			}
		alfa = uart_read_byte();
     384:	4b33      	ldr	r3, [pc, #204]	; (454 <main+0x164>)
     386:	4798      	blx	r3
     388:	0004      	movs	r4, r0
		if(alfa == 97) {
     38a:	2c61      	cmp	r4, #97	; 0x61
     38c:	d0dd      	beq.n	34a <main+0x5a>
			} else if(alfa == 98) {
     38e:	2c62      	cmp	r4, #98	; 0x62
     390:	d030      	beq.n	3f4 <main+0x104>
			} else if(alfa == 99) {
     392:	2c63      	cmp	r4, #99	; 0x63
     394:	d038      	beq.n	408 <main+0x118>
			} else if(alfa == 100) {
     396:	2c64      	cmp	r4, #100	; 0x64
     398:	d045      	beq.n	426 <main+0x136>
			} else if(alfa == 101){
     39a:	2c65      	cmp	r4, #101	; 0x65
     39c:	d1f2      	bne.n	384 <main+0x94>
				alfa = uart_read_byte();
     39e:	4b2d      	ldr	r3, [pc, #180]	; (454 <main+0x164>)
     3a0:	4798      	blx	r3
				while(a < alfa){
     3a2:	4683      	mov	fp, r0
     3a4:	2800      	cmp	r0, #0
     3a6:	dded      	ble.n	384 <main+0x94>
     3a8:	2300      	movs	r3, #0
     3aa:	469a      	mov	sl, r3
					a++;
     3ac:	2301      	movs	r3, #1
     3ae:	469c      	mov	ip, r3
     3b0:	44e2      	add	sl, ip
					readMsgBufID(&canId, &dataLength, canData);
     3b2:	4a36      	ldr	r2, [pc, #216]	; (48c <main+0x19c>)
     3b4:	0039      	movs	r1, r7
     3b6:	9801      	ldr	r0, [sp, #4]
     3b8:	4b35      	ldr	r3, [pc, #212]	; (490 <main+0x1a0>)
     3ba:	4798      	blx	r3
					myprintf("Received message. Id: %x, Data length: %d, Data:", (canId >> 8) & 0x3FFFF, dataLength);
     3bc:	783a      	ldrb	r2, [r7, #0]
     3be:	687b      	ldr	r3, [r7, #4]
     3c0:	0199      	lsls	r1, r3, #6
     3c2:	0b89      	lsrs	r1, r1, #14
     3c4:	4833      	ldr	r0, [pc, #204]	; (494 <main+0x1a4>)
     3c6:	4b2a      	ldr	r3, [pc, #168]	; (470 <main+0x180>)
     3c8:	4798      	blx	r3
					for(i = 0; i < dataLength; i++) {
     3ca:	783b      	ldrb	r3, [r7, #0]
     3cc:	2b00      	cmp	r3, #0
     3ce:	d00b      	beq.n	3e8 <main+0xf8>
     3d0:	2400      	movs	r4, #0
						myprintf(" %d", canData[i]);
     3d2:	4e2e      	ldr	r6, [pc, #184]	; (48c <main+0x19c>)
     3d4:	4d26      	ldr	r5, [pc, #152]	; (470 <main+0x180>)
     3d6:	5d31      	ldrb	r1, [r6, r4]
     3d8:	482f      	ldr	r0, [pc, #188]	; (498 <main+0x1a8>)
     3da:	47a8      	blx	r5
					for(i = 0; i < dataLength; i++) {
     3dc:	3401      	adds	r4, #1
     3de:	b2e4      	uxtb	r4, r4
     3e0:	4b21      	ldr	r3, [pc, #132]	; (468 <main+0x178>)
     3e2:	781b      	ldrb	r3, [r3, #0]
     3e4:	42a3      	cmp	r3, r4
     3e6:	d8f6      	bhi.n	3d6 <main+0xe6>
					myprintf("\r\n");
     3e8:	482c      	ldr	r0, [pc, #176]	; (49c <main+0x1ac>)
     3ea:	4b21      	ldr	r3, [pc, #132]	; (470 <main+0x180>)
     3ec:	4798      	blx	r3
				while(a < alfa){
     3ee:	45da      	cmp	sl, fp
     3f0:	dbdc      	blt.n	3ac <main+0xbc>
     3f2:	e7c7      	b.n	384 <main+0x94>
				myprintf("Recibi b MdG\n");
     3f4:	482a      	ldr	r0, [pc, #168]	; (4a0 <main+0x1b0>)
     3f6:	4c1e      	ldr	r4, [pc, #120]	; (470 <main+0x180>)
     3f8:	47a0      	blx	r4
				alfa = uart_read_byte();
     3fa:	4b16      	ldr	r3, [pc, #88]	; (454 <main+0x164>)
     3fc:	4798      	blx	r3
				setFuelLevel(alfa);
     3fe:	4b1e      	ldr	r3, [pc, #120]	; (478 <main+0x188>)
     400:	4798      	blx	r3
				myprintf("Enviado\n");
     402:	4828      	ldr	r0, [pc, #160]	; (4a4 <main+0x1b4>)
     404:	47a0      	blx	r4
     406:	e7bd      	b.n	384 <main+0x94>
			myprintf("Recibi c tacos\n");
     408:	4827      	ldr	r0, [pc, #156]	; (4a8 <main+0x1b8>)
     40a:	4d19      	ldr	r5, [pc, #100]	; (470 <main+0x180>)
     40c:	47a8      	blx	r5
			alfa = uart_read_byte();
     40e:	4e11      	ldr	r6, [pc, #68]	; (454 <main+0x164>)
     410:	47b0      	blx	r6
     412:	0004      	movs	r4, r0
			beta = uart_read_byte();
     414:	47b0      	blx	r6
			charlie = (alfa << 8) | beta;
     416:	0224      	lsls	r4, r4, #8
     418:	4320      	orrs	r0, r4
			setEngineSpeed(charlie);
     41a:	b280      	uxth	r0, r0
     41c:	4b17      	ldr	r3, [pc, #92]	; (47c <main+0x18c>)
     41e:	4798      	blx	r3
			myprintf("Enviado\n");
     420:	4820      	ldr	r0, [pc, #128]	; (4a4 <main+0x1b4>)
     422:	47a8      	blx	r5
     424:	e7ae      	b.n	384 <main+0x94>
			myprintf("Recibi d\n");
     426:	4821      	ldr	r0, [pc, #132]	; (4ac <main+0x1bc>)
     428:	4c11      	ldr	r4, [pc, #68]	; (470 <main+0x180>)
     42a:	47a0      	blx	r4
			alfa = uart_read_byte();
     42c:	4b09      	ldr	r3, [pc, #36]	; (454 <main+0x164>)
     42e:	4798      	blx	r3
			setOilLampValue(alfa);
     430:	4b10      	ldr	r3, [pc, #64]	; (474 <main+0x184>)
     432:	4798      	blx	r3
			myprintf("Enviado\n");
     434:	481b      	ldr	r0, [pc, #108]	; (4a4 <main+0x1b4>)
     436:	47a0      	blx	r4
     438:	e7a4      	b.n	384 <main+0x94>
     43a:	46c0      	nop			; (mov r8, r8)
     43c:	000001fd 	.word	0x000001fd
     440:	40000800 	.word	0x40000800
     444:	fffffcff 	.word	0xfffffcff
     448:	000010ad 	.word	0x000010ad
     44c:	00000fcd 	.word	0x00000fcd
     450:	00000d09 	.word	0x00000d09
     454:	00001149 	.word	0x00001149
     458:	03ffff00 	.word	0x03ffff00
     45c:	00000a91 	.word	0x00000a91
     460:	18ff14a3 	.word	0x18ff14a3
     464:	00000b11 	.word	0x00000b11
     468:	20000458 	.word	0x20000458
     46c:	00002488 	.word	0x00002488
     470:	00000dd1 	.word	0x00000dd1
     474:	000002c9 	.word	0x000002c9
     478:	00000275 	.word	0x00000275
     47c:	00000225 	.word	0x00000225
     480:	07270e00 	.word	0x07270e00
     484:	00000bb8 	.word	0x00000bb8
     488:	00989680 	.word	0x00989680
     48c:	20000004 	.word	0x20000004
     490:	00000cbd 	.word	0x00000cbd
     494:	000024cc 	.word	0x000024cc
     498:	00002500 	.word	0x00002500
     49c:	00002504 	.word	0x00002504
     4a0:	00002494 	.word	0x00002494
     4a4:	000024a4 	.word	0x000024a4
     4a8:	000024b0 	.word	0x000024b0
     4ac:	000024c0 	.word	0x000024c0

000004b0 <mcp2515_reset>:
uint8_t			m_nfilhit;
uint8_t			device;

/******************* SIMPLE FUNCTIONS *******************/

void mcp2515_reset(void) {
     4b0:	b510      	push	{r4, lr}
	// Reset Instruction = 0xC0
	spiSS(device);
     4b2:	4c05      	ldr	r4, [pc, #20]	; (4c8 <mcp2515_reset+0x18>)
     4b4:	7820      	ldrb	r0, [r4, #0]
     4b6:	4b05      	ldr	r3, [pc, #20]	; (4cc <mcp2515_reset+0x1c>)
     4b8:	4798      	blx	r3
	spiSend(MCP_RESET);
     4ba:	20c0      	movs	r0, #192	; 0xc0
     4bc:	4b04      	ldr	r3, [pc, #16]	; (4d0 <mcp2515_reset+0x20>)
     4be:	4798      	blx	r3
	spiSR(device);
     4c0:	7820      	ldrb	r0, [r4, #0]
     4c2:	4b04      	ldr	r3, [pc, #16]	; (4d4 <mcp2515_reset+0x24>)
     4c4:	4798      	blx	r3
}
     4c6:	bd10      	pop	{r4, pc}
     4c8:	2000048a 	.word	0x2000048a
     4cc:	00001085 	.word	0x00001085
     4d0:	0000105d 	.word	0x0000105d
     4d4:	00001099 	.word	0x00001099

000004d8 <mcp2515_readRegister>:

uint8_t mcp2515_readRegister(const uint8_t address) {
     4d8:	b570      	push	{r4, r5, r6, lr}
     4da:	0006      	movs	r6, r0
	uint8_t ret;
	spiSS(device);
     4dc:	4d08      	ldr	r5, [pc, #32]	; (500 <mcp2515_readRegister+0x28>)
     4de:	7828      	ldrb	r0, [r5, #0]
     4e0:	4b08      	ldr	r3, [pc, #32]	; (504 <mcp2515_readRegister+0x2c>)
     4e2:	4798      	blx	r3
	spiSend(MCP_READ);
     4e4:	2003      	movs	r0, #3
     4e6:	4c08      	ldr	r4, [pc, #32]	; (508 <mcp2515_readRegister+0x30>)
     4e8:	47a0      	blx	r4
	spiSend(address);
     4ea:	0030      	movs	r0, r6
     4ec:	47a0      	blx	r4
	ret = spiSend(0x00);
     4ee:	2000      	movs	r0, #0
     4f0:	47a0      	blx	r4
     4f2:	0004      	movs	r4, r0
	spiSR(device);
     4f4:	7828      	ldrb	r0, [r5, #0]
     4f6:	4b05      	ldr	r3, [pc, #20]	; (50c <mcp2515_readRegister+0x34>)
     4f8:	4798      	blx	r3
	return ret;
}
     4fa:	0020      	movs	r0, r4
     4fc:	bd70      	pop	{r4, r5, r6, pc}
     4fe:	46c0      	nop			; (mov r8, r8)
     500:	2000048a 	.word	0x2000048a
     504:	00001085 	.word	0x00001085
     508:	0000105d 	.word	0x0000105d
     50c:	00001099 	.word	0x00001099

00000510 <mcp2515_readRegisterS>:

void mcp2515_readRegisterS(const uint8_t address, uint8_t values[], const uint8_t n) {
     510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     512:	0007      	movs	r7, r0
     514:	000e      	movs	r6, r1
     516:	0015      	movs	r5, r2
	uint8_t i;
	spiSS(device);
     518:	4b0e      	ldr	r3, [pc, #56]	; (554 <mcp2515_readRegisterS+0x44>)
     51a:	7818      	ldrb	r0, [r3, #0]
     51c:	4b0e      	ldr	r3, [pc, #56]	; (558 <mcp2515_readRegisterS+0x48>)
     51e:	4798      	blx	r3
	spiSend(MCP_READ);
     520:	2003      	movs	r0, #3
     522:	4c0e      	ldr	r4, [pc, #56]	; (55c <mcp2515_readRegisterS+0x4c>)
     524:	47a0      	blx	r4
	spiSend(address);
     526:	0038      	movs	r0, r7
     528:	47a0      	blx	r4
	// mcp2515 has auto-increment of address-pointer.
	for (i=0; i<n && i<CAN_MAX_CHAR_IN_MESSAGE; i++) {
     52a:	2d00      	cmp	r5, #0
     52c:	d00d      	beq.n	54a <mcp2515_readRegisterS+0x3a>
     52e:	0034      	movs	r4, r6
     530:	3d01      	subs	r5, #1
     532:	b2ed      	uxtb	r5, r5
     534:	1975      	adds	r5, r6, r5
     536:	3608      	adds	r6, #8
		values[i] = spiSend(0x00);
     538:	4f08      	ldr	r7, [pc, #32]	; (55c <mcp2515_readRegisterS+0x4c>)
     53a:	2000      	movs	r0, #0
     53c:	47b8      	blx	r7
     53e:	7020      	strb	r0, [r4, #0]
	for (i=0; i<n && i<CAN_MAX_CHAR_IN_MESSAGE; i++) {
     540:	42ac      	cmp	r4, r5
     542:	d002      	beq.n	54a <mcp2515_readRegisterS+0x3a>
     544:	3401      	adds	r4, #1
     546:	42b4      	cmp	r4, r6
     548:	d1f7      	bne.n	53a <mcp2515_readRegisterS+0x2a>
	}
	spiSR(device);
     54a:	4b02      	ldr	r3, [pc, #8]	; (554 <mcp2515_readRegisterS+0x44>)
     54c:	7818      	ldrb	r0, [r3, #0]
     54e:	4b04      	ldr	r3, [pc, #16]	; (560 <mcp2515_readRegisterS+0x50>)
     550:	4798      	blx	r3
}
     552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     554:	2000048a 	.word	0x2000048a
     558:	00001085 	.word	0x00001085
     55c:	0000105d 	.word	0x0000105d
     560:	00001099 	.word	0x00001099

00000564 <mcp2515_setRegister>:

void mcp2515_setRegister(const uint8_t address, const uint8_t value) {
     564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     566:	0007      	movs	r7, r0
     568:	000e      	movs	r6, r1
	spiSS(device);
     56a:	4d07      	ldr	r5, [pc, #28]	; (588 <mcp2515_setRegister+0x24>)
     56c:	7828      	ldrb	r0, [r5, #0]
     56e:	4b07      	ldr	r3, [pc, #28]	; (58c <mcp2515_setRegister+0x28>)
     570:	4798      	blx	r3
	spiSend(MCP_WRITE);
     572:	2002      	movs	r0, #2
     574:	4c06      	ldr	r4, [pc, #24]	; (590 <mcp2515_setRegister+0x2c>)
     576:	47a0      	blx	r4
	spiSend(address);
     578:	0038      	movs	r0, r7
     57a:	47a0      	blx	r4
	spiSend(value);
     57c:	0030      	movs	r0, r6
     57e:	47a0      	blx	r4
	spiSR(device);
     580:	7828      	ldrb	r0, [r5, #0]
     582:	4b04      	ldr	r3, [pc, #16]	; (594 <mcp2515_setRegister+0x30>)
     584:	4798      	blx	r3
}
     586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     588:	2000048a 	.word	0x2000048a
     58c:	00001085 	.word	0x00001085
     590:	0000105d 	.word	0x0000105d
     594:	00001099 	.word	0x00001099

00000598 <mcp2515_setRegisterS>:

void mcp2515_setRegisterS(const uint8_t address, const uint8_t values[], const uint8_t n) {
     598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     59a:	0007      	movs	r7, r0
     59c:	000e      	movs	r6, r1
     59e:	0015      	movs	r5, r2
	uint8_t i;
	spiSS(device);
     5a0:	4b0d      	ldr	r3, [pc, #52]	; (5d8 <mcp2515_setRegisterS+0x40>)
     5a2:	7818      	ldrb	r0, [r3, #0]
     5a4:	4b0d      	ldr	r3, [pc, #52]	; (5dc <mcp2515_setRegisterS+0x44>)
     5a6:	4798      	blx	r3
	spiSend(MCP_WRITE);
     5a8:	2002      	movs	r0, #2
     5aa:	4c0d      	ldr	r4, [pc, #52]	; (5e0 <mcp2515_setRegisterS+0x48>)
     5ac:	47a0      	blx	r4
	spiSend(address);
     5ae:	0038      	movs	r0, r7
     5b0:	47a0      	blx	r4
	// mcp2515 has auto-increment of address-pointer.
	for (i=0; i<n; i++)
     5b2:	2d00      	cmp	r5, #0
     5b4:	d00a      	beq.n	5cc <mcp2515_setRegisterS+0x34>
     5b6:	0034      	movs	r4, r6
     5b8:	3d01      	subs	r5, #1
     5ba:	b2ed      	uxtb	r5, r5
     5bc:	3501      	adds	r5, #1
     5be:	1975      	adds	r5, r6, r5
	{
		spiSend(values[i]);
     5c0:	4e07      	ldr	r6, [pc, #28]	; (5e0 <mcp2515_setRegisterS+0x48>)
     5c2:	7820      	ldrb	r0, [r4, #0]
     5c4:	47b0      	blx	r6
     5c6:	3401      	adds	r4, #1
	for (i=0; i<n; i++)
     5c8:	42ac      	cmp	r4, r5
     5ca:	d1fa      	bne.n	5c2 <mcp2515_setRegisterS+0x2a>
	}
	spiSR(device);
     5cc:	4b02      	ldr	r3, [pc, #8]	; (5d8 <mcp2515_setRegisterS+0x40>)
     5ce:	7818      	ldrb	r0, [r3, #0]
     5d0:	4b04      	ldr	r3, [pc, #16]	; (5e4 <mcp2515_setRegisterS+0x4c>)
     5d2:	4798      	blx	r3
}
     5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5d6:	46c0      	nop			; (mov r8, r8)
     5d8:	2000048a 	.word	0x2000048a
     5dc:	00001085 	.word	0x00001085
     5e0:	0000105d 	.word	0x0000105d
     5e4:	00001099 	.word	0x00001099

000005e8 <mcp2515_modifyRegister>:

void mcp2515_modifyRegister(const uint8_t address, const uint8_t mask, const uint8_t data) {
     5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ea:	b083      	sub	sp, #12
     5ec:	0007      	movs	r7, r0
     5ee:	000e      	movs	r6, r1
     5f0:	9201      	str	r2, [sp, #4]
	spiSS(device);
     5f2:	4d09      	ldr	r5, [pc, #36]	; (618 <mcp2515_modifyRegister+0x30>)
     5f4:	7828      	ldrb	r0, [r5, #0]
     5f6:	4b09      	ldr	r3, [pc, #36]	; (61c <mcp2515_modifyRegister+0x34>)
     5f8:	4798      	blx	r3
	spiSend(MCP_BITMOD);
     5fa:	2005      	movs	r0, #5
     5fc:	4c08      	ldr	r4, [pc, #32]	; (620 <mcp2515_modifyRegister+0x38>)
     5fe:	47a0      	blx	r4
	spiSend(address);
     600:	0038      	movs	r0, r7
     602:	47a0      	blx	r4
	spiSend(mask);
     604:	0030      	movs	r0, r6
     606:	47a0      	blx	r4
	spiSend(data);
     608:	9801      	ldr	r0, [sp, #4]
     60a:	47a0      	blx	r4
	spiSR(device);
     60c:	7828      	ldrb	r0, [r5, #0]
     60e:	4b05      	ldr	r3, [pc, #20]	; (624 <mcp2515_modifyRegister+0x3c>)
     610:	4798      	blx	r3
}
     612:	b003      	add	sp, #12
     614:	bdf0      	pop	{r4, r5, r6, r7, pc}
     616:	46c0      	nop			; (mov r8, r8)
     618:	2000048a 	.word	0x2000048a
     61c:	00001085 	.word	0x00001085
     620:	0000105d 	.word	0x0000105d
     624:	00001099 	.word	0x00001099

00000628 <mcp2515_readStatus>:

uint8_t mcp2515_readStatus(void) {
     628:	b570      	push	{r4, r5, r6, lr}
	uint8_t ret;
	spiSS(device);
     62a:	4c07      	ldr	r4, [pc, #28]	; (648 <mcp2515_readStatus+0x20>)
     62c:	7820      	ldrb	r0, [r4, #0]
     62e:	4b07      	ldr	r3, [pc, #28]	; (64c <mcp2515_readStatus+0x24>)
     630:	4798      	blx	r3
	spiSend(MCP_READ_STATUS);
     632:	20a0      	movs	r0, #160	; 0xa0
     634:	4d06      	ldr	r5, [pc, #24]	; (650 <mcp2515_readStatus+0x28>)
     636:	47a8      	blx	r5
	ret = spiSend(0x00);
     638:	2000      	movs	r0, #0
     63a:	47a8      	blx	r5
     63c:	0005      	movs	r5, r0
	spiSR(device);
     63e:	7820      	ldrb	r0, [r4, #0]
     640:	4b04      	ldr	r3, [pc, #16]	; (654 <mcp2515_readStatus+0x2c>)
     642:	4798      	blx	r3
	return ret;
}
     644:	0028      	movs	r0, r5
     646:	bd70      	pop	{r4, r5, r6, pc}
     648:	2000048a 	.word	0x2000048a
     64c:	00001085 	.word	0x00001085
     650:	0000105d 	.word	0x0000105d
     654:	00001099 	.word	0x00001099

00000658 <mcp2515_setCANCTRL_Mode>:

/****************** COMPOUND FUNCTIONS ******************/

/******************** INIT SEQUENCES ********************/

uint8_t mcp2515_setCANCTRL_Mode(const uint8_t newmode) {
     658:	b510      	push	{r4, lr}
     65a:	0004      	movs	r4, r0
	uint8_t i;

	mcp2515_modifyRegister(MCP_CANCTRL, MODE_MASK, newmode);
     65c:	0002      	movs	r2, r0
     65e:	21e0      	movs	r1, #224	; 0xe0
     660:	200f      	movs	r0, #15
     662:	4b06      	ldr	r3, [pc, #24]	; (67c <mcp2515_setCANCTRL_Mode+0x24>)
     664:	4798      	blx	r3

	i = mcp2515_readRegister(MCP_CANCTRL);
     666:	200f      	movs	r0, #15
     668:	4b05      	ldr	r3, [pc, #20]	; (680 <mcp2515_setCANCTRL_Mode+0x28>)
     66a:	4798      	blx	r3
	i &= MODE_MASK;
     66c:	23e0      	movs	r3, #224	; 0xe0

	if ( i == newmode )
     66e:	4018      	ands	r0, r3
     670:	1b00      	subs	r0, r0, r4
     672:	1e43      	subs	r3, r0, #1
     674:	4198      	sbcs	r0, r3
     676:	b2c0      	uxtb	r0, r0
	{
		return MCP2515_OK;
	}
	return MCP2515_FAIL;
}
     678:	bd10      	pop	{r4, pc}
     67a:	46c0      	nop			; (mov r8, r8)
     67c:	000005e9 	.word	0x000005e9
     680:	000004d9 	.word	0x000004d9

00000684 <mcp2515_configRate>:

uint8_t mcp2515_configRate(const uint8_t canSpeed) {
     684:	b570      	push	{r4, r5, r6, lr}
	uint8_t set, cfg1, cfg2, cfg3;
	set = 1;
	switch (canSpeed)
     686:	2810      	cmp	r0, #16
     688:	d845      	bhi.n	716 <mcp2515_configRate+0x92>
     68a:	0080      	lsls	r0, r0, #2
     68c:	4b27      	ldr	r3, [pc, #156]	; (72c <mcp2515_configRate+0xa8>)
     68e:	581b      	ldr	r3, [r3, r0]
     690:	469f      	mov	pc, r3
		break;

		case (CAN_20KBPS):
		cfg1 = MCP_16MHz_20kBPS_CFG1;
		cfg2 = MCP_16MHz_20kBPS_CFG2;
		cfg3 = MCP_16MHz_20kBPS_CFG3;
     692:	2687      	movs	r6, #135	; 0x87
		cfg2 = MCP_16MHz_20kBPS_CFG2;
     694:	25ff      	movs	r5, #255	; 0xff
		cfg1 = MCP_16MHz_20kBPS_CFG1;
     696:	210f      	movs	r1, #15
     698:	e032      	b.n	700 <mcp2515_configRate+0x7c>
		break;

		case (CAN_33KBPS):
		cfg1 = MCP_16MHz_33kBPS_CFG1;
		cfg2 = MCP_16MHz_33kBPS_CFG2;
		cfg3 = MCP_16MHz_33kBPS_CFG3;
     69a:	2607      	movs	r6, #7
		cfg2 = MCP_16MHz_33kBPS_CFG2;
     69c:	25be      	movs	r5, #190	; 0xbe
		cfg1 = MCP_16MHz_33kBPS_CFG1;
     69e:	2109      	movs	r1, #9
		break;
     6a0:	e02e      	b.n	700 <mcp2515_configRate+0x7c>

		case (CAN_40KBPS):
		cfg1 = MCP_16MHz_40kBPS_CFG1;
		cfg2 = MCP_16MHz_40kBPS_CFG2;
		cfg3 = MCP_16MHz_40kBPS_CFG3;
     6a2:	2687      	movs	r6, #135	; 0x87
		cfg2 = MCP_16MHz_40kBPS_CFG2;
     6a4:	25ff      	movs	r5, #255	; 0xff
		cfg1 = MCP_16MHz_40kBPS_CFG1;
     6a6:	2107      	movs	r1, #7
		break;
     6a8:	e02a      	b.n	700 <mcp2515_configRate+0x7c>

		case (CAN_50KBPS):
		cfg1 = MCP_16MHz_50kBPS_CFG1;
		cfg2 = MCP_16MHz_50kBPS_CFG2;
		cfg3 = MCP_16MHz_50kBPS_CFG3;
     6aa:	2687      	movs	r6, #135	; 0x87
		cfg2 = MCP_16MHz_50kBPS_CFG2;
     6ac:	25fa      	movs	r5, #250	; 0xfa
		cfg1 = MCP_16MHz_50kBPS_CFG1;
     6ae:	2107      	movs	r1, #7
		break;
     6b0:	e026      	b.n	700 <mcp2515_configRate+0x7c>

		case (CAN_80KBPS):
		cfg1 = MCP_16MHz_80kBPS_CFG1;
		cfg2 = MCP_16MHz_80kBPS_CFG2;
		cfg3 = MCP_16MHz_80kBPS_CFG3;
     6b2:	2687      	movs	r6, #135	; 0x87
		cfg2 = MCP_16MHz_80kBPS_CFG2;
     6b4:	25ff      	movs	r5, #255	; 0xff
		cfg1 = MCP_16MHz_80kBPS_CFG1;
     6b6:	2103      	movs	r1, #3
		break;
     6b8:	e022      	b.n	700 <mcp2515_configRate+0x7c>

		case (CAN_83K3BPS):
		cfg1 = MCP_16MHz_83k3BPS_CFG1;
		cfg2 = MCP_16MHz_83k3BPS_CFG2;
		cfg3 = MCP_16MHz_83k3BPS_CFG3;
     6ba:	2607      	movs	r6, #7
		cfg2 = MCP_16MHz_83k3BPS_CFG2;
     6bc:	25be      	movs	r5, #190	; 0xbe
		cfg1 = MCP_16MHz_83k3BPS_CFG1;
     6be:	2103      	movs	r1, #3
		break;
     6c0:	e01e      	b.n	700 <mcp2515_configRate+0x7c>

		case (CAN_95KBPS):
		cfg1 = MCP_16MHz_95kBPS_CFG1;
		cfg2 = MCP_16MHz_95kBPS_CFG2;
		cfg3 = MCP_16MHz_95kBPS_CFG3;
     6c2:	2607      	movs	r6, #7
		cfg2 = MCP_16MHz_95kBPS_CFG2;
     6c4:	25ad      	movs	r5, #173	; 0xad
		cfg1 = MCP_16MHz_95kBPS_CFG1;
     6c6:	2103      	movs	r1, #3
		break;
     6c8:	e01a      	b.n	700 <mcp2515_configRate+0x7c>

		case (CAN_100KBPS):                                             /* 100KBPS                  */
		cfg1 = MCP_16MHz_100kBPS_CFG1;
		cfg2 = MCP_16MHz_100kBPS_CFG2;
		cfg3 = MCP_16MHz_100kBPS_CFG3;
     6ca:	2687      	movs	r6, #135	; 0x87
		cfg2 = MCP_16MHz_100kBPS_CFG2;
     6cc:	25fa      	movs	r5, #250	; 0xfa
		cfg1 = MCP_16MHz_100kBPS_CFG1;
     6ce:	2103      	movs	r1, #3
		break;
     6d0:	e016      	b.n	700 <mcp2515_configRate+0x7c>

		case (CAN_125KBPS):
		cfg1 = MCP_16MHz_125kBPS_CFG1;
		cfg2 = MCP_16MHz_125kBPS_CFG2;
		cfg3 = MCP_16MHz_125kBPS_CFG3;
     6d2:	2686      	movs	r6, #134	; 0x86
		cfg2 = MCP_16MHz_125kBPS_CFG2;
     6d4:	25f0      	movs	r5, #240	; 0xf0
		cfg1 = MCP_16MHz_125kBPS_CFG1;
     6d6:	2103      	movs	r1, #3
		break;
     6d8:	e012      	b.n	700 <mcp2515_configRate+0x7c>

		case (CAN_200KBPS):
		cfg1 = MCP_16MHz_200kBPS_CFG1;
		cfg2 = MCP_16MHz_200kBPS_CFG2;
		cfg3 = MCP_16MHz_200kBPS_CFG3;
     6da:	2687      	movs	r6, #135	; 0x87
		cfg2 = MCP_16MHz_200kBPS_CFG2;
     6dc:	25fa      	movs	r5, #250	; 0xfa
		cfg1 = MCP_16MHz_200kBPS_CFG1;
     6de:	2101      	movs	r1, #1
		break;
     6e0:	e00e      	b.n	700 <mcp2515_configRate+0x7c>

		case (CAN_250KBPS):
		cfg1 = MCP_16MHz_250kBPS_CFG1;
		cfg2 = MCP_16MHz_250kBPS_CFG2;
		cfg3 = MCP_16MHz_250kBPS_CFG3;
     6e2:	2685      	movs	r6, #133	; 0x85
		cfg2 = MCP_16MHz_250kBPS_CFG2;
     6e4:	25f1      	movs	r5, #241	; 0xf1
		cfg1 = MCP_16MHz_250kBPS_CFG1;
     6e6:	2141      	movs	r1, #65	; 0x41
		break;
     6e8:	e00a      	b.n	700 <mcp2515_configRate+0x7c>

		case (CAN_500KBPS):
		cfg1 = MCP_16MHz_500kBPS_CFG1;
		cfg2 = MCP_16MHz_500kBPS_CFG2;
		cfg3 = MCP_16MHz_500kBPS_CFG3;
     6ea:	2686      	movs	r6, #134	; 0x86
		cfg2 = MCP_16MHz_500kBPS_CFG2;
     6ec:	25f0      	movs	r5, #240	; 0xf0
		cfg1 = MCP_16MHz_500kBPS_CFG1;
     6ee:	2100      	movs	r1, #0
		break;
     6f0:	e006      	b.n	700 <mcp2515_configRate+0x7c>
		
		case (CAN_1000KBPS):
		cfg1 = MCP_16MHz_1000kBPS_CFG1;
		cfg2 = MCP_16MHz_1000kBPS_CFG2;
		cfg3 = MCP_16MHz_1000kBPS_CFG3;
     6f2:	2682      	movs	r6, #130	; 0x82
		cfg2 = MCP_16MHz_1000kBPS_CFG2;
     6f4:	25d0      	movs	r5, #208	; 0xd0
		cfg1 = MCP_16MHz_1000kBPS_CFG1;
     6f6:	2100      	movs	r1, #0
		break;
     6f8:	e002      	b.n	700 <mcp2515_configRate+0x7c>
		cfg3 = MCP_16MHz_5kBPS_CFG3;
     6fa:	2687      	movs	r6, #135	; 0x87
		cfg2 = MCP_16MHz_5kBPS_CFG2;
     6fc:	25ff      	movs	r5, #255	; 0xff
		cfg1 = MCP_16MHz_5kBPS_CFG1;
     6fe:	213f      	movs	r1, #63	; 0x3f
		set = 0;
		break;
	}

	if (set) {
		mcp2515_setRegister(MCP_CNF1, cfg1);
     700:	202a      	movs	r0, #42	; 0x2a
     702:	4c0b      	ldr	r4, [pc, #44]	; (730 <mcp2515_configRate+0xac>)
     704:	47a0      	blx	r4
		mcp2515_setRegister(MCP_CNF2, cfg2);
     706:	0029      	movs	r1, r5
     708:	2029      	movs	r0, #41	; 0x29
     70a:	47a0      	blx	r4
		mcp2515_setRegister(MCP_CNF3, cfg3);
     70c:	0031      	movs	r1, r6
     70e:	2028      	movs	r0, #40	; 0x28
     710:	47a0      	blx	r4
		return MCP2515_OK;
     712:	2000      	movs	r0, #0
	}
	else {
		return MCP2515_FAIL;
	}
}
     714:	bd70      	pop	{r4, r5, r6, pc}
		return MCP2515_FAIL;
     716:	2001      	movs	r0, #1
     718:	e7fc      	b.n	714 <mcp2515_configRate+0x90>
		cfg3 = MCP_16MHz_10kBPS_CFG3;
     71a:	2687      	movs	r6, #135	; 0x87
		cfg2 = MCP_16MHz_10kBPS_CFG2;
     71c:	25ff      	movs	r5, #255	; 0xff
		cfg1 = MCP_16MHz_10kBPS_CFG1;
     71e:	211f      	movs	r1, #31
     720:	e7ee      	b.n	700 <mcp2515_configRate+0x7c>
		cfg3 = MCP_16MHz_31k25BPS_CFG3;
     722:	2685      	movs	r6, #133	; 0x85
		cfg2 = MCP_16MHz_31k25BPS_CFG2;
     724:	25f1      	movs	r5, #241	; 0xf1
		cfg1 = MCP_16MHz_31k25BPS_CFG1;
     726:	210f      	movs	r1, #15
     728:	e7ea      	b.n	700 <mcp2515_configRate+0x7c>
     72a:	46c0      	nop			; (mov r8, r8)
     72c:	00002508 	.word	0x00002508
     730:	00000565 	.word	0x00000565

00000734 <mcp2515_write_id>:
	return res;
}

/******************** MANAGMENT TOOLS *******************/

void mcp2515_write_id(const uint8_t mcp_addr, const uint8_t ext, const uint32_t id) {
     734:	b530      	push	{r4, r5, lr}
     736:	b083      	sub	sp, #12
	uint16_t canid;
	uint8_t tbufdata[4];

	canid = (uint16_t)(id & 0x0FFFF);
     738:	b293      	uxth	r3, r2

	if (ext == 1) {
     73a:	2901      	cmp	r1, #1
     73c:	d012      	beq.n	764 <mcp2515_write_id+0x30>
		tbufdata[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
		tbufdata[MCP_SIDL] |= MCP_TXB_EXIDE_M;
		tbufdata[MCP_SIDH] = (uint8_t) (canid >> 5);
	}
	else {
		tbufdata[MCP_SIDH] = (uint8_t) (canid >> 3);
     73e:	a901      	add	r1, sp, #4
     740:	08db      	lsrs	r3, r3, #3
     742:	700b      	strb	r3, [r1, #0]
		tbufdata[MCP_SIDL] = (uint8_t) ((canid & 0x07) << 5);
     744:	0152      	lsls	r2, r2, #5
     746:	704a      	strb	r2, [r1, #1]
		tbufdata[MCP_EID0] = 0;
     748:	2300      	movs	r3, #0
     74a:	70cb      	strb	r3, [r1, #3]
		tbufdata[MCP_EID8] = 0;
     74c:	708b      	strb	r3, [r1, #2]
	}
	mcp2515_setRegisterS(mcp_addr, tbufdata, 4);
     74e:	2204      	movs	r2, #4
     750:	a901      	add	r1, sp, #4
     752:	4b0d      	ldr	r3, [pc, #52]	; (788 <mcp2515_write_id+0x54>)
     754:	4798      	blx	r3
     756:	23fa      	movs	r3, #250	; 0xfa
     758:	005b      	lsls	r3, r3, #1
     75a:	3b01      	subs	r3, #1
	for(int aux=0;aux<500;aux++) // We need to wait about X microseconds to let it load
     75c:	2b00      	cmp	r3, #0
     75e:	d1fc      	bne.n	75a <mcp2515_write_id+0x26>
		{
			;//this works like a NOPE instruction
		}
}
     760:	b003      	add	sp, #12
     762:	bd30      	pop	{r4, r5, pc}
		tbufdata[MCP_EID0] = (uint8_t) (canid & 0xFF);
     764:	a901      	add	r1, sp, #4
     766:	70ca      	strb	r2, [r1, #3]
		tbufdata[MCP_EID8] = (uint8_t) (canid >> 8);
     768:	0a1b      	lsrs	r3, r3, #8
     76a:	708b      	strb	r3, [r1, #2]
		canid = (uint16_t)(id >> 16);
     76c:	0c12      	lsrs	r2, r2, #16
		tbufdata[MCP_SIDL] = (uint8_t) (canid & 0x03);
     76e:	b2d4      	uxtb	r4, r2
     770:	2303      	movs	r3, #3
     772:	4023      	ands	r3, r4
		tbufdata[MCP_SIDL] |= MCP_TXB_EXIDE_M;
     774:	2508      	movs	r5, #8
     776:	432b      	orrs	r3, r5
		tbufdata[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
     778:	00e4      	lsls	r4, r4, #3
     77a:	251f      	movs	r5, #31
     77c:	43ac      	bics	r4, r5
		tbufdata[MCP_SIDL] |= MCP_TXB_EXIDE_M;
     77e:	4323      	orrs	r3, r4
     780:	704b      	strb	r3, [r1, #1]
		tbufdata[MCP_SIDH] = (uint8_t) (canid >> 5);
     782:	0952      	lsrs	r2, r2, #5
     784:	700a      	strb	r2, [r1, #0]
     786:	e7e2      	b.n	74e <mcp2515_write_id+0x1a>
     788:	00000599 	.word	0x00000599

0000078c <mcp2515_write_mf>:

void mcp2515_write_mf( const uint8_t mcp_addr, const uint8_t ext, const uint32_t id )
{
     78c:	b530      	push	{r4, r5, lr}
     78e:	b083      	sub	sp, #12
	uint16_t canid;
	uint8_t tbufdata[4];
	canid = (uint16_t)(id & 0x0FFFF);
     790:	b293      	uxth	r3, r2

	if ( ext == 1)
     792:	2901      	cmp	r1, #1
     794:	d013      	beq.n	7be <mcp2515_write_mf+0x32>
		tbufdata[MCP_SIDL] |= MCP_TXB_EXIDE_M;
		tbufdata[MCP_SIDH] = (uint8_t) (canid >> 5 );
	}
	else
	{
		tbufdata[MCP_EID0] = (uint8_t) (canid & 0xFF);
     796:	a901      	add	r1, sp, #4
     798:	70ca      	strb	r2, [r1, #3]
		tbufdata[MCP_EID8] = (uint8_t) (canid >> 8);
     79a:	0a1b      	lsrs	r3, r3, #8
     79c:	708b      	strb	r3, [r1, #2]
		canid = (uint16_t)(id >> 16);
     79e:	0c12      	lsrs	r2, r2, #16
		tbufdata[MCP_SIDL] = (uint8_t) ((canid & 0x07) << 5);
     7a0:	0153      	lsls	r3, r2, #5
     7a2:	704b      	strb	r3, [r1, #1]
		tbufdata[MCP_SIDH] = (uint8_t) (canid >> 3 );
     7a4:	08d2      	lsrs	r2, r2, #3
     7a6:	700a      	strb	r2, [r1, #0]
	}
	
	mcp2515_setRegisterS( mcp_addr, tbufdata, 4 );
     7a8:	2204      	movs	r2, #4
     7aa:	a901      	add	r1, sp, #4
     7ac:	4b0d      	ldr	r3, [pc, #52]	; (7e4 <mcp2515_write_mf+0x58>)
     7ae:	4798      	blx	r3
     7b0:	23fa      	movs	r3, #250	; 0xfa
     7b2:	005b      	lsls	r3, r3, #1
     7b4:	3b01      	subs	r3, #1
	for(int aux=0;aux<500;aux++) // We need to wait about X microseconds to let it load
     7b6:	2b00      	cmp	r3, #0
     7b8:	d1fc      	bne.n	7b4 <mcp2515_write_mf+0x28>
	{
		;//this works like a NOPE instruction
	}
}
     7ba:	b003      	add	sp, #12
     7bc:	bd30      	pop	{r4, r5, pc}
		tbufdata[MCP_EID0] = (uint8_t) (canid & 0xFF);
     7be:	a901      	add	r1, sp, #4
     7c0:	70ca      	strb	r2, [r1, #3]
		tbufdata[MCP_EID8] = (uint8_t) (canid >> 8);
     7c2:	0a1b      	lsrs	r3, r3, #8
     7c4:	708b      	strb	r3, [r1, #2]
		canid = (uint16_t)(id >> 16);
     7c6:	0c12      	lsrs	r2, r2, #16
		tbufdata[MCP_SIDL] = (uint8_t) (canid & 0x03);
     7c8:	b2d4      	uxtb	r4, r2
     7ca:	2303      	movs	r3, #3
     7cc:	4023      	ands	r3, r4
		tbufdata[MCP_SIDL] |= MCP_TXB_EXIDE_M;
     7ce:	2508      	movs	r5, #8
     7d0:	432b      	orrs	r3, r5
		tbufdata[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
     7d2:	00e4      	lsls	r4, r4, #3
     7d4:	251f      	movs	r5, #31
     7d6:	43ac      	bics	r4, r5
		tbufdata[MCP_SIDL] |= MCP_TXB_EXIDE_M;
     7d8:	4323      	orrs	r3, r4
     7da:	704b      	strb	r3, [r1, #1]
		tbufdata[MCP_SIDH] = (uint8_t) (canid >> 5 );
     7dc:	0952      	lsrs	r2, r2, #5
     7de:	700a      	strb	r2, [r1, #0]
     7e0:	e7e2      	b.n	7a8 <mcp2515_write_mf+0x1c>
     7e2:	46c0      	nop			; (mov r8, r8)
     7e4:	00000599 	.word	0x00000599

000007e8 <mcp2515_initCANBuffers>:
void mcp2515_initCANBuffers(void) {
     7e8:	b570      	push	{r4, r5, r6, lr}
	mcp2515_write_mf(MCP_RXM0SIDH, ext, ulMask);	/*Set both masks to 0           */
     7ea:	2200      	movs	r2, #0
     7ec:	2101      	movs	r1, #1
     7ee:	2020      	movs	r0, #32
     7f0:	4c1c      	ldr	r4, [pc, #112]	; (864 <mcp2515_initCANBuffers+0x7c>)
     7f2:	47a0      	blx	r4
	mcp2515_write_mf(MCP_RXM1SIDH, ext, ulMask);	/*Mask register ignores ext bit */
     7f4:	2200      	movs	r2, #0
     7f6:	2101      	movs	r1, #1
     7f8:	2024      	movs	r0, #36	; 0x24
     7fa:	47a0      	blx	r4
	mcp2515_write_mf(MCP_RXF0SIDH, ext, ulFilt);	/* RXB0: extended               */
     7fc:	2200      	movs	r2, #0
     7fe:	2101      	movs	r1, #1
     800:	2000      	movs	r0, #0
     802:	47a0      	blx	r4
	mcp2515_write_mf(MCP_RXF1SIDH, std, ulFilt);	/* RXB1: standard               */
     804:	2200      	movs	r2, #0
     806:	2100      	movs	r1, #0
     808:	2004      	movs	r0, #4
     80a:	47a0      	blx	r4
	mcp2515_write_mf(MCP_RXF2SIDH, ext, ulFilt);	/* RXB2: extended               */
     80c:	2200      	movs	r2, #0
     80e:	2101      	movs	r1, #1
     810:	2008      	movs	r0, #8
     812:	47a0      	blx	r4
	mcp2515_write_mf(MCP_RXF3SIDH, std, ulFilt);	/* RXB3: standard               */
     814:	2200      	movs	r2, #0
     816:	2100      	movs	r1, #0
     818:	2010      	movs	r0, #16
     81a:	47a0      	blx	r4
	mcp2515_write_mf(MCP_RXF4SIDH, ext, ulFilt);
     81c:	2200      	movs	r2, #0
     81e:	2101      	movs	r1, #1
     820:	2014      	movs	r0, #20
     822:	47a0      	blx	r4
	mcp2515_write_mf(MCP_RXF5SIDH, std, ulFilt);
     824:	2200      	movs	r2, #0
     826:	2100      	movs	r1, #0
     828:	2018      	movs	r0, #24
     82a:	47a0      	blx	r4
	a1 = MCP_TXB0CTRL;
     82c:	2430      	movs	r4, #48	; 0x30
		mcp2515_setRegister(a1, 0);
     82e:	4d0e      	ldr	r5, [pc, #56]	; (868 <mcp2515_initCANBuffers+0x80>)
     830:	2100      	movs	r1, #0
     832:	0020      	movs	r0, r4
     834:	47a8      	blx	r5
		mcp2515_setRegister(a2, 0);
     836:	0020      	movs	r0, r4
     838:	3010      	adds	r0, #16
     83a:	b2c0      	uxtb	r0, r0
     83c:	2100      	movs	r1, #0
     83e:	47a8      	blx	r5
		mcp2515_setRegister(a3, 0);
     840:	0020      	movs	r0, r4
     842:	3020      	adds	r0, #32
     844:	b2c0      	uxtb	r0, r0
     846:	2100      	movs	r1, #0
     848:	47a8      	blx	r5
		a1++;
     84a:	3401      	adds	r4, #1
     84c:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 14; i++) {                         /* in-buffer loop               */
     84e:	2c3e      	cmp	r4, #62	; 0x3e
     850:	d1ee      	bne.n	830 <mcp2515_initCANBuffers+0x48>
	mcp2515_setRegister(MCP_RXB0CTRL, 0);
     852:	2100      	movs	r1, #0
     854:	2060      	movs	r0, #96	; 0x60
     856:	4c04      	ldr	r4, [pc, #16]	; (868 <mcp2515_initCANBuffers+0x80>)
     858:	47a0      	blx	r4
	mcp2515_setRegister(MCP_RXB1CTRL, 0);
     85a:	2100      	movs	r1, #0
     85c:	2070      	movs	r0, #112	; 0x70
     85e:	47a0      	blx	r4
}
     860:	bd70      	pop	{r4, r5, r6, pc}
     862:	46c0      	nop			; (mov r8, r8)
     864:	0000078d 	.word	0x0000078d
     868:	00000565 	.word	0x00000565

0000086c <mcp2515_init>:
uint8_t mcp2515_init(const uint8_t canSpeed) {            /* mcp2515init                  */
     86c:	b570      	push	{r4, r5, r6, lr}
     86e:	0005      	movs	r5, r0
	mcp2515_reset();
     870:	4b21      	ldr	r3, [pc, #132]	; (8f8 <mcp2515_init+0x8c>)
     872:	4798      	blx	r3
     874:	4b21      	ldr	r3, [pc, #132]	; (8fc <mcp2515_init+0x90>)
     876:	3b01      	subs	r3, #1
	for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
     878:	2b00      	cmp	r3, #0
     87a:	d1fc      	bne.n	876 <mcp2515_init+0xa>
	res = mcp2515_setCANCTRL_Mode(MODE_CONFIG);
     87c:	2080      	movs	r0, #128	; 0x80
     87e:	4b20      	ldr	r3, [pc, #128]	; (900 <mcp2515_init+0x94>)
     880:	4798      	blx	r3
     882:	1e04      	subs	r4, r0, #0
	if(res > 0)
     884:	d006      	beq.n	894 <mcp2515_init+0x28>
     886:	23fa      	movs	r3, #250	; 0xfa
     888:	005b      	lsls	r3, r3, #1
     88a:	3b01      	subs	r3, #1
		for(int aux=0;aux<500;aux++) // We need to wait about X microsec to let it load
     88c:	2b00      	cmp	r3, #0
     88e:	d1fc      	bne.n	88a <mcp2515_init+0x1e>
}
     890:	0020      	movs	r0, r4
     892:	bd70      	pop	{r4, r5, r6, pc}
     894:	23fa      	movs	r3, #250	; 0xfa
     896:	005b      	lsls	r3, r3, #1
     898:	3b01      	subs	r3, #1
	for(int aux=0;aux<500;aux++) // We need to wait about X microseconds to let it load
     89a:	2b00      	cmp	r3, #0
     89c:	d1fc      	bne.n	898 <mcp2515_init+0x2c>
	if(mcp2515_configRate(canSpeed))
     89e:	0028      	movs	r0, r5
     8a0:	4b18      	ldr	r3, [pc, #96]	; (904 <mcp2515_init+0x98>)
     8a2:	4798      	blx	r3
     8a4:	2800      	cmp	r0, #0
     8a6:	d004      	beq.n	8b2 <mcp2515_init+0x46>
     8a8:	4b14      	ldr	r3, [pc, #80]	; (8fc <mcp2515_init+0x90>)
     8aa:	3b01      	subs	r3, #1
		for(int aux=0;aux<1500;aux++) // We need to wait about X microsec to let it load
     8ac:	2b00      	cmp	r3, #0
     8ae:	d1fc      	bne.n	8aa <mcp2515_init+0x3e>
     8b0:	e7ee      	b.n	890 <mcp2515_init+0x24>
     8b2:	4b12      	ldr	r3, [pc, #72]	; (8fc <mcp2515_init+0x90>)
     8b4:	3b01      	subs	r3, #1
	for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
     8b6:	2b00      	cmp	r3, #0
     8b8:	d1fc      	bne.n	8b4 <mcp2515_init+0x48>
		mcp2515_initCANBuffers();
     8ba:	4b13      	ldr	r3, [pc, #76]	; (908 <mcp2515_init+0x9c>)
     8bc:	4798      	blx	r3
		mcp2515_setRegister(MCP_CANINTE, MCP_RX0IF | MCP_RX1IF);
     8be:	2103      	movs	r1, #3
     8c0:	202b      	movs	r0, #43	; 0x2b
     8c2:	4b12      	ldr	r3, [pc, #72]	; (90c <mcp2515_init+0xa0>)
     8c4:	4798      	blx	r3
		mcp2515_modifyRegister(MCP_RXB0CTRL, MCP_RXB_RX_MASK | MCP_RXB_BUKT_MASK, MCP_RXB_RX_STDEXT | MCP_RXB_BUKT_MASK);
     8c6:	2204      	movs	r2, #4
     8c8:	2164      	movs	r1, #100	; 0x64
     8ca:	2060      	movs	r0, #96	; 0x60
     8cc:	4c10      	ldr	r4, [pc, #64]	; (910 <mcp2515_init+0xa4>)
     8ce:	47a0      	blx	r4
		mcp2515_modifyRegister(MCP_RXB1CTRL, MCP_RXB_RX_MASK, MCP_RXB_RX_STDEXT);
     8d0:	2200      	movs	r2, #0
     8d2:	2160      	movs	r1, #96	; 0x60
     8d4:	2070      	movs	r0, #112	; 0x70
     8d6:	47a0      	blx	r4
		res = mcp2515_setCANCTRL_Mode(MODE_NORMAL);
     8d8:	2000      	movs	r0, #0
     8da:	4b09      	ldr	r3, [pc, #36]	; (900 <mcp2515_init+0x94>)
     8dc:	4798      	blx	r3
     8de:	1e04      	subs	r4, r0, #0
		if(res)
     8e0:	d004      	beq.n	8ec <mcp2515_init+0x80>
     8e2:	4b06      	ldr	r3, [pc, #24]	; (8fc <mcp2515_init+0x90>)
     8e4:	3b01      	subs	r3, #1
			for(int aux=0;aux<1500;aux++) 
     8e6:	2b00      	cmp	r3, #0
     8e8:	d1fc      	bne.n	8e4 <mcp2515_init+0x78>
     8ea:	e7d1      	b.n	890 <mcp2515_init+0x24>
     8ec:	4b03      	ldr	r3, [pc, #12]	; (8fc <mcp2515_init+0x90>)
     8ee:	3b01      	subs	r3, #1
		for(int aux=0;aux<1500;aux++) // We need to wait about X microsec to let it load
     8f0:	2b00      	cmp	r3, #0
     8f2:	d1fc      	bne.n	8ee <mcp2515_init+0x82>
     8f4:	e7cc      	b.n	890 <mcp2515_init+0x24>
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	000004b1 	.word	0x000004b1
     8fc:	000005dc 	.word	0x000005dc
     900:	00000659 	.word	0x00000659
     904:	00000685 	.word	0x00000685
     908:	000007e9 	.word	0x000007e9
     90c:	00000565 	.word	0x00000565
     910:	000005e9 	.word	0x000005e9

00000914 <mcp2515_read_id>:



void mcp2515_read_id(const uint8_t mcp_addr, uint8_t* ext, uint32_t* id) {
     914:	b570      	push	{r4, r5, r6, lr}
     916:	b082      	sub	sp, #8
     918:	000d      	movs	r5, r1
     91a:	0014      	movs	r4, r2
	uint8_t tbufdata[4];

	*ext = 0;
     91c:	2300      	movs	r3, #0
     91e:	700b      	strb	r3, [r1, #0]
	*id = 0;
     920:	6013      	str	r3, [r2, #0]

	mcp2515_readRegisterS(mcp_addr, tbufdata, 4);
     922:	ae01      	add	r6, sp, #4
     924:	2204      	movs	r2, #4
     926:	0031      	movs	r1, r6
     928:	4b0c      	ldr	r3, [pc, #48]	; (95c <mcp2515_read_id+0x48>)
     92a:	4798      	blx	r3

	*id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
     92c:	7872      	ldrb	r2, [r6, #1]
     92e:	7833      	ldrb	r3, [r6, #0]
     930:	00db      	lsls	r3, r3, #3
     932:	0951      	lsrs	r1, r2, #5
     934:	185b      	adds	r3, r3, r1
     936:	6023      	str	r3, [r4, #0]

	if ((tbufdata[MCP_SIDL] & MCP_TXB_EXIDE_M) ==  MCP_TXB_EXIDE_M)
     938:	0711      	lsls	r1, r2, #28
     93a:	d50d      	bpl.n	958 <mcp2515_read_id+0x44>
	{
		/* extended id                  */
		*id = (*id<<2) + (tbufdata[MCP_SIDL] & 0x03);
     93c:	009b      	lsls	r3, r3, #2
     93e:	2103      	movs	r1, #3
     940:	400a      	ands	r2, r1
     942:	189b      	adds	r3, r3, r2
		*id = (*id<<8) + tbufdata[MCP_EID8];
     944:	021b      	lsls	r3, r3, #8
     946:	aa01      	add	r2, sp, #4
     948:	7891      	ldrb	r1, [r2, #2]
     94a:	185b      	adds	r3, r3, r1
		*id = (*id<<8) + tbufdata[MCP_EID0];
     94c:	021b      	lsls	r3, r3, #8
     94e:	78d2      	ldrb	r2, [r2, #3]
     950:	189b      	adds	r3, r3, r2
     952:	6023      	str	r3, [r4, #0]
		*ext = 1;
     954:	2301      	movs	r3, #1
     956:	702b      	strb	r3, [r5, #0]
	}
}
     958:	b002      	add	sp, #8
     95a:	bd70      	pop	{r4, r5, r6, pc}
     95c:	00000511 	.word	0x00000511

00000960 <mcp2515_write_canMsg>:

void mcp2515_write_canMsg(const uint8_t buffer_sidh_addr) {
     960:	b510      	push	{r4, lr}
     962:	0004      	movs	r4, r0
	uint8_t mcp_addr;
	mcp_addr = buffer_sidh_addr;
	mcp2515_setRegisterS(mcp_addr+5, m_nDta, m_nDlc);    /* write data bytes             */
     964:	4b0f      	ldr	r3, [pc, #60]	; (9a4 <mcp2515_write_canMsg+0x44>)
     966:	781a      	ldrb	r2, [r3, #0]
     968:	3005      	adds	r0, #5
     96a:	b2c0      	uxtb	r0, r0
     96c:	490e      	ldr	r1, [pc, #56]	; (9a8 <mcp2515_write_canMsg+0x48>)
     96e:	4b0f      	ldr	r3, [pc, #60]	; (9ac <mcp2515_write_canMsg+0x4c>)
     970:	4798      	blx	r3
	if ( m_nRtr == 1)                                    /* if RTR set bit in byte       */
     972:	4b0f      	ldr	r3, [pc, #60]	; (9b0 <mcp2515_write_canMsg+0x50>)
     974:	781b      	ldrb	r3, [r3, #0]
     976:	2b01      	cmp	r3, #1
     978:	d00d      	beq.n	996 <mcp2515_write_canMsg+0x36>
	{
		m_nDlc |= MCP_RTR_MASK;
	}
	mcp2515_setRegister((mcp_addr+4), m_nDlc);          /* write the RTR and DLC        */
     97a:	4b0a      	ldr	r3, [pc, #40]	; (9a4 <mcp2515_write_canMsg+0x44>)
     97c:	7819      	ldrb	r1, [r3, #0]
     97e:	1d20      	adds	r0, r4, #4
     980:	b2c0      	uxtb	r0, r0
     982:	4b0c      	ldr	r3, [pc, #48]	; (9b4 <mcp2515_write_canMsg+0x54>)
     984:	4798      	blx	r3
	mcp2515_write_id(mcp_addr, m_nExtFlg, m_nID);       /* write CAN id                 */
     986:	4b0c      	ldr	r3, [pc, #48]	; (9b8 <mcp2515_write_canMsg+0x58>)
     988:	681a      	ldr	r2, [r3, #0]
     98a:	4b0c      	ldr	r3, [pc, #48]	; (9bc <mcp2515_write_canMsg+0x5c>)
     98c:	7819      	ldrb	r1, [r3, #0]
     98e:	0020      	movs	r0, r4
     990:	4b0b      	ldr	r3, [pc, #44]	; (9c0 <mcp2515_write_canMsg+0x60>)
     992:	4798      	blx	r3
}
     994:	bd10      	pop	{r4, pc}
		m_nDlc |= MCP_RTR_MASK;
     996:	4a03      	ldr	r2, [pc, #12]	; (9a4 <mcp2515_write_canMsg+0x44>)
     998:	7813      	ldrb	r3, [r2, #0]
     99a:	2140      	movs	r1, #64	; 0x40
     99c:	430b      	orrs	r3, r1
     99e:	7013      	strb	r3, [r2, #0]
     9a0:	e7eb      	b.n	97a <mcp2515_write_canMsg+0x1a>
     9a2:	46c0      	nop			; (mov r8, r8)
     9a4:	2000048b 	.word	0x2000048b
     9a8:	20000480 	.word	0x20000480
     9ac:	00000599 	.word	0x00000599
     9b0:	20000478 	.word	0x20000478
     9b4:	00000565 	.word	0x00000565
     9b8:	2000047c 	.word	0x2000047c
     9bc:	20000488 	.word	0x20000488
     9c0:	00000735 	.word	0x00000735

000009c4 <mcp2515_read_canMsg>:

void mcp2515_read_canMsg(const uint8_t buffer_sidh_addr) { /* read can msg                 */
     9c4:	b570      	push	{r4, r5, r6, lr}
     9c6:	0004      	movs	r4, r0
	uint8_t mcp_addr, ctrl;

	mcp_addr = buffer_sidh_addr;

	mcp2515_read_id(mcp_addr, &m_nExtFlg, &m_nID);
     9c8:	4a0f      	ldr	r2, [pc, #60]	; (a08 <mcp2515_read_canMsg+0x44>)
     9ca:	4910      	ldr	r1, [pc, #64]	; (a0c <mcp2515_read_canMsg+0x48>)
     9cc:	4b10      	ldr	r3, [pc, #64]	; (a10 <mcp2515_read_canMsg+0x4c>)
     9ce:	4798      	blx	r3

	ctrl = mcp2515_readRegister(mcp_addr-1);
     9d0:	1e60      	subs	r0, r4, #1
     9d2:	b2c0      	uxtb	r0, r0
     9d4:	4d0f      	ldr	r5, [pc, #60]	; (a14 <mcp2515_read_canMsg+0x50>)
     9d6:	47a8      	blx	r5
     9d8:	0006      	movs	r6, r0
	m_nDlc = mcp2515_readRegister(mcp_addr+4);
     9da:	1d20      	adds	r0, r4, #4
     9dc:	b2c0      	uxtb	r0, r0
     9de:	47a8      	blx	r5

	if ((ctrl & 0x08)) {
     9e0:	0733      	lsls	r3, r6, #28
     9e2:	d40c      	bmi.n	9fe <mcp2515_read_canMsg+0x3a>
		m_nRtr = 1;
	}
	else {
		m_nRtr = 0;
     9e4:	2200      	movs	r2, #0
     9e6:	4b0c      	ldr	r3, [pc, #48]	; (a18 <mcp2515_read_canMsg+0x54>)
     9e8:	701a      	strb	r2, [r3, #0]
	}

	m_nDlc &= MCP_DLC_MASK;
     9ea:	220f      	movs	r2, #15
     9ec:	4002      	ands	r2, r0
     9ee:	4b0b      	ldr	r3, [pc, #44]	; (a1c <mcp2515_read_canMsg+0x58>)
     9f0:	701a      	strb	r2, [r3, #0]
	mcp2515_readRegisterS(mcp_addr+5, &(m_nDta[0]), m_nDlc);
     9f2:	3405      	adds	r4, #5
     9f4:	b2e0      	uxtb	r0, r4
     9f6:	490a      	ldr	r1, [pc, #40]	; (a20 <mcp2515_read_canMsg+0x5c>)
     9f8:	4b0a      	ldr	r3, [pc, #40]	; (a24 <mcp2515_read_canMsg+0x60>)
     9fa:	4798      	blx	r3
}
     9fc:	bd70      	pop	{r4, r5, r6, pc}
		m_nRtr = 1;
     9fe:	2201      	movs	r2, #1
     a00:	4b05      	ldr	r3, [pc, #20]	; (a18 <mcp2515_read_canMsg+0x54>)
     a02:	701a      	strb	r2, [r3, #0]
     a04:	e7f1      	b.n	9ea <mcp2515_read_canMsg+0x26>
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	2000047c 	.word	0x2000047c
     a0c:	20000488 	.word	0x20000488
     a10:	00000915 	.word	0x00000915
     a14:	000004d9 	.word	0x000004d9
     a18:	20000478 	.word	0x20000478
     a1c:	2000048b 	.word	0x2000048b
     a20:	20000480 	.word	0x20000480
     a24:	00000511 	.word	0x00000511

00000a28 <mcp2515_start_transmit>:

void mcp2515_start_transmit(const uint8_t mcp_addr)   {     /* start transmit               */
     a28:	b510      	push	{r4, lr}
	mcp2515_modifyRegister(mcp_addr-1 , MCP_TXB_TXREQ_M, MCP_TXB_TXREQ_M);
     a2a:	3801      	subs	r0, #1
     a2c:	b2c0      	uxtb	r0, r0
     a2e:	2208      	movs	r2, #8
     a30:	2108      	movs	r1, #8
     a32:	4b01      	ldr	r3, [pc, #4]	; (a38 <mcp2515_start_transmit+0x10>)
     a34:	4798      	blx	r3
}
     a36:	bd10      	pop	{r4, pc}
     a38:	000005e9 	.word	0x000005e9

00000a3c <mcp2515_getNextFreeTXBuf>:

uint8_t mcp2515_getNextFreeTXBuf(uint8_t *txbuf_n) {      /* get Next free txbuf          */
     a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a3e:	46ce      	mov	lr, r9
     a40:	4647      	mov	r7, r8
     a42:	b580      	push	{r7, lr}
     a44:	b083      	sub	sp, #12
     a46:	4680      	mov	r8, r0
	uint8_t res, i, ctrlval;
	uint8_t ctrlregs[MCP_N_TXBUFFERS] = {MCP_TXB0CTRL, MCP_TXB1CTRL, MCP_TXB2CTRL};
     a48:	ab01      	add	r3, sp, #4
     a4a:	2230      	movs	r2, #48	; 0x30
     a4c:	701a      	strb	r2, [r3, #0]
     a4e:	3210      	adds	r2, #16
     a50:	705a      	strb	r2, [r3, #1]
     a52:	3210      	adds	r2, #16
     a54:	709a      	strb	r2, [r3, #2]

	res = MCP_ALLTXBUSY;
	*txbuf_n = 0x00;
     a56:	2300      	movs	r3, #0
     a58:	7003      	strb	r3, [r0, #0]
     a5a:	2400      	movs	r4, #0
	//

	/* check all 3 TX-Buffers       */
	for (i=0; i<MCP_N_TXBUFFERS; i++) {
		ctrlval = mcp2515_readRegister(ctrlregs[i]);
     a5c:	ae01      	add	r6, sp, #4
     a5e:	4b0b      	ldr	r3, [pc, #44]	; (a8c <mcp2515_getNextFreeTXBuf+0x50>)
     a60:	4699      	mov	r9, r3
		if ( (ctrlval & MCP_TXB_TXREQ_M) == 0) {
     a62:	2708      	movs	r7, #8
		ctrlval = mcp2515_readRegister(ctrlregs[i]);
     a64:	5da5      	ldrb	r5, [r4, r6]
     a66:	0028      	movs	r0, r5
     a68:	47c8      	blx	r9
		if ( (ctrlval & MCP_TXB_TXREQ_M) == 0) {
     a6a:	4207      	tst	r7, r0
     a6c:	d008      	beq.n	a80 <mcp2515_getNextFreeTXBuf+0x44>
     a6e:	3401      	adds	r4, #1
	for (i=0; i<MCP_N_TXBUFFERS; i++) {
     a70:	2c03      	cmp	r4, #3
     a72:	d1f7      	bne.n	a64 <mcp2515_getNextFreeTXBuf+0x28>
			/* r                            */
			res = MCP2515_OK;
			return res;                       /* ! function exit              */
		}
	}
	return res;
     a74:	2002      	movs	r0, #2
}
     a76:	b003      	add	sp, #12
     a78:	bc0c      	pop	{r2, r3}
     a7a:	4690      	mov	r8, r2
     a7c:	4699      	mov	r9, r3
     a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*txbuf_n = ctrlregs[i]+1;          /* return SIDH-address of Buffe */
     a80:	3501      	adds	r5, #1
     a82:	4643      	mov	r3, r8
     a84:	701d      	strb	r5, [r3, #0]
			return res;                       /* ! function exit              */
     a86:	2000      	movs	r0, #0
     a88:	e7f5      	b.n	a76 <mcp2515_getNextFreeTXBuf+0x3a>
     a8a:	46c0      	nop			; (mov r8, r8)
     a8c:	000004d9 	.word	0x000004d9

00000a90 <init_Mask>:

/******************** START MCP SLAVE *******************/

uint8_t init_Mask(uint8_t num, uint32_t ulData) {
     a90:	b570      	push	{r4, r5, r6, lr}
     a92:	0005      	movs	r5, r0
     a94:	000c      	movs	r4, r1
     a96:	4b1b      	ldr	r3, [pc, #108]	; (b04 <init_Mask+0x74>)
     a98:	3b01      	subs	r3, #1
	uint8_t res = MCP2515_OK;
	uint8_t ext =0;
	for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
     a9a:	2b00      	cmp	r3, #0
     a9c:	d1fc      	bne.n	a98 <init_Mask+0x8>
	{
		;//this works like a NOPE instruction
	}
	res = mcp2515_setCANCTRL_Mode(MODE_CONFIG);
     a9e:	2080      	movs	r0, #128	; 0x80
     aa0:	4b19      	ldr	r3, [pc, #100]	; (b08 <init_Mask+0x78>)
     aa2:	4798      	blx	r3
     aa4:	23fa      	movs	r3, #250	; 0xfa
     aa6:	005b      	lsls	r3, r3, #1
     aa8:	3b01      	subs	r3, #1
	for(int aux=0;aux<500;aux++) // We need to wait about X microseconds to let it load
     aaa:	2b00      	cmp	r3, #0
     aac:	d1fc      	bne.n	aa8 <init_Mask+0x18>
	{
		;//this works like a NOPE instruction
	}
	if(res > 0){
     aae:	2800      	cmp	r0, #0
     ab0:	d004      	beq.n	abc <init_Mask+0x2c>
     ab2:	4b14      	ldr	r3, [pc, #80]	; (b04 <init_Mask+0x74>)
     ab4:	3b01      	subs	r3, #1
		for(int aux=0;aux<1500;aux++) // We need to wait about X microsec to let it load
     ab6:	2b00      	cmp	r3, #0
     ab8:	d1fc      	bne.n	ab4 <init_Mask+0x24>
	for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
	{
		;//this works like a NOPE instruction
	}
	return res;
}
     aba:	bd70      	pop	{r4, r5, r6, pc}
     abc:	23fa      	movs	r3, #250	; 0xfa
     abe:	005b      	lsls	r3, r3, #1
     ac0:	3b01      	subs	r3, #1
	for(int aux=0;aux<500;aux++) // We need to wait about X microseconds to let it load
     ac2:	2b00      	cmp	r3, #0
     ac4:	d1fc      	bne.n	ac0 <init_Mask+0x30>
	uint8_t ext =0;
     ac6:	0fe1      	lsrs	r1, r4, #31
	if (num == 0){
     ac8:	2d00      	cmp	r5, #0
     aca:	d00b      	beq.n	ae4 <init_Mask+0x54>
	else if(num == 1){
     acc:	2d01      	cmp	r5, #1
     ace:	d00e      	beq.n	aee <init_Mask+0x5e>
	res = mcp2515_setCANCTRL_Mode(MODE_NORMAL);
     ad0:	2000      	movs	r0, #0
     ad2:	4b0d      	ldr	r3, [pc, #52]	; (b08 <init_Mask+0x78>)
     ad4:	4798      	blx	r3
	if(res > 0){
     ad6:	2800      	cmp	r0, #0
     ad8:	d00e      	beq.n	af8 <init_Mask+0x68>
     ada:	4b0a      	ldr	r3, [pc, #40]	; (b04 <init_Mask+0x74>)
     adc:	3b01      	subs	r3, #1
		for(int aux=0;aux<1500;aux++) // We need to wait about X microsec to let it load
     ade:	2b00      	cmp	r3, #0
     ae0:	d1fc      	bne.n	adc <init_Mask+0x4c>
     ae2:	e7ea      	b.n	aba <init_Mask+0x2a>
		mcp2515_write_mf(MCP_RXM0SIDH, ext, ulData);
     ae4:	0022      	movs	r2, r4
     ae6:	2020      	movs	r0, #32
     ae8:	4b08      	ldr	r3, [pc, #32]	; (b0c <init_Mask+0x7c>)
     aea:	4798      	blx	r3
     aec:	e7f0      	b.n	ad0 <init_Mask+0x40>
		mcp2515_write_mf(MCP_RXM1SIDH, ext, ulData);
     aee:	0022      	movs	r2, r4
     af0:	2024      	movs	r0, #36	; 0x24
     af2:	4b06      	ldr	r3, [pc, #24]	; (b0c <init_Mask+0x7c>)
     af4:	4798      	blx	r3
     af6:	e7eb      	b.n	ad0 <init_Mask+0x40>
     af8:	4b02      	ldr	r3, [pc, #8]	; (b04 <init_Mask+0x74>)
     afa:	3b01      	subs	r3, #1
	for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
     afc:	2b00      	cmp	r3, #0
     afe:	d1fc      	bne.n	afa <init_Mask+0x6a>
     b00:	e7db      	b.n	aba <init_Mask+0x2a>
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	000005dc 	.word	0x000005dc
     b08:	00000659 	.word	0x00000659
     b0c:	0000078d 	.word	0x0000078d

00000b10 <init_Filt>:

uint8_t init_Filt(uint8_t num, uint8_t ext, uint32_t ulData) {
     b10:	b570      	push	{r4, r5, r6, lr}
     b12:	0006      	movs	r6, r0
     b14:	000c      	movs	r4, r1
     b16:	0015      	movs	r5, r2
     b18:	4b25      	ldr	r3, [pc, #148]	; (bb0 <init_Filt+0xa0>)
     b1a:	3b01      	subs	r3, #1
	uint8_t res = MCP2515_OK;
	for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
     b1c:	2b00      	cmp	r3, #0
     b1e:	d1fc      	bne.n	b1a <init_Filt+0xa>
	{
		;//this works like a NOPE instruction
	}
	res = mcp2515_setCANCTRL_Mode(MODE_CONFIG);
     b20:	2080      	movs	r0, #128	; 0x80
     b22:	4b24      	ldr	r3, [pc, #144]	; (bb4 <init_Filt+0xa4>)
     b24:	4798      	blx	r3
	if(res > 0)
     b26:	2800      	cmp	r0, #0
     b28:	d004      	beq.n	b34 <init_Filt+0x24>
     b2a:	4b21      	ldr	r3, [pc, #132]	; (bb0 <init_Filt+0xa0>)
     b2c:	3b01      	subs	r3, #1
	{
		for(int aux=0;aux<1500;aux++) // We need to wait about X microsec to let it load
     b2e:	2b00      	cmp	r3, #0
     b30:	d1fc      	bne.n	b2c <init_Filt+0x1c>
	for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
	{
		;//this works like a NOPE instruction
	}
	return res;
}
     b32:	bd70      	pop	{r4, r5, r6, pc}
     b34:	23fa      	movs	r3, #250	; 0xfa
     b36:	005b      	lsls	r3, r3, #1
     b38:	3b01      	subs	r3, #1
	for(int aux=0;aux<500;aux++) // We need to wait about X microseconds to let it load
     b3a:	2b00      	cmp	r3, #0
     b3c:	d1fc      	bne.n	b38 <init_Filt+0x28>
	switch(num)
     b3e:	2e05      	cmp	r6, #5
     b40:	d808      	bhi.n	b54 <init_Filt+0x44>
     b42:	00b6      	lsls	r6, r6, #2
     b44:	4b1c      	ldr	r3, [pc, #112]	; (bb8 <init_Filt+0xa8>)
     b46:	599b      	ldr	r3, [r3, r6]
     b48:	469f      	mov	pc, r3
		mcp2515_write_mf(MCP_RXF0SIDH, ext, ulData);
     b4a:	002a      	movs	r2, r5
     b4c:	0021      	movs	r1, r4
     b4e:	2000      	movs	r0, #0
     b50:	4b1a      	ldr	r3, [pc, #104]	; (bbc <init_Filt+0xac>)
     b52:	4798      	blx	r3
	res = mcp2515_setCANCTRL_Mode(MODE_NORMAL);
     b54:	2000      	movs	r0, #0
     b56:	4b17      	ldr	r3, [pc, #92]	; (bb4 <init_Filt+0xa4>)
     b58:	4798      	blx	r3
	if(res > 0)
     b5a:	2800      	cmp	r0, #0
     b5c:	d022      	beq.n	ba4 <init_Filt+0x94>
     b5e:	4b14      	ldr	r3, [pc, #80]	; (bb0 <init_Filt+0xa0>)
     b60:	3b01      	subs	r3, #1
		for(int aux=0;aux<1500;aux++) // We need to wait about X microsec to let it load
     b62:	2b00      	cmp	r3, #0
     b64:	d1fc      	bne.n	b60 <init_Filt+0x50>
     b66:	e7e4      	b.n	b32 <init_Filt+0x22>
		mcp2515_write_mf(MCP_RXF1SIDH, ext, ulData);
     b68:	002a      	movs	r2, r5
     b6a:	0021      	movs	r1, r4
     b6c:	2004      	movs	r0, #4
     b6e:	4b13      	ldr	r3, [pc, #76]	; (bbc <init_Filt+0xac>)
     b70:	4798      	blx	r3
		break;
     b72:	e7ef      	b.n	b54 <init_Filt+0x44>
		mcp2515_write_mf(MCP_RXF2SIDH, ext, ulData);
     b74:	002a      	movs	r2, r5
     b76:	0021      	movs	r1, r4
     b78:	2008      	movs	r0, #8
     b7a:	4b10      	ldr	r3, [pc, #64]	; (bbc <init_Filt+0xac>)
     b7c:	4798      	blx	r3
		break;
     b7e:	e7e9      	b.n	b54 <init_Filt+0x44>
		mcp2515_write_mf(MCP_RXF3SIDH, ext, ulData);
     b80:	002a      	movs	r2, r5
     b82:	0021      	movs	r1, r4
     b84:	2010      	movs	r0, #16
     b86:	4b0d      	ldr	r3, [pc, #52]	; (bbc <init_Filt+0xac>)
     b88:	4798      	blx	r3
		break;
     b8a:	e7e3      	b.n	b54 <init_Filt+0x44>
		mcp2515_write_mf(MCP_RXF4SIDH, ext, ulData);
     b8c:	002a      	movs	r2, r5
     b8e:	0021      	movs	r1, r4
     b90:	2014      	movs	r0, #20
     b92:	4b0a      	ldr	r3, [pc, #40]	; (bbc <init_Filt+0xac>)
     b94:	4798      	blx	r3
		break;
     b96:	e7dd      	b.n	b54 <init_Filt+0x44>
		mcp2515_write_mf(MCP_RXF5SIDH, ext, ulData);
     b98:	002a      	movs	r2, r5
     b9a:	0021      	movs	r1, r4
     b9c:	2018      	movs	r0, #24
     b9e:	4b07      	ldr	r3, [pc, #28]	; (bbc <init_Filt+0xac>)
     ba0:	4798      	blx	r3
		break;
     ba2:	e7d7      	b.n	b54 <init_Filt+0x44>
     ba4:	4b02      	ldr	r3, [pc, #8]	; (bb0 <init_Filt+0xa0>)
     ba6:	3b01      	subs	r3, #1
	for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
     ba8:	2b00      	cmp	r3, #0
     baa:	d1fc      	bne.n	ba6 <init_Filt+0x96>
     bac:	e7c1      	b.n	b32 <init_Filt+0x22>
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	000005dc 	.word	0x000005dc
     bb4:	00000659 	.word	0x00000659
     bb8:	0000254c 	.word	0x0000254c
     bbc:	0000078d 	.word	0x0000078d

00000bc0 <setMsg>:

uint8_t setMsg(uint32_t id, uint8_t ext, uint8_t len, uint8_t *pData) {
     bc0:	b510      	push	{r4, lr}
	int i = 0;
	m_nExtFlg = ext;
     bc2:	4c07      	ldr	r4, [pc, #28]	; (be0 <setMsg+0x20>)
     bc4:	7021      	strb	r1, [r4, #0]
	m_nID     = id;
     bc6:	4907      	ldr	r1, [pc, #28]	; (be4 <setMsg+0x24>)
     bc8:	6008      	str	r0, [r1, #0]
	m_nDlc    = len;
     bca:	4907      	ldr	r1, [pc, #28]	; (be8 <setMsg+0x28>)
     bcc:	700a      	strb	r2, [r1, #0]
	for(i = 0; i<MAX_CHAR_IN_MESSAGE; i++)
     bce:	2200      	movs	r2, #0
	{
		m_nDta[i] = *(pData+i);
     bd0:	4806      	ldr	r0, [pc, #24]	; (bec <setMsg+0x2c>)
     bd2:	5c99      	ldrb	r1, [r3, r2]
     bd4:	5481      	strb	r1, [r0, r2]
	for(i = 0; i<MAX_CHAR_IN_MESSAGE; i++)
     bd6:	3201      	adds	r2, #1
     bd8:	2a08      	cmp	r2, #8
     bda:	d1fa      	bne.n	bd2 <setMsg+0x12>
	}
	return MCP2515_OK;
}
     bdc:	2000      	movs	r0, #0
     bde:	bd10      	pop	{r4, pc}
     be0:	20000488 	.word	0x20000488
     be4:	2000047c 	.word	0x2000047c
     be8:	2000048b 	.word	0x2000048b
     bec:	20000480 	.word	0x20000480

00000bf0 <sendMsg>:
	m_nDta[i] = 0x00;

	return MCP2515_OK;
}

uint8_t sendMsg() {
     bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bf2:	b083      	sub	sp, #12
	uint8_t res, res1, txbuf_n;
	uint16_t uiTimeOut = 0;
     bf4:	2400      	movs	r4, #0

	do {
		res = mcp2515_getNextFreeTXBuf(&txbuf_n);    /* info = addr.                 */
     bf6:	4d16      	ldr	r5, [pc, #88]	; (c50 <sendMsg+0x60>)
     bf8:	466b      	mov	r3, sp
     bfa:	1dd8      	adds	r0, r3, #7
     bfc:	47a8      	blx	r5
		uiTimeOut++;
     bfe:	3401      	adds	r4, #1
     c00:	b2a4      	uxth	r4, r4
	} while (res == MCP_ALLTXBUSY && (uiTimeOut < TIMEOUTVALUE));
     c02:	2802      	cmp	r0, #2
     c04:	d103      	bne.n	c0e <sendMsg+0x1e>
     c06:	2c32      	cmp	r4, #50	; 0x32
     c08:	d1f6      	bne.n	bf8 <sendMsg+0x8>

	if(uiTimeOut == TIMEOUTVALUE)
	{
		return CAN_GETTXBFTIMEOUT;                  /* get tx buff time out         */
     c0a:	3004      	adds	r0, #4
     c0c:	e002      	b.n	c14 <sendMsg+0x24>
     c0e:	2006      	movs	r0, #6
	if(uiTimeOut == TIMEOUTVALUE)
     c10:	2c32      	cmp	r4, #50	; 0x32
     c12:	d101      	bne.n	c18 <sendMsg+0x28>
	{
		return CAN_SENDMSGTIMEOUT;
	}
	return CAN_OK;

}
     c14:	b003      	add	sp, #12
     c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mcp2515_write_canMsg(txbuf_n);
     c18:	466b      	mov	r3, sp
     c1a:	1ddc      	adds	r4, r3, #7
     c1c:	79d8      	ldrb	r0, [r3, #7]
     c1e:	4b0d      	ldr	r3, [pc, #52]	; (c54 <sendMsg+0x64>)
     c20:	4798      	blx	r3
	mcp2515_start_transmit(txbuf_n);
     c22:	7820      	ldrb	r0, [r4, #0]
     c24:	4b0c      	ldr	r3, [pc, #48]	; (c58 <sendMsg+0x68>)
     c26:	4798      	blx	r3
	uiTimeOut = 0;
     c28:	2400      	movs	r4, #0
		res1= mcp2515_readRegister(txbuf_n);      /* read send buff ctrl reg 	*/
     c2a:	466b      	mov	r3, sp
     c2c:	1ddd      	adds	r5, r3, #7
     c2e:	4f0b      	ldr	r7, [pc, #44]	; (c5c <sendMsg+0x6c>)
		res1 = res1 & 0x08;
     c30:	2608      	movs	r6, #8
		uiTimeOut++;
     c32:	3401      	adds	r4, #1
     c34:	b2a4      	uxth	r4, r4
		res1= mcp2515_readRegister(txbuf_n);      /* read send buff ctrl reg 	*/
     c36:	7828      	ldrb	r0, [r5, #0]
     c38:	47b8      	blx	r7
		res1 = res1 & 0x08;
     c3a:	4030      	ands	r0, r6
	}while(res1 && (uiTimeOut < TIMEOUTVALUE));
     c3c:	d003      	beq.n	c46 <sendMsg+0x56>
     c3e:	2c32      	cmp	r4, #50	; 0x32
     c40:	d1f7      	bne.n	c32 <sendMsg+0x42>
		return CAN_SENDMSGTIMEOUT;
     c42:	2007      	movs	r0, #7
     c44:	e7e6      	b.n	c14 <sendMsg+0x24>
	if(uiTimeOut == TIMEOUTVALUE)                    /* send msg timeout             */
     c46:	2c32      	cmp	r4, #50	; 0x32
     c48:	d1e4      	bne.n	c14 <sendMsg+0x24>
		return CAN_SENDMSGTIMEOUT;
     c4a:	2007      	movs	r0, #7
     c4c:	e7e2      	b.n	c14 <sendMsg+0x24>
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	00000a3d 	.word	0x00000a3d
     c54:	00000961 	.word	0x00000961
     c58:	00000a29 	.word	0x00000a29
     c5c:	000004d9 	.word	0x000004d9

00000c60 <sendMsgBuf>:

uint8_t sendMsgBuf(uint32_t id, uint8_t ext, uint8_t len, uint8_t *buf) {
     c60:	b510      	push	{r4, lr}
	setMsg(id, ext, len, buf);
     c62:	4c02      	ldr	r4, [pc, #8]	; (c6c <sendMsgBuf+0xc>)
     c64:	47a0      	blx	r4
	return sendMsg();
     c66:	4b02      	ldr	r3, [pc, #8]	; (c70 <sendMsgBuf+0x10>)
     c68:	4798      	blx	r3
}
     c6a:	bd10      	pop	{r4, pc}
     c6c:	00000bc1 	.word	0x00000bc1
     c70:	00000bf1 	.word	0x00000bf1

00000c74 <readMsg>:

uint8_t readMsg() {
     c74:	b510      	push	{r4, lr}
	uint8_t stat, res;

	stat = mcp2515_readStatus();
     c76:	4b0e      	ldr	r3, [pc, #56]	; (cb0 <readMsg+0x3c>)
     c78:	4798      	blx	r3

	if (stat & MCP_STAT_RX0IF)                          /* Msg in Buffer 0              */
     c7a:	07c3      	lsls	r3, r0, #31
     c7c:	d404      	bmi.n	c88 <readMsg+0x14>
		mcp2515_modifyRegister(MCP_CANINTF, MCP_RX1IF, 0);
		res = CAN_OK;
	}
	else
	{
		res = CAN_NOMSG;
     c7e:	2304      	movs	r3, #4
	else if (stat & MCP_STAT_RX1IF)                    /* Msg in Buffer 1              */
     c80:	0782      	lsls	r2, r0, #30
     c82:	d40b      	bmi.n	c9c <readMsg+0x28>
	}
	return res;
}
     c84:	0018      	movs	r0, r3
     c86:	bd10      	pop	{r4, pc}
		mcp2515_read_canMsg(MCP_RXBUF_0);
     c88:	2061      	movs	r0, #97	; 0x61
     c8a:	4b0a      	ldr	r3, [pc, #40]	; (cb4 <readMsg+0x40>)
     c8c:	4798      	blx	r3
		mcp2515_modifyRegister(MCP_CANINTF, MCP_RX0IF, 0);
     c8e:	2200      	movs	r2, #0
     c90:	2101      	movs	r1, #1
     c92:	202c      	movs	r0, #44	; 0x2c
     c94:	4b08      	ldr	r3, [pc, #32]	; (cb8 <readMsg+0x44>)
     c96:	4798      	blx	r3
		res = CAN_OK;
     c98:	2300      	movs	r3, #0
     c9a:	e7f3      	b.n	c84 <readMsg+0x10>
		mcp2515_read_canMsg(MCP_RXBUF_1);
     c9c:	2071      	movs	r0, #113	; 0x71
     c9e:	4b05      	ldr	r3, [pc, #20]	; (cb4 <readMsg+0x40>)
     ca0:	4798      	blx	r3
		mcp2515_modifyRegister(MCP_CANINTF, MCP_RX1IF, 0);
     ca2:	2200      	movs	r2, #0
     ca4:	2102      	movs	r1, #2
     ca6:	202c      	movs	r0, #44	; 0x2c
     ca8:	4b03      	ldr	r3, [pc, #12]	; (cb8 <readMsg+0x44>)
     caa:	4798      	blx	r3
		res = CAN_OK;
     cac:	2300      	movs	r3, #0
     cae:	e7e9      	b.n	c84 <readMsg+0x10>
     cb0:	00000629 	.word	0x00000629
     cb4:	000009c5 	.word	0x000009c5
     cb8:	000005e9 	.word	0x000005e9

00000cbc <readMsgBufID>:
		//*len = 0;
	}
	return rc;
}

uint8_t readMsgBufID(uint32_t *ID, uint8_t *len, uint8_t buf[]) {
     cbc:	b570      	push	{r4, r5, r6, lr}
     cbe:	0006      	movs	r6, r0
     cc0:	000d      	movs	r5, r1
     cc2:	0014      	movs	r4, r2
	uint8_t rc;
	rc = readMsg();
     cc4:	4b0c      	ldr	r3, [pc, #48]	; (cf8 <readMsgBufID+0x3c>)
     cc6:	4798      	blx	r3

	if (rc == CAN_OK) {
     cc8:	2800      	cmp	r0, #0
     cca:	d113      	bne.n	cf4 <readMsgBufID+0x38>
		*len = m_nDlc;
     ccc:	4b0b      	ldr	r3, [pc, #44]	; (cfc <readMsgBufID+0x40>)
     cce:	781a      	ldrb	r2, [r3, #0]
     cd0:	702a      	strb	r2, [r5, #0]
		*ID  = m_nID;
     cd2:	4a0b      	ldr	r2, [pc, #44]	; (d00 <readMsgBufID+0x44>)
     cd4:	6812      	ldr	r2, [r2, #0]
     cd6:	6032      	str	r2, [r6, #0]
		for(int i = 0; i<m_nDlc && i < MAX_CHAR_IN_MESSAGE; i++) {
     cd8:	781b      	ldrb	r3, [r3, #0]
     cda:	2b00      	cmp	r3, #0
     cdc:	dd0a      	ble.n	cf4 <readMsgBufID+0x38>
     cde:	2300      	movs	r3, #0
			buf[i] = m_nDta[i];
     ce0:	4d08      	ldr	r5, [pc, #32]	; (d04 <readMsgBufID+0x48>)
		for(int i = 0; i<m_nDlc && i < MAX_CHAR_IN_MESSAGE; i++) {
     ce2:	4906      	ldr	r1, [pc, #24]	; (cfc <readMsgBufID+0x40>)
			buf[i] = m_nDta[i];
     ce4:	5cea      	ldrb	r2, [r5, r3]
     ce6:	54e2      	strb	r2, [r4, r3]
		for(int i = 0; i<m_nDlc && i < MAX_CHAR_IN_MESSAGE; i++) {
     ce8:	3301      	adds	r3, #1
     cea:	780a      	ldrb	r2, [r1, #0]
     cec:	429a      	cmp	r2, r3
     cee:	dd01      	ble.n	cf4 <readMsgBufID+0x38>
     cf0:	2b08      	cmp	r3, #8
     cf2:	d1f7      	bne.n	ce4 <readMsgBufID+0x28>
		}
		} else {
		//*len = 0;
	}
	return rc;
}
     cf4:	bd70      	pop	{r4, r5, r6, pc}
     cf6:	46c0      	nop			; (mov r8, r8)
     cf8:	00000c75 	.word	0x00000c75
     cfc:	2000048b 	.word	0x2000048b
     d00:	2000047c 	.word	0x2000047c
     d04:	20000480 	.word	0x20000480

00000d08 <canBegin>:

uint8_t isExtendedFrame(void) {
	return m_nExtFlg;
}

uint8_t canBegin(uint8_t slave, uint8_t speedset) {
     d08:	b510      	push	{r4, lr}
	uint8_t res;
	device = slave;
     d0a:	4b04      	ldr	r3, [pc, #16]	; (d1c <canBegin+0x14>)
     d0c:	7018      	strb	r0, [r3, #0]
	res = mcp2515_init(speedset);
     d0e:	0008      	movs	r0, r1
     d10:	4b03      	ldr	r3, [pc, #12]	; (d20 <canBegin+0x18>)
     d12:	4798      	blx	r3
	if (res == MCP2515_OK) 
     d14:	1e43      	subs	r3, r0, #1
     d16:	4198      	sbcs	r0, r3
     d18:	b2c0      	uxtb	r0, r0
		return CAN_OK;
	else 
		return CAN_FAILINIT;
}
     d1a:	bd10      	pop	{r4, pc}
     d1c:	2000048a 	.word	0x2000048a
     d20:	0000086d 	.word	0x0000086d

00000d24 <out>:
    //return 0;
//}


static void out(char c) {
    *bf++ = c;
     d24:	4a02      	ldr	r2, [pc, #8]	; (d30 <out+0xc>)
     d26:	6813      	ldr	r3, [r2, #0]
     d28:	1c59      	adds	r1, r3, #1
     d2a:	6011      	str	r1, [r2, #0]
     d2c:	7018      	strb	r0, [r3, #0]
    }
     d2e:	4770      	bx	lr
     d30:	20000460 	.word	0x20000460

00000d34 <outDgt>:

static void outDgt(char dgt) {
     d34:	b510      	push	{r4, lr}
	out(dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10));
     d36:	2330      	movs	r3, #48	; 0x30
     d38:	2809      	cmp	r0, #9
     d3a:	d905      	bls.n	d48 <outDgt+0x14>
     d3c:	4b06      	ldr	r3, [pc, #24]	; (d58 <outDgt+0x24>)
     d3e:	791a      	ldrb	r2, [r3, #4]
     d40:	2337      	movs	r3, #55	; 0x37
     d42:	2a00      	cmp	r2, #0
     d44:	d100      	bne.n	d48 <outDgt+0x14>
     d46:	3320      	adds	r3, #32
     d48:	1818      	adds	r0, r3, r0
     d4a:	b2c0      	uxtb	r0, r0
     d4c:	4b03      	ldr	r3, [pc, #12]	; (d5c <outDgt+0x28>)
     d4e:	4798      	blx	r3
	zs=1;
     d50:	2201      	movs	r2, #1
     d52:	4b01      	ldr	r3, [pc, #4]	; (d58 <outDgt+0x24>)
     d54:	715a      	strb	r2, [r3, #5]
    }
     d56:	bd10      	pop	{r4, pc}
     d58:	20000460 	.word	0x20000460
     d5c:	00000d25 	.word	0x00000d25

00000d60 <divOut>:
	
static void divOut(unsigned int div) {
     d60:	b510      	push	{r4, lr}
    unsigned char dgt=0;
	num &= 0xffff; // just for testing the code  with 32 bit ints
     d62:	4b0e      	ldr	r3, [pc, #56]	; (d9c <divOut+0x3c>)
     d64:	891a      	ldrh	r2, [r3, #8]
     d66:	609a      	str	r2, [r3, #8]
	while (num>=div) {
     d68:	4282      	cmp	r2, r0
     d6a:	d310      	bcc.n	d8e <divOut+0x2e>
     d6c:	2300      	movs	r3, #0
		num -= div;
     d6e:	1a12      	subs	r2, r2, r0
		dgt++;
     d70:	3301      	adds	r3, #1
     d72:	b2db      	uxtb	r3, r3
	while (num>=div) {
     d74:	4290      	cmp	r0, r2
     d76:	d9fa      	bls.n	d6e <divOut+0xe>
     d78:	4908      	ldr	r1, [pc, #32]	; (d9c <divOut+0x3c>)
     d7a:	608a      	str	r2, [r1, #8]
		}
	if (zs || dgt>0) 
     d7c:	794a      	ldrb	r2, [r1, #5]
     d7e:	2a00      	cmp	r2, #0
     d80:	d101      	bne.n	d86 <divOut+0x26>
     d82:	2b00      	cmp	r3, #0
     d84:	d002      	beq.n	d8c <divOut+0x2c>
		outDgt(dgt);
     d86:	0018      	movs	r0, r3
     d88:	4b05      	ldr	r3, [pc, #20]	; (da0 <divOut+0x40>)
     d8a:	4798      	blx	r3
    }	
     d8c:	bd10      	pop	{r4, pc}
	if (zs || dgt>0) 
     d8e:	4b03      	ldr	r3, [pc, #12]	; (d9c <divOut+0x3c>)
     d90:	795b      	ldrb	r3, [r3, #5]
     d92:	2b00      	cmp	r3, #0
     d94:	d0fa      	beq.n	d8c <divOut+0x2c>
    unsigned char dgt=0;
     d96:	2300      	movs	r3, #0
     d98:	e7f5      	b.n	d86 <divOut+0x26>
     d9a:	46c0      	nop			; (mov r8, r8)
     d9c:	20000460 	.word	0x20000460
     da0:	00000d35 	.word	0x00000d35

00000da4 <myputchar>:
  if(c=='\n')
     da4:	280a      	cmp	r0, #10
     da6:	d008      	beq.n	dba <myputchar+0x16>
  while (!(SERCOM0->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
     da8:	4908      	ldr	r1, [pc, #32]	; (dcc <myputchar+0x28>)
     daa:	2201      	movs	r2, #1
     dac:	7e0b      	ldrb	r3, [r1, #24]
     dae:	4213      	tst	r3, r2
     db0:	d0fc      	beq.n	dac <myputchar+0x8>
  SERCOM0->USART.DATA.reg = s;
     db2:	b280      	uxth	r0, r0
     db4:	4b05      	ldr	r3, [pc, #20]	; (dcc <myputchar+0x28>)
     db6:	8518      	strh	r0, [r3, #40]	; 0x28
}
     db8:	4770      	bx	lr
  while (!(SERCOM0->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
     dba:	4904      	ldr	r1, [pc, #16]	; (dcc <myputchar+0x28>)
     dbc:	2201      	movs	r2, #1
     dbe:	7e0b      	ldrb	r3, [r1, #24]
     dc0:	4213      	tst	r3, r2
     dc2:	d0fc      	beq.n	dbe <myputchar+0x1a>
  SERCOM0->USART.DATA.reg = s;
     dc4:	220d      	movs	r2, #13
     dc6:	4b01      	ldr	r3, [pc, #4]	; (dcc <myputchar+0x28>)
     dc8:	851a      	strh	r2, [r3, #40]	; 0x28
     dca:	e7ed      	b.n	da8 <myputchar+0x4>
     dcc:	42000800 	.word	0x42000800

00000dd0 <tfp_printf>:

void tfp_printf(char *fmt, ...)
	{
     dd0:	b40f      	push	{r0, r1, r2, r3}
     dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
     dd4:	46de      	mov	lr, fp
     dd6:	4657      	mov	r7, sl
     dd8:	464e      	mov	r6, r9
     dda:	4645      	mov	r5, r8
     ddc:	b5e0      	push	{r5, r6, r7, lr}
     dde:	b087      	sub	sp, #28
     de0:	ab10      	add	r3, sp, #64	; 0x40
     de2:	cb80      	ldmia	r3!, {r7}
	va_list va;
	char ch;
	char* p;
	
	va_start(va,fmt);
     de4:	9305      	str	r3, [sp, #20]
				while (ch>='0' && ch<='9') {
					w=(((w<<2)+w)<<1)+ch-'0';
					ch=*fmt++;
					}
				}
			bf=buf;
     de6:	4b73      	ldr	r3, [pc, #460]	; (fb4 <tfp_printf+0x1e4>)
     de8:	330c      	adds	r3, #12
     dea:	9302      	str	r3, [sp, #8]
				case '%' :
					out('%');
				default:
					break;
				}
			*bf=0;
     dec:	4b71      	ldr	r3, [pc, #452]	; (fb4 <tfp_printf+0x1e4>)
     dee:	469a      	mov	sl, r3
			while (*bf++ && w > 0)
				w--;
			while (w-- > 0) 
				myputchar(lz ? '0' : ' ');
			while ((ch= *p++))
				myputchar(ch);
     df0:	4b71      	ldr	r3, [pc, #452]	; (fb8 <tfp_printf+0x1e8>)
     df2:	4698      	mov	r8, r3
			p=bf;
     df4:	4653      	mov	r3, sl
     df6:	330c      	adds	r3, #12
     df8:	9303      	str	r3, [sp, #12]
	while ((ch=*(fmt++))) {
     dfa:	e08c      	b.n	f16 <tfp_printf+0x146>
			ch=*(fmt++);
     dfc:	787b      	ldrb	r3, [r7, #1]
			if (ch=='0') {
     dfe:	2b30      	cmp	r3, #48	; 0x30
     e00:	d029      	beq.n	e56 <tfp_printf+0x86>
			ch=*(fmt++);
     e02:	3702      	adds	r7, #2
			char lz=0;
     e04:	2200      	movs	r2, #0
     e06:	4693      	mov	fp, r2
			char w=0;
     e08:	2400      	movs	r4, #0
			if (ch>='0' && ch<='9') {
     e0a:	001a      	movs	r2, r3
     e0c:	3a30      	subs	r2, #48	; 0x30
     e0e:	2a09      	cmp	r2, #9
     e10:	d80c      	bhi.n	e2c <tfp_printf+0x5c>
					w=(((w<<2)+w)<<1)+ch-'0';
     e12:	00a2      	lsls	r2, r4, #2
     e14:	18a4      	adds	r4, r4, r2
     e16:	0064      	lsls	r4, r4, #1
     e18:	3c30      	subs	r4, #48	; 0x30
     e1a:	18e4      	adds	r4, r4, r3
     e1c:	b2e4      	uxtb	r4, r4
					ch=*fmt++;
     e1e:	1c7a      	adds	r2, r7, #1
     e20:	783b      	ldrb	r3, [r7, #0]
     e22:	0017      	movs	r7, r2
				while (ch>='0' && ch<='9') {
     e24:	0019      	movs	r1, r3
     e26:	3930      	subs	r1, #48	; 0x30
     e28:	2909      	cmp	r1, #9
     e2a:	d9f2      	bls.n	e12 <tfp_printf+0x42>
			bf=buf;
     e2c:	4a61      	ldr	r2, [pc, #388]	; (fb4 <tfp_printf+0x1e4>)
     e2e:	9902      	ldr	r1, [sp, #8]
     e30:	6011      	str	r1, [r2, #0]
			zs=0;
     e32:	2200      	movs	r2, #0
     e34:	495f      	ldr	r1, [pc, #380]	; (fb4 <tfp_printf+0x1e4>)
     e36:	714a      	strb	r2, [r1, #5]
			switch (ch) {
     e38:	2b63      	cmp	r3, #99	; 0x63
     e3a:	d100      	bne.n	e3e <tfp_printf+0x6e>
     e3c:	e07d      	b.n	f3a <tfp_printf+0x16a>
     e3e:	d80f      	bhi.n	e60 <tfp_printf+0x90>
     e40:	2b25      	cmp	r3, #37	; 0x25
     e42:	d100      	bne.n	e46 <tfp_printf+0x76>
     e44:	e086      	b.n	f54 <tfp_printf+0x184>
     e46:	2b58      	cmp	r3, #88	; 0x58
     e48:	d011      	beq.n	e6e <tfp_printf+0x9e>
     e4a:	2b00      	cmp	r3, #0
     e4c:	d100      	bne.n	e50 <tfp_printf+0x80>
     e4e:	e0a6      	b.n	f9e <tfp_printf+0x1ce>
			p=bf;
     e50:	4d58      	ldr	r5, [pc, #352]	; (fb4 <tfp_printf+0x1e4>)
     e52:	350c      	adds	r5, #12
     e54:	e03c      	b.n	ed0 <tfp_printf+0x100>
				ch=*(fmt++);
     e56:	78bb      	ldrb	r3, [r7, #2]
     e58:	3703      	adds	r7, #3
				lz=1;
     e5a:	2201      	movs	r2, #1
     e5c:	4693      	mov	fp, r2
     e5e:	e7d3      	b.n	e08 <tfp_printf+0x38>
			switch (ch) {
     e60:	2b73      	cmp	r3, #115	; 0x73
     e62:	d072      	beq.n	f4a <tfp_printf+0x17a>
     e64:	d91b      	bls.n	e9e <tfp_printf+0xce>
     e66:	2b75      	cmp	r3, #117	; 0x75
     e68:	d01b      	beq.n	ea2 <tfp_printf+0xd2>
     e6a:	2b78      	cmp	r3, #120	; 0x78
     e6c:	d1f0      	bne.n	e50 <tfp_printf+0x80>
				    uc= ch=='X';
     e6e:	4d51      	ldr	r5, [pc, #324]	; (fb4 <tfp_printf+0x1e4>)
     e70:	3b58      	subs	r3, #88	; 0x58
     e72:	4259      	negs	r1, r3
     e74:	4159      	adcs	r1, r3
     e76:	7129      	strb	r1, [r5, #4]
					num=va_arg(va, unsigned int);
     e78:	9b05      	ldr	r3, [sp, #20]
     e7a:	1d1a      	adds	r2, r3, #4
     e7c:	9205      	str	r2, [sp, #20]
     e7e:	681b      	ldr	r3, [r3, #0]
     e80:	60ab      	str	r3, [r5, #8]
					divOut(0x1000);
     e82:	2080      	movs	r0, #128	; 0x80
     e84:	0140      	lsls	r0, r0, #5
     e86:	4e4d      	ldr	r6, [pc, #308]	; (fbc <tfp_printf+0x1ec>)
     e88:	47b0      	blx	r6
					divOut(0x100);
     e8a:	2080      	movs	r0, #128	; 0x80
     e8c:	0040      	lsls	r0, r0, #1
     e8e:	47b0      	blx	r6
					divOut(0x10);
     e90:	2010      	movs	r0, #16
     e92:	47b0      	blx	r6
					outDgt(num);
     e94:	7a28      	ldrb	r0, [r5, #8]
     e96:	4b4a      	ldr	r3, [pc, #296]	; (fc0 <tfp_printf+0x1f0>)
     e98:	4798      	blx	r3
			p=bf;
     e9a:	350c      	adds	r5, #12
					break;
     e9c:	e018      	b.n	ed0 <tfp_printf+0x100>
			switch (ch) {
     e9e:	2b64      	cmp	r3, #100	; 0x64
     ea0:	d1d6      	bne.n	e50 <tfp_printf+0x80>
					num=va_arg(va, unsigned int);
     ea2:	9a05      	ldr	r2, [sp, #20]
     ea4:	1d11      	adds	r1, r2, #4
     ea6:	9105      	str	r1, [sp, #20]
     ea8:	6812      	ldr	r2, [r2, #0]
     eaa:	4942      	ldr	r1, [pc, #264]	; (fb4 <tfp_printf+0x1e4>)
     eac:	608a      	str	r2, [r1, #8]
					if (ch=='d' && (int)num<0) {
     eae:	2b64      	cmp	r3, #100	; 0x64
     eb0:	d03b      	beq.n	f2a <tfp_printf+0x15a>
					divOut(10000);
     eb2:	4844      	ldr	r0, [pc, #272]	; (fc4 <tfp_printf+0x1f4>)
     eb4:	4d41      	ldr	r5, [pc, #260]	; (fbc <tfp_printf+0x1ec>)
     eb6:	47a8      	blx	r5
					divOut(1000);
     eb8:	20fa      	movs	r0, #250	; 0xfa
     eba:	0080      	lsls	r0, r0, #2
     ebc:	47a8      	blx	r5
					divOut(100);
     ebe:	2064      	movs	r0, #100	; 0x64
     ec0:	47a8      	blx	r5
					divOut(10);
     ec2:	200a      	movs	r0, #10
     ec4:	47a8      	blx	r5
					outDgt(num);
     ec6:	4d3b      	ldr	r5, [pc, #236]	; (fb4 <tfp_printf+0x1e4>)
     ec8:	7a28      	ldrb	r0, [r5, #8]
     eca:	4b3d      	ldr	r3, [pc, #244]	; (fc0 <tfp_printf+0x1f0>)
     ecc:	4798      	blx	r3
			p=bf;
     ece:	350c      	adds	r5, #12
			*bf=0;
     ed0:	2300      	movs	r3, #0
     ed2:	4652      	mov	r2, sl
     ed4:	6812      	ldr	r2, [r2, #0]
     ed6:	7013      	strb	r3, [r2, #0]
			while (*bf++ && w > 0)
     ed8:	1c6b      	adds	r3, r5, #1
     eda:	4699      	mov	r9, r3
     edc:	4653      	mov	r3, sl
     ede:	464a      	mov	r2, r9
     ee0:	601a      	str	r2, [r3, #0]
     ee2:	7828      	ldrb	r0, [r5, #0]
     ee4:	2800      	cmp	r0, #0
     ee6:	d055      	beq.n	f94 <tfp_printf+0x1c4>
     ee8:	2c00      	cmp	r4, #0
     eea:	d00c      	beq.n	f06 <tfp_printf+0x136>
     eec:	1caa      	adds	r2, r5, #2
				w--;
     eee:	1e63      	subs	r3, r4, #1
     ef0:	b2db      	uxtb	r3, r3
			while (*bf++ && w > 0)
     ef2:	0011      	movs	r1, r2
     ef4:	1e56      	subs	r6, r2, #1
     ef6:	7836      	ldrb	r6, [r6, #0]
     ef8:	2e00      	cmp	r6, #0
     efa:	d03c      	beq.n	f76 <tfp_printf+0x1a6>
     efc:	3201      	adds	r2, #1
				w--;
     efe:	1e1c      	subs	r4, r3, #0
			while (*bf++ && w > 0)
     f00:	d1f5      	bne.n	eee <tfp_printf+0x11e>
     f02:	4b2c      	ldr	r3, [pc, #176]	; (fb4 <tfp_printf+0x1e4>)
     f04:	6019      	str	r1, [r3, #0]
			while ((ch= *p++))
     f06:	7828      	ldrb	r0, [r5, #0]
     f08:	464d      	mov	r5, r9
				myputchar(ch);
     f0a:	47c0      	blx	r8
     f0c:	3501      	adds	r5, #1
			while ((ch= *p++))
     f0e:	1e6b      	subs	r3, r5, #1
     f10:	7818      	ldrb	r0, [r3, #0]
     f12:	2800      	cmp	r0, #0
     f14:	d1f9      	bne.n	f0a <tfp_printf+0x13a>
	while ((ch=*(fmt++))) {
     f16:	7838      	ldrb	r0, [r7, #0]
     f18:	2800      	cmp	r0, #0
     f1a:	d040      	beq.n	f9e <tfp_printf+0x1ce>
		if (ch!='%') {
     f1c:	2825      	cmp	r0, #37	; 0x25
     f1e:	d100      	bne.n	f22 <tfp_printf+0x152>
     f20:	e76c      	b.n	dfc <tfp_printf+0x2c>
	while ((ch=*(fmt++))) {
     f22:	3701      	adds	r7, #1
			myputchar(ch);
     f24:	4b24      	ldr	r3, [pc, #144]	; (fb8 <tfp_printf+0x1e8>)
     f26:	4798      	blx	r3
     f28:	e7f5      	b.n	f16 <tfp_printf+0x146>
					if (ch=='d' && (int)num<0) {
     f2a:	2a00      	cmp	r2, #0
     f2c:	dac1      	bge.n	eb2 <tfp_printf+0xe2>
						num = -(int)num;
     f2e:	4252      	negs	r2, r2
     f30:	608a      	str	r2, [r1, #8]
						out('-');
     f32:	202d      	movs	r0, #45	; 0x2d
     f34:	4b24      	ldr	r3, [pc, #144]	; (fc8 <tfp_printf+0x1f8>)
     f36:	4798      	blx	r3
     f38:	e7bb      	b.n	eb2 <tfp_printf+0xe2>
					out((char)(va_arg(va, int)));
     f3a:	9b05      	ldr	r3, [sp, #20]
     f3c:	1d1a      	adds	r2, r3, #4
     f3e:	9205      	str	r2, [sp, #20]
     f40:	7818      	ldrb	r0, [r3, #0]
     f42:	4b21      	ldr	r3, [pc, #132]	; (fc8 <tfp_printf+0x1f8>)
     f44:	4798      	blx	r3
			p=bf;
     f46:	9d03      	ldr	r5, [sp, #12]
					break;
     f48:	e7c2      	b.n	ed0 <tfp_printf+0x100>
					p=va_arg(va, char*);
     f4a:	9b05      	ldr	r3, [sp, #20]
     f4c:	1d1a      	adds	r2, r3, #4
     f4e:	9205      	str	r2, [sp, #20]
     f50:	681d      	ldr	r5, [r3, #0]
					break;
     f52:	e7bd      	b.n	ed0 <tfp_printf+0x100>
					out('%');
     f54:	2025      	movs	r0, #37	; 0x25
     f56:	4b1c      	ldr	r3, [pc, #112]	; (fc8 <tfp_printf+0x1f8>)
     f58:	4798      	blx	r3
			p=bf;
     f5a:	4d16      	ldr	r5, [pc, #88]	; (fb4 <tfp_printf+0x1e4>)
     f5c:	350c      	adds	r5, #12
     f5e:	e7b7      	b.n	ed0 <tfp_printf+0x100>
			while (w-- > 0) 
     f60:	001e      	movs	r6, r3
				myputchar(lz ? '0' : ' ');
     f62:	9801      	ldr	r0, [sp, #4]
     f64:	47a0      	blx	r4
			while (w-- > 0) 
     f66:	1e73      	subs	r3, r6, #1
     f68:	b2db      	uxtb	r3, r3
     f6a:	2e00      	cmp	r6, #0
     f6c:	d1f8      	bne.n	f60 <tfp_printf+0x190>
			while ((ch= *p++))
     f6e:	7828      	ldrb	r0, [r5, #0]
     f70:	2800      	cmp	r0, #0
     f72:	d1c9      	bne.n	f08 <tfp_printf+0x138>
     f74:	e7cf      	b.n	f16 <tfp_printf+0x146>
     f76:	4a0f      	ldr	r2, [pc, #60]	; (fb4 <tfp_printf+0x1e4>)
     f78:	6011      	str	r1, [r2, #0]
			while (w-- > 0) 
     f7a:	3c02      	subs	r4, #2
     f7c:	b2e6      	uxtb	r6, r4
     f7e:	2b00      	cmp	r3, #0
     f80:	d0c2      	beq.n	f08 <tfp_printf+0x138>
     f82:	2420      	movs	r4, #32
     f84:	465b      	mov	r3, fp
     f86:	2b00      	cmp	r3, #0
     f88:	d000      	beq.n	f8c <tfp_printf+0x1bc>
     f8a:	2430      	movs	r4, #48	; 0x30
     f8c:	b2e3      	uxtb	r3, r4
     f8e:	9301      	str	r3, [sp, #4]
				myputchar(lz ? '0' : ' ');
     f90:	4c09      	ldr	r4, [pc, #36]	; (fb8 <tfp_printf+0x1e8>)
     f92:	e7e6      	b.n	f62 <tfp_printf+0x192>
			while (w-- > 0) 
     f94:	1e66      	subs	r6, r4, #1
     f96:	b2f6      	uxtb	r6, r6
     f98:	2c00      	cmp	r4, #0
     f9a:	d1f2      	bne.n	f82 <tfp_printf+0x1b2>
     f9c:	e7bb      	b.n	f16 <tfp_printf+0x146>
			}
		}
	abort:;
	va_end(va);
	}
     f9e:	b007      	add	sp, #28
     fa0:	bc3c      	pop	{r2, r3, r4, r5}
     fa2:	4690      	mov	r8, r2
     fa4:	4699      	mov	r9, r3
     fa6:	46a2      	mov	sl, r4
     fa8:	46ab      	mov	fp, r5
     faa:	bcf0      	pop	{r4, r5, r6, r7}
     fac:	bc08      	pop	{r3}
     fae:	b004      	add	sp, #16
     fb0:	4718      	bx	r3
     fb2:	46c0      	nop			; (mov r8, r8)
     fb4:	20000460 	.word	0x20000460
     fb8:	00000da5 	.word	0x00000da5
     fbc:	00000d61 	.word	0x00000d61
     fc0:	00000d35 	.word	0x00000d35
     fc4:	00002710 	.word	0x00002710
     fc8:	00000d25 	.word	0x00000d25

00000fcc <spiInit>:


void spiInit(void) {
	// Configure the slave pin as an output.
	// Clear the PMUXEN bit.
	PORT->Group[0].PINCFG[PIN_PA18].reg = 0;
     fcc:	4b19      	ldr	r3, [pc, #100]	; (1034 <spiInit+0x68>)
     fce:	2100      	movs	r1, #0
     fd0:	2252      	movs	r2, #82	; 0x52
     fd2:	5499      	strb	r1, [r3, r2]
	// Declare it as output.
	PORT->Group[0].DIRSET.reg = PORT_PA18;
     fd4:	2280      	movs	r2, #128	; 0x80
     fd6:	02d2      	lsls	r2, r2, #11
     fd8:	609a      	str	r2, [r3, #8]
	
	SYSCTRL->OSC8M.bit.PRESC = 0; // Disable preescaler.
     fda:	4a17      	ldr	r2, [pc, #92]	; (1038 <spiInit+0x6c>)
     fdc:	6a13      	ldr	r3, [r2, #32]
     fde:	4917      	ldr	r1, [pc, #92]	; (103c <spiInit+0x70>)
     fe0:	400b      	ands	r3, r1
     fe2:	6213      	str	r3, [r2, #32]
	
	PM->APBCMASK.bit.SERCOM1_ = 1; // Enable the clock for SERCOM1 peripheral.
     fe4:	4a16      	ldr	r2, [pc, #88]	; (1040 <spiInit+0x74>)
     fe6:	6a13      	ldr	r3, [r2, #32]
     fe8:	2108      	movs	r1, #8
     fea:	430b      	orrs	r3, r1
     fec:	6213      	str	r3, [r2, #32]
	
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_SERCOM1_CORE;
     fee:	4a15      	ldr	r2, [pc, #84]	; (1044 <spiInit+0x78>)
     ff0:	4b15      	ldr	r3, [pc, #84]	; (1048 <spiInit+0x7c>)
     ff2:	805a      	strh	r2, [r3, #2]
	while( GCLK->STATUS.bit.SYNCBUSY );
     ff4:	001a      	movs	r2, r3
     ff6:	7853      	ldrb	r3, [r2, #1]
     ff8:	09db      	lsrs	r3, r3, #7
     ffa:	d1fc      	bne.n	ff6 <spiInit+0x2a>
		.bit.FORM = 0, // SPI frame
		.bit.DIPO = 3, // MISO on PAD[3]
		.bit.DOPO = 0, // MOSI on PAD[0], SCK on PAD[1], SS_ on PAD[2]
		.bit.MODE = 3  // Master Mode
	};
	SERCOM1->SPI.CTRLA.reg = ctrla.reg;
     ffc:	4a13      	ldr	r2, [pc, #76]	; (104c <spiInit+0x80>)
     ffe:	4b14      	ldr	r3, [pc, #80]	; (1050 <spiInit+0x84>)
    1000:	6811      	ldr	r1, [r2, #0]
    1002:	6019      	str	r1, [r3, #0]
	
	const SERCOM_SPI_CTRLB_Type ctrlb = {
    1004:	2180      	movs	r1, #128	; 0x80
    1006:	0289      	lsls	r1, r1, #10
		.bit.RXEN = 1,   // RX enabled
		.bit.MSSEN = 0,  // Manual SC
		.bit.CHSIZE = 0  // 8-bit
	};
	SERCOM1->SPI.CTRLB.reg = ctrlb.reg;
    1008:	6059      	str	r1, [r3, #4]
	
	//Formula to configure the desired baudrate
	uint32_t br = ( double )( 8000000 / ( 2 * BAUDRATE ) ) - 1 ;
	SERCOM1->SPI.BAUD.reg = SERCOM_SPI_BAUD_BAUD( ( uint8_t )br );
    100a:	219f      	movs	r1, #159	; 0x9f
    100c:	7319      	strb	r1, [r3, #12]
		.bit.PMUX = MUX_PA16C_SERCOM1_PAD0 | MUX_PA17C_SERCOM1_PAD1 | MUX_PA19C_SERCOM1_PAD3,
		.bit.PMUXEN = 1,
		.bit.HWSEL = 1,
		.bit.PINMASK = ( uint16_t )( ( PORT_PA16 | PORT_PA17 | PORT_PA19 ) >> 16 )
	};
	PORT->Group[0].WRCONFIG.reg = wrconfig.reg;
    100e:	6851      	ldr	r1, [r2, #4]
    1010:	4a08      	ldr	r2, [pc, #32]	; (1034 <spiInit+0x68>)
    1012:	6291      	str	r1, [r2, #40]	; 0x28

	//SS/CS (Slave Select/Chip Select) PIN 18 configuration
	REG_PORT_DIRSET0 = PORT_PA18;
    1014:	2280      	movs	r2, #128	; 0x80
    1016:	02d2      	lsls	r2, r2, #11
    1018:	490e      	ldr	r1, [pc, #56]	; (1054 <spiInit+0x88>)
    101a:	600a      	str	r2, [r1, #0]
	REG_PORT_OUTSET0 = PORT_PA18;
    101c:	490e      	ldr	r1, [pc, #56]	; (1058 <spiInit+0x8c>)
    101e:	600a      	str	r2, [r1, #0]
		
	//enable the SPI
	SERCOM1->SPI.CTRLA.bit.ENABLE = 1;
    1020:	681a      	ldr	r2, [r3, #0]
    1022:	2102      	movs	r1, #2
    1024:	430a      	orrs	r2, r1
    1026:	601a      	str	r2, [r3, #0]
	while( SERCOM1->SPI.SYNCBUSY.bit.ENABLE );
    1028:	001a      	movs	r2, r3
    102a:	69d3      	ldr	r3, [r2, #28]
    102c:	079b      	lsls	r3, r3, #30
    102e:	d4fc      	bmi.n	102a <spiInit+0x5e>
}
    1030:	4770      	bx	lr
    1032:	46c0      	nop			; (mov r8, r8)
    1034:	41004400 	.word	0x41004400
    1038:	40000800 	.word	0x40000800
    103c:	fffffcff 	.word	0xfffffcff
    1040:	40000400 	.word	0x40000400
    1044:	00004015 	.word	0x00004015
    1048:	40000c00 	.word	0x40000c00
    104c:	00002564 	.word	0x00002564
    1050:	42000c00 	.word	0x42000c00
    1054:	41004408 	.word	0x41004408
    1058:	41004418 	.word	0x41004418

0000105c <spiSend>:

uint8_t spiSend( uint8_t data ) {
	uint8_t temp;
	while( !SERCOM1->SPI.INTFLAG.bit.DRE ); //wait until buffer is empty
    105c:	4a08      	ldr	r2, [pc, #32]	; (1080 <spiSend+0x24>)
    105e:	7e13      	ldrb	r3, [r2, #24]
    1060:	07db      	lsls	r3, r3, #31
    1062:	d5fc      	bpl.n	105e <spiSend+0x2>
	SERCOM1->SPI.DATA.reg = SERCOM_SPI_DATA_DATA( data ); //transmit data
    1064:	4b06      	ldr	r3, [pc, #24]	; (1080 <spiSend+0x24>)
    1066:	6298      	str	r0, [r3, #40]	; 0x28
	while( !SERCOM1->SPI.INTFLAG.bit.RXC ); //wait until a data is received
    1068:	001a      	movs	r2, r3
    106a:	7e13      	ldrb	r3, [r2, #24]
    106c:	075b      	lsls	r3, r3, #29
    106e:	d5fc      	bpl.n	106a <spiSend+0xe>
	temp = SERCOM1->SPI.DATA.reg; //read data
    1070:	4b03      	ldr	r3, [pc, #12]	; (1080 <spiSend+0x24>)
    1072:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1074:	b2c0      	uxtb	r0, r0
	while( !SERCOM1->SPI.INTFLAG.bit.TXC ); //wait until there is no data to transmit
    1076:	001a      	movs	r2, r3
    1078:	7e13      	ldrb	r3, [r2, #24]
    107a:	079b      	lsls	r3, r3, #30
    107c:	d5fc      	bpl.n	1078 <spiSend+0x1c>
	return temp;
}
    107e:	4770      	bx	lr
    1080:	42000c00 	.word	0x42000c00

00001084 <spiSS>:

uint8_t spiSS(uint8_t device) {
	switch (device) {
    1084:	2800      	cmp	r0, #0
    1086:	d103      	bne.n	1090 <spiSS+0xc>
		case SLAVE_CAN_0:
			REG_PORT_OUTCLR0 = PORT_PA18;
    1088:	2280      	movs	r2, #128	; 0x80
    108a:	02d2      	lsls	r2, r2, #11
    108c:	4b01      	ldr	r3, [pc, #4]	; (1094 <spiSS+0x10>)
    108e:	601a      	str	r2, [r3, #0]
			break;
		default:
			break;	
	}
	return 1;
}
    1090:	2001      	movs	r0, #1
    1092:	4770      	bx	lr
    1094:	41004414 	.word	0x41004414

00001098 <spiSR>:

uint8_t spiSR(uint8_t device) {
	switch (device) {
    1098:	2800      	cmp	r0, #0
    109a:	d103      	bne.n	10a4 <spiSR+0xc>
		case SLAVE_CAN_0:
			REG_PORT_OUTSET0 = PORT_PA18;
    109c:	2280      	movs	r2, #128	; 0x80
    109e:	02d2      	lsls	r2, r2, #11
    10a0:	4b01      	ldr	r3, [pc, #4]	; (10a8 <spiSR+0x10>)
    10a2:	601a      	str	r2, [r3, #0]
			break;
		default:
			break;
	}
	return 1;
}
    10a4:	2001      	movs	r0, #1
    10a6:	4770      	bx	lr
    10a8:	41004418 	.word	0x41004418

000010ac <initUART>:
/* Replace with your library code */
void initUART(void) {

	/* APBCMASK */
   /* SERCOM 0 enable*/
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;
    10ac:	4a1f      	ldr	r2, [pc, #124]	; (112c <initUART+0x80>)
    10ae:	6a13      	ldr	r3, [r2, #32]
    10b0:	2104      	movs	r1, #4
    10b2:	430b      	orrs	r3, r1
    10b4:	6213      	str	r3, [r2, #32]

	/*GCLK configuration for sercom0 module: using generic clock generator 0, ID for sercom0, enable GCLK*/
    GCLK->GENCTRL.reg=GCLK_GENCTRL_SRC_OSC8M|GCLK_GENCTRL_ID(0)|
    10b6:	4b1e      	ldr	r3, [pc, #120]	; (1130 <initUART+0x84>)
    10b8:	2283      	movs	r2, #131	; 0x83
    10ba:	0252      	lsls	r2, r2, #9
    10bc:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_GENEN;

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
    10be:	4a1d      	ldr	r2, [pc, #116]	; (1134 <initUART+0x88>)
    10c0:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);

  /*CONFIGURAR PA10 y PA11 como salidas tipo C (SERCOM 0) */
  PORT->Group[0].PINCFG[PIN_PA10].reg= PA10_TX;
    10c2:	4b1d      	ldr	r3, [pc, #116]	; (1138 <initUART+0x8c>)
    10c4:	3903      	subs	r1, #3
    10c6:	224a      	movs	r2, #74	; 0x4a
    10c8:	5499      	strb	r1, [r3, r2]
  PORT->Group[0].PINCFG[PIN_PA11].reg= PA11_RX;
    10ca:	3106      	adds	r1, #6
    10cc:	3201      	adds	r2, #1
    10ce:	5499      	strb	r1, [r3, r2]
  PORT->Group[0].PMUX[5].bit.PMUXE=Type_C;
    10d0:	312e      	adds	r1, #46	; 0x2e
    10d2:	5c5a      	ldrb	r2, [r3, r1]
    10d4:	200f      	movs	r0, #15
    10d6:	4382      	bics	r2, r0
    10d8:	2002      	movs	r0, #2
    10da:	4302      	orrs	r2, r0
    10dc:	545a      	strb	r2, [r3, r1]
  PORT->Group[0].PMUX[5].bit.PMUXO=Type_C;
    10de:	5c58      	ldrb	r0, [r3, r1]
    10e0:	220f      	movs	r2, #15
    10e2:	4002      	ands	r2, r0
    10e4:	2020      	movs	r0, #32
    10e6:	4302      	orrs	r2, r0
    10e8:	545a      	strb	r2, [r3, r1]
	
	//desahibilitar UART para inicializacion
	SERCOM0->USART.CTRLA.bit.ENABLE=0;
    10ea:	4b14      	ldr	r3, [pc, #80]	; (113c <initUART+0x90>)
    10ec:	681a      	ldr	r2, [r3, #0]
    10ee:	3933      	subs	r1, #51	; 0x33
    10f0:	438a      	bics	r2, r1
    10f2:	601a      	str	r2, [r3, #0]
   
   DEFINES:
   1)SERCOM_USART_CTRLA_DORD (_U(0x1) << SERCOM_USART_CTRLA_DORD_Pos)
   2)SERCOM_USART_CTRLA_MODE_USART_INT_CLK (0x1 << 2)
   3)SERCOM_USART_CTRLA_RXPO(value) (SERCOM_USART_CTRLA_RXPO_Msk & ((value) << SERCOM_USART_CTRLA_RXPO_Pos) */
	SERCOM0->USART.CTRLA.reg =
    10f4:	4a12      	ldr	r2, [pc, #72]	; (1140 <initUART+0x94>)
    10f6:	601a      	str	r2, [r3, #0]
	SERCOM_USART_CTRLA_DORD | SERCOM_USART_CTRLA_MODE_USART_INT_CLK |
	SERCOM_USART_CTRLA_RXPO(3) | SERCOM_USART_CTRLA_TXPO(1);
	
	while(SERCOM0->USART.SYNCBUSY.reg){} // waiting loading
    10f8:	001a      	movs	r2, r3
    10fa:	69d3      	ldr	r3, [r2, #28]
    10fc:	2b00      	cmp	r3, #0
    10fe:	d1fc      	bne.n	10fa <initUART+0x4e>
	uint64_t br = (uint64_t)65536 * (8000000 - 16 * 9600) / 8000000;

	SERCOM0->USART.BAUD.reg = (uint16_t)br;
    1100:	4a10      	ldr	r2, [pc, #64]	; (1144 <initUART+0x98>)
    1102:	4b0e      	ldr	r3, [pc, #56]	; (113c <initUART+0x90>)
    1104:	819a      	strh	r2, [r3, #12]
	
	while(SERCOM0->USART.SYNCBUSY.reg){} // waiting loading
    1106:	001a      	movs	r2, r3
    1108:	69d3      	ldr	r3, [r2, #28]
    110a:	2b00      	cmp	r3, #0
    110c:	d1fc      	bne.n	1108 <initUART+0x5c>
	SERCOM0->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_CHSIZE(0/*8 bits*/);
    110e:	22c0      	movs	r2, #192	; 0xc0
    1110:	0292      	lsls	r2, r2, #10
    1112:	4b0a      	ldr	r3, [pc, #40]	; (113c <initUART+0x90>)
    1114:	605a      	str	r2, [r3, #4]
    while(SERCOM0->USART.SYNCBUSY.reg){} // waiting loading
    1116:	001a      	movs	r2, r3
    1118:	69d3      	ldr	r3, [r2, #28]
    111a:	2b00      	cmp	r3, #0
    111c:	d1fc      	bne.n	1118 <initUART+0x6c>
	SERCOM0->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    111e:	4a07      	ldr	r2, [pc, #28]	; (113c <initUART+0x90>)
    1120:	6813      	ldr	r3, [r2, #0]
    1122:	2102      	movs	r1, #2
    1124:	430b      	orrs	r3, r1
    1126:	6013      	str	r3, [r2, #0]
}
    1128:	4770      	bx	lr
    112a:	46c0      	nop			; (mov r8, r8)
    112c:	40000400 	.word	0x40000400
    1130:	40000c00 	.word	0x40000c00
    1134:	00004014 	.word	0x00004014
    1138:	41004400 	.word	0x41004400
    113c:	42000800 	.word	0x42000800
    1140:	40310004 	.word	0x40310004
    1144:	fffffb15 	.word	0xfffffb15

00001148 <uart_read_byte>:

uint8_t uart_read_byte(){

	while(!SERCOM0->USART.INTFLAG.bit.RXC);
    1148:	4a03      	ldr	r2, [pc, #12]	; (1158 <uart_read_byte+0x10>)
    114a:	7e13      	ldrb	r3, [r2, #24]
    114c:	075b      	lsls	r3, r3, #29
    114e:	d5fc      	bpl.n	114a <uart_read_byte+0x2>
	return((uint8_t)SERCOM0->USART.DATA.reg);
    1150:	4b01      	ldr	r3, [pc, #4]	; (1158 <uart_read_byte+0x10>)
    1152:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1154:	b2c0      	uxtb	r0, r0

}
    1156:	4770      	bx	lr
    1158:	42000800 	.word	0x42000800

0000115c <__udivsi3>:
    115c:	2200      	movs	r2, #0
    115e:	0843      	lsrs	r3, r0, #1
    1160:	428b      	cmp	r3, r1
    1162:	d374      	bcc.n	124e <__udivsi3+0xf2>
    1164:	0903      	lsrs	r3, r0, #4
    1166:	428b      	cmp	r3, r1
    1168:	d35f      	bcc.n	122a <__udivsi3+0xce>
    116a:	0a03      	lsrs	r3, r0, #8
    116c:	428b      	cmp	r3, r1
    116e:	d344      	bcc.n	11fa <__udivsi3+0x9e>
    1170:	0b03      	lsrs	r3, r0, #12
    1172:	428b      	cmp	r3, r1
    1174:	d328      	bcc.n	11c8 <__udivsi3+0x6c>
    1176:	0c03      	lsrs	r3, r0, #16
    1178:	428b      	cmp	r3, r1
    117a:	d30d      	bcc.n	1198 <__udivsi3+0x3c>
    117c:	22ff      	movs	r2, #255	; 0xff
    117e:	0209      	lsls	r1, r1, #8
    1180:	ba12      	rev	r2, r2
    1182:	0c03      	lsrs	r3, r0, #16
    1184:	428b      	cmp	r3, r1
    1186:	d302      	bcc.n	118e <__udivsi3+0x32>
    1188:	1212      	asrs	r2, r2, #8
    118a:	0209      	lsls	r1, r1, #8
    118c:	d065      	beq.n	125a <__udivsi3+0xfe>
    118e:	0b03      	lsrs	r3, r0, #12
    1190:	428b      	cmp	r3, r1
    1192:	d319      	bcc.n	11c8 <__udivsi3+0x6c>
    1194:	e000      	b.n	1198 <__udivsi3+0x3c>
    1196:	0a09      	lsrs	r1, r1, #8
    1198:	0bc3      	lsrs	r3, r0, #15
    119a:	428b      	cmp	r3, r1
    119c:	d301      	bcc.n	11a2 <__udivsi3+0x46>
    119e:	03cb      	lsls	r3, r1, #15
    11a0:	1ac0      	subs	r0, r0, r3
    11a2:	4152      	adcs	r2, r2
    11a4:	0b83      	lsrs	r3, r0, #14
    11a6:	428b      	cmp	r3, r1
    11a8:	d301      	bcc.n	11ae <__udivsi3+0x52>
    11aa:	038b      	lsls	r3, r1, #14
    11ac:	1ac0      	subs	r0, r0, r3
    11ae:	4152      	adcs	r2, r2
    11b0:	0b43      	lsrs	r3, r0, #13
    11b2:	428b      	cmp	r3, r1
    11b4:	d301      	bcc.n	11ba <__udivsi3+0x5e>
    11b6:	034b      	lsls	r3, r1, #13
    11b8:	1ac0      	subs	r0, r0, r3
    11ba:	4152      	adcs	r2, r2
    11bc:	0b03      	lsrs	r3, r0, #12
    11be:	428b      	cmp	r3, r1
    11c0:	d301      	bcc.n	11c6 <__udivsi3+0x6a>
    11c2:	030b      	lsls	r3, r1, #12
    11c4:	1ac0      	subs	r0, r0, r3
    11c6:	4152      	adcs	r2, r2
    11c8:	0ac3      	lsrs	r3, r0, #11
    11ca:	428b      	cmp	r3, r1
    11cc:	d301      	bcc.n	11d2 <__udivsi3+0x76>
    11ce:	02cb      	lsls	r3, r1, #11
    11d0:	1ac0      	subs	r0, r0, r3
    11d2:	4152      	adcs	r2, r2
    11d4:	0a83      	lsrs	r3, r0, #10
    11d6:	428b      	cmp	r3, r1
    11d8:	d301      	bcc.n	11de <__udivsi3+0x82>
    11da:	028b      	lsls	r3, r1, #10
    11dc:	1ac0      	subs	r0, r0, r3
    11de:	4152      	adcs	r2, r2
    11e0:	0a43      	lsrs	r3, r0, #9
    11e2:	428b      	cmp	r3, r1
    11e4:	d301      	bcc.n	11ea <__udivsi3+0x8e>
    11e6:	024b      	lsls	r3, r1, #9
    11e8:	1ac0      	subs	r0, r0, r3
    11ea:	4152      	adcs	r2, r2
    11ec:	0a03      	lsrs	r3, r0, #8
    11ee:	428b      	cmp	r3, r1
    11f0:	d301      	bcc.n	11f6 <__udivsi3+0x9a>
    11f2:	020b      	lsls	r3, r1, #8
    11f4:	1ac0      	subs	r0, r0, r3
    11f6:	4152      	adcs	r2, r2
    11f8:	d2cd      	bcs.n	1196 <__udivsi3+0x3a>
    11fa:	09c3      	lsrs	r3, r0, #7
    11fc:	428b      	cmp	r3, r1
    11fe:	d301      	bcc.n	1204 <__udivsi3+0xa8>
    1200:	01cb      	lsls	r3, r1, #7
    1202:	1ac0      	subs	r0, r0, r3
    1204:	4152      	adcs	r2, r2
    1206:	0983      	lsrs	r3, r0, #6
    1208:	428b      	cmp	r3, r1
    120a:	d301      	bcc.n	1210 <__udivsi3+0xb4>
    120c:	018b      	lsls	r3, r1, #6
    120e:	1ac0      	subs	r0, r0, r3
    1210:	4152      	adcs	r2, r2
    1212:	0943      	lsrs	r3, r0, #5
    1214:	428b      	cmp	r3, r1
    1216:	d301      	bcc.n	121c <__udivsi3+0xc0>
    1218:	014b      	lsls	r3, r1, #5
    121a:	1ac0      	subs	r0, r0, r3
    121c:	4152      	adcs	r2, r2
    121e:	0903      	lsrs	r3, r0, #4
    1220:	428b      	cmp	r3, r1
    1222:	d301      	bcc.n	1228 <__udivsi3+0xcc>
    1224:	010b      	lsls	r3, r1, #4
    1226:	1ac0      	subs	r0, r0, r3
    1228:	4152      	adcs	r2, r2
    122a:	08c3      	lsrs	r3, r0, #3
    122c:	428b      	cmp	r3, r1
    122e:	d301      	bcc.n	1234 <__udivsi3+0xd8>
    1230:	00cb      	lsls	r3, r1, #3
    1232:	1ac0      	subs	r0, r0, r3
    1234:	4152      	adcs	r2, r2
    1236:	0883      	lsrs	r3, r0, #2
    1238:	428b      	cmp	r3, r1
    123a:	d301      	bcc.n	1240 <__udivsi3+0xe4>
    123c:	008b      	lsls	r3, r1, #2
    123e:	1ac0      	subs	r0, r0, r3
    1240:	4152      	adcs	r2, r2
    1242:	0843      	lsrs	r3, r0, #1
    1244:	428b      	cmp	r3, r1
    1246:	d301      	bcc.n	124c <__udivsi3+0xf0>
    1248:	004b      	lsls	r3, r1, #1
    124a:	1ac0      	subs	r0, r0, r3
    124c:	4152      	adcs	r2, r2
    124e:	1a41      	subs	r1, r0, r1
    1250:	d200      	bcs.n	1254 <__udivsi3+0xf8>
    1252:	4601      	mov	r1, r0
    1254:	4152      	adcs	r2, r2
    1256:	4610      	mov	r0, r2
    1258:	4770      	bx	lr
    125a:	e7ff      	b.n	125c <__udivsi3+0x100>
    125c:	b501      	push	{r0, lr}
    125e:	2000      	movs	r0, #0
    1260:	f000 f806 	bl	1270 <__aeabi_idiv0>
    1264:	bd02      	pop	{r1, pc}
    1266:	46c0      	nop			; (mov r8, r8)

00001268 <__aeabi_uidivmod>:
    1268:	2900      	cmp	r1, #0
    126a:	d0f7      	beq.n	125c <__udivsi3+0x100>
    126c:	e776      	b.n	115c <__udivsi3>
    126e:	4770      	bx	lr

00001270 <__aeabi_idiv0>:
    1270:	4770      	bx	lr
    1272:	46c0      	nop			; (mov r8, r8)

00001274 <__aeabi_d2uiz>:
    1274:	b570      	push	{r4, r5, r6, lr}
    1276:	2200      	movs	r2, #0
    1278:	4b0c      	ldr	r3, [pc, #48]	; (12ac <__aeabi_d2uiz+0x38>)
    127a:	0004      	movs	r4, r0
    127c:	000d      	movs	r5, r1
    127e:	f000 ff0b 	bl	2098 <__aeabi_dcmpge>
    1282:	2800      	cmp	r0, #0
    1284:	d104      	bne.n	1290 <__aeabi_d2uiz+0x1c>
    1286:	0020      	movs	r0, r4
    1288:	0029      	movs	r1, r5
    128a:	f000 fe5b 	bl	1f44 <__aeabi_d2iz>
    128e:	bd70      	pop	{r4, r5, r6, pc}
    1290:	4b06      	ldr	r3, [pc, #24]	; (12ac <__aeabi_d2uiz+0x38>)
    1292:	2200      	movs	r2, #0
    1294:	0020      	movs	r0, r4
    1296:	0029      	movs	r1, r5
    1298:	f000 fb3e 	bl	1918 <__aeabi_dsub>
    129c:	f000 fe52 	bl	1f44 <__aeabi_d2iz>
    12a0:	2380      	movs	r3, #128	; 0x80
    12a2:	061b      	lsls	r3, r3, #24
    12a4:	469c      	mov	ip, r3
    12a6:	4460      	add	r0, ip
    12a8:	e7f1      	b.n	128e <__aeabi_d2uiz+0x1a>
    12aa:	46c0      	nop			; (mov r8, r8)
    12ac:	41e00000 	.word	0x41e00000

000012b0 <__aeabi_ddiv>:
    12b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    12b2:	4657      	mov	r7, sl
    12b4:	4645      	mov	r5, r8
    12b6:	46de      	mov	lr, fp
    12b8:	464e      	mov	r6, r9
    12ba:	b5e0      	push	{r5, r6, r7, lr}
    12bc:	004c      	lsls	r4, r1, #1
    12be:	030e      	lsls	r6, r1, #12
    12c0:	b087      	sub	sp, #28
    12c2:	4683      	mov	fp, r0
    12c4:	4692      	mov	sl, r2
    12c6:	001d      	movs	r5, r3
    12c8:	4680      	mov	r8, r0
    12ca:	0b36      	lsrs	r6, r6, #12
    12cc:	0d64      	lsrs	r4, r4, #21
    12ce:	0fcf      	lsrs	r7, r1, #31
    12d0:	2c00      	cmp	r4, #0
    12d2:	d04f      	beq.n	1374 <__aeabi_ddiv+0xc4>
    12d4:	4b6f      	ldr	r3, [pc, #444]	; (1494 <__aeabi_ddiv+0x1e4>)
    12d6:	429c      	cmp	r4, r3
    12d8:	d035      	beq.n	1346 <__aeabi_ddiv+0x96>
    12da:	2380      	movs	r3, #128	; 0x80
    12dc:	0f42      	lsrs	r2, r0, #29
    12de:	041b      	lsls	r3, r3, #16
    12e0:	00f6      	lsls	r6, r6, #3
    12e2:	4313      	orrs	r3, r2
    12e4:	4333      	orrs	r3, r6
    12e6:	4699      	mov	r9, r3
    12e8:	00c3      	lsls	r3, r0, #3
    12ea:	4698      	mov	r8, r3
    12ec:	4b6a      	ldr	r3, [pc, #424]	; (1498 <__aeabi_ddiv+0x1e8>)
    12ee:	2600      	movs	r6, #0
    12f0:	469c      	mov	ip, r3
    12f2:	2300      	movs	r3, #0
    12f4:	4464      	add	r4, ip
    12f6:	9303      	str	r3, [sp, #12]
    12f8:	032b      	lsls	r3, r5, #12
    12fa:	0b1b      	lsrs	r3, r3, #12
    12fc:	469b      	mov	fp, r3
    12fe:	006b      	lsls	r3, r5, #1
    1300:	0fed      	lsrs	r5, r5, #31
    1302:	4650      	mov	r0, sl
    1304:	0d5b      	lsrs	r3, r3, #21
    1306:	9501      	str	r5, [sp, #4]
    1308:	d05e      	beq.n	13c8 <__aeabi_ddiv+0x118>
    130a:	4a62      	ldr	r2, [pc, #392]	; (1494 <__aeabi_ddiv+0x1e4>)
    130c:	4293      	cmp	r3, r2
    130e:	d053      	beq.n	13b8 <__aeabi_ddiv+0x108>
    1310:	465a      	mov	r2, fp
    1312:	00d1      	lsls	r1, r2, #3
    1314:	2280      	movs	r2, #128	; 0x80
    1316:	0f40      	lsrs	r0, r0, #29
    1318:	0412      	lsls	r2, r2, #16
    131a:	4302      	orrs	r2, r0
    131c:	430a      	orrs	r2, r1
    131e:	4693      	mov	fp, r2
    1320:	4652      	mov	r2, sl
    1322:	00d1      	lsls	r1, r2, #3
    1324:	4a5c      	ldr	r2, [pc, #368]	; (1498 <__aeabi_ddiv+0x1e8>)
    1326:	4694      	mov	ip, r2
    1328:	2200      	movs	r2, #0
    132a:	4463      	add	r3, ip
    132c:	0038      	movs	r0, r7
    132e:	4068      	eors	r0, r5
    1330:	4684      	mov	ip, r0
    1332:	9002      	str	r0, [sp, #8]
    1334:	1ae4      	subs	r4, r4, r3
    1336:	4316      	orrs	r6, r2
    1338:	2e0f      	cmp	r6, #15
    133a:	d900      	bls.n	133e <__aeabi_ddiv+0x8e>
    133c:	e0b4      	b.n	14a8 <__aeabi_ddiv+0x1f8>
    133e:	4b57      	ldr	r3, [pc, #348]	; (149c <__aeabi_ddiv+0x1ec>)
    1340:	00b6      	lsls	r6, r6, #2
    1342:	599b      	ldr	r3, [r3, r6]
    1344:	469f      	mov	pc, r3
    1346:	0003      	movs	r3, r0
    1348:	4333      	orrs	r3, r6
    134a:	4699      	mov	r9, r3
    134c:	d16c      	bne.n	1428 <__aeabi_ddiv+0x178>
    134e:	2300      	movs	r3, #0
    1350:	4698      	mov	r8, r3
    1352:	3302      	adds	r3, #2
    1354:	2608      	movs	r6, #8
    1356:	9303      	str	r3, [sp, #12]
    1358:	e7ce      	b.n	12f8 <__aeabi_ddiv+0x48>
    135a:	46cb      	mov	fp, r9
    135c:	4641      	mov	r1, r8
    135e:	9a03      	ldr	r2, [sp, #12]
    1360:	9701      	str	r7, [sp, #4]
    1362:	2a02      	cmp	r2, #2
    1364:	d165      	bne.n	1432 <__aeabi_ddiv+0x182>
    1366:	9b01      	ldr	r3, [sp, #4]
    1368:	4c4a      	ldr	r4, [pc, #296]	; (1494 <__aeabi_ddiv+0x1e4>)
    136a:	469c      	mov	ip, r3
    136c:	2300      	movs	r3, #0
    136e:	2200      	movs	r2, #0
    1370:	4698      	mov	r8, r3
    1372:	e06b      	b.n	144c <__aeabi_ddiv+0x19c>
    1374:	0003      	movs	r3, r0
    1376:	4333      	orrs	r3, r6
    1378:	4699      	mov	r9, r3
    137a:	d04e      	beq.n	141a <__aeabi_ddiv+0x16a>
    137c:	2e00      	cmp	r6, #0
    137e:	d100      	bne.n	1382 <__aeabi_ddiv+0xd2>
    1380:	e1bc      	b.n	16fc <__aeabi_ddiv+0x44c>
    1382:	0030      	movs	r0, r6
    1384:	f000 fe92 	bl	20ac <__clzsi2>
    1388:	0003      	movs	r3, r0
    138a:	3b0b      	subs	r3, #11
    138c:	2b1c      	cmp	r3, #28
    138e:	dd00      	ble.n	1392 <__aeabi_ddiv+0xe2>
    1390:	e1ac      	b.n	16ec <__aeabi_ddiv+0x43c>
    1392:	221d      	movs	r2, #29
    1394:	1ad3      	subs	r3, r2, r3
    1396:	465a      	mov	r2, fp
    1398:	0001      	movs	r1, r0
    139a:	40da      	lsrs	r2, r3
    139c:	3908      	subs	r1, #8
    139e:	408e      	lsls	r6, r1
    13a0:	0013      	movs	r3, r2
    13a2:	4333      	orrs	r3, r6
    13a4:	4699      	mov	r9, r3
    13a6:	465b      	mov	r3, fp
    13a8:	408b      	lsls	r3, r1
    13aa:	4698      	mov	r8, r3
    13ac:	2300      	movs	r3, #0
    13ae:	4c3c      	ldr	r4, [pc, #240]	; (14a0 <__aeabi_ddiv+0x1f0>)
    13b0:	2600      	movs	r6, #0
    13b2:	1a24      	subs	r4, r4, r0
    13b4:	9303      	str	r3, [sp, #12]
    13b6:	e79f      	b.n	12f8 <__aeabi_ddiv+0x48>
    13b8:	4651      	mov	r1, sl
    13ba:	465a      	mov	r2, fp
    13bc:	4311      	orrs	r1, r2
    13be:	d129      	bne.n	1414 <__aeabi_ddiv+0x164>
    13c0:	2200      	movs	r2, #0
    13c2:	4693      	mov	fp, r2
    13c4:	3202      	adds	r2, #2
    13c6:	e7b1      	b.n	132c <__aeabi_ddiv+0x7c>
    13c8:	4659      	mov	r1, fp
    13ca:	4301      	orrs	r1, r0
    13cc:	d01e      	beq.n	140c <__aeabi_ddiv+0x15c>
    13ce:	465b      	mov	r3, fp
    13d0:	2b00      	cmp	r3, #0
    13d2:	d100      	bne.n	13d6 <__aeabi_ddiv+0x126>
    13d4:	e19e      	b.n	1714 <__aeabi_ddiv+0x464>
    13d6:	4658      	mov	r0, fp
    13d8:	f000 fe68 	bl	20ac <__clzsi2>
    13dc:	0003      	movs	r3, r0
    13de:	3b0b      	subs	r3, #11
    13e0:	2b1c      	cmp	r3, #28
    13e2:	dd00      	ble.n	13e6 <__aeabi_ddiv+0x136>
    13e4:	e18f      	b.n	1706 <__aeabi_ddiv+0x456>
    13e6:	0002      	movs	r2, r0
    13e8:	4659      	mov	r1, fp
    13ea:	3a08      	subs	r2, #8
    13ec:	4091      	lsls	r1, r2
    13ee:	468b      	mov	fp, r1
    13f0:	211d      	movs	r1, #29
    13f2:	1acb      	subs	r3, r1, r3
    13f4:	4651      	mov	r1, sl
    13f6:	40d9      	lsrs	r1, r3
    13f8:	000b      	movs	r3, r1
    13fa:	4659      	mov	r1, fp
    13fc:	430b      	orrs	r3, r1
    13fe:	4651      	mov	r1, sl
    1400:	469b      	mov	fp, r3
    1402:	4091      	lsls	r1, r2
    1404:	4b26      	ldr	r3, [pc, #152]	; (14a0 <__aeabi_ddiv+0x1f0>)
    1406:	2200      	movs	r2, #0
    1408:	1a1b      	subs	r3, r3, r0
    140a:	e78f      	b.n	132c <__aeabi_ddiv+0x7c>
    140c:	2300      	movs	r3, #0
    140e:	2201      	movs	r2, #1
    1410:	469b      	mov	fp, r3
    1412:	e78b      	b.n	132c <__aeabi_ddiv+0x7c>
    1414:	4651      	mov	r1, sl
    1416:	2203      	movs	r2, #3
    1418:	e788      	b.n	132c <__aeabi_ddiv+0x7c>
    141a:	2300      	movs	r3, #0
    141c:	4698      	mov	r8, r3
    141e:	3301      	adds	r3, #1
    1420:	2604      	movs	r6, #4
    1422:	2400      	movs	r4, #0
    1424:	9303      	str	r3, [sp, #12]
    1426:	e767      	b.n	12f8 <__aeabi_ddiv+0x48>
    1428:	2303      	movs	r3, #3
    142a:	46b1      	mov	r9, r6
    142c:	9303      	str	r3, [sp, #12]
    142e:	260c      	movs	r6, #12
    1430:	e762      	b.n	12f8 <__aeabi_ddiv+0x48>
    1432:	2a03      	cmp	r2, #3
    1434:	d100      	bne.n	1438 <__aeabi_ddiv+0x188>
    1436:	e25c      	b.n	18f2 <__aeabi_ddiv+0x642>
    1438:	9b01      	ldr	r3, [sp, #4]
    143a:	2a01      	cmp	r2, #1
    143c:	d000      	beq.n	1440 <__aeabi_ddiv+0x190>
    143e:	e1e4      	b.n	180a <__aeabi_ddiv+0x55a>
    1440:	4013      	ands	r3, r2
    1442:	469c      	mov	ip, r3
    1444:	2300      	movs	r3, #0
    1446:	2400      	movs	r4, #0
    1448:	2200      	movs	r2, #0
    144a:	4698      	mov	r8, r3
    144c:	2100      	movs	r1, #0
    144e:	0312      	lsls	r2, r2, #12
    1450:	0b13      	lsrs	r3, r2, #12
    1452:	0d0a      	lsrs	r2, r1, #20
    1454:	0512      	lsls	r2, r2, #20
    1456:	431a      	orrs	r2, r3
    1458:	0523      	lsls	r3, r4, #20
    145a:	4c12      	ldr	r4, [pc, #72]	; (14a4 <__aeabi_ddiv+0x1f4>)
    145c:	4640      	mov	r0, r8
    145e:	4022      	ands	r2, r4
    1460:	4313      	orrs	r3, r2
    1462:	4662      	mov	r2, ip
    1464:	005b      	lsls	r3, r3, #1
    1466:	07d2      	lsls	r2, r2, #31
    1468:	085b      	lsrs	r3, r3, #1
    146a:	4313      	orrs	r3, r2
    146c:	0019      	movs	r1, r3
    146e:	b007      	add	sp, #28
    1470:	bc3c      	pop	{r2, r3, r4, r5}
    1472:	4690      	mov	r8, r2
    1474:	4699      	mov	r9, r3
    1476:	46a2      	mov	sl, r4
    1478:	46ab      	mov	fp, r5
    147a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    147c:	2300      	movs	r3, #0
    147e:	2280      	movs	r2, #128	; 0x80
    1480:	469c      	mov	ip, r3
    1482:	0312      	lsls	r2, r2, #12
    1484:	4698      	mov	r8, r3
    1486:	4c03      	ldr	r4, [pc, #12]	; (1494 <__aeabi_ddiv+0x1e4>)
    1488:	e7e0      	b.n	144c <__aeabi_ddiv+0x19c>
    148a:	2300      	movs	r3, #0
    148c:	4c01      	ldr	r4, [pc, #4]	; (1494 <__aeabi_ddiv+0x1e4>)
    148e:	2200      	movs	r2, #0
    1490:	4698      	mov	r8, r3
    1492:	e7db      	b.n	144c <__aeabi_ddiv+0x19c>
    1494:	000007ff 	.word	0x000007ff
    1498:	fffffc01 	.word	0xfffffc01
    149c:	0000256c 	.word	0x0000256c
    14a0:	fffffc0d 	.word	0xfffffc0d
    14a4:	800fffff 	.word	0x800fffff
    14a8:	45d9      	cmp	r9, fp
    14aa:	d900      	bls.n	14ae <__aeabi_ddiv+0x1fe>
    14ac:	e139      	b.n	1722 <__aeabi_ddiv+0x472>
    14ae:	d100      	bne.n	14b2 <__aeabi_ddiv+0x202>
    14b0:	e134      	b.n	171c <__aeabi_ddiv+0x46c>
    14b2:	2300      	movs	r3, #0
    14b4:	4646      	mov	r6, r8
    14b6:	464d      	mov	r5, r9
    14b8:	469a      	mov	sl, r3
    14ba:	3c01      	subs	r4, #1
    14bc:	465b      	mov	r3, fp
    14be:	0e0a      	lsrs	r2, r1, #24
    14c0:	021b      	lsls	r3, r3, #8
    14c2:	431a      	orrs	r2, r3
    14c4:	020b      	lsls	r3, r1, #8
    14c6:	0c17      	lsrs	r7, r2, #16
    14c8:	9303      	str	r3, [sp, #12]
    14ca:	0413      	lsls	r3, r2, #16
    14cc:	0c1b      	lsrs	r3, r3, #16
    14ce:	0039      	movs	r1, r7
    14d0:	0028      	movs	r0, r5
    14d2:	4690      	mov	r8, r2
    14d4:	9301      	str	r3, [sp, #4]
    14d6:	f7ff fe41 	bl	115c <__udivsi3>
    14da:	0002      	movs	r2, r0
    14dc:	9b01      	ldr	r3, [sp, #4]
    14de:	4683      	mov	fp, r0
    14e0:	435a      	muls	r2, r3
    14e2:	0028      	movs	r0, r5
    14e4:	0039      	movs	r1, r7
    14e6:	4691      	mov	r9, r2
    14e8:	f7ff febe 	bl	1268 <__aeabi_uidivmod>
    14ec:	0c35      	lsrs	r5, r6, #16
    14ee:	0409      	lsls	r1, r1, #16
    14f0:	430d      	orrs	r5, r1
    14f2:	45a9      	cmp	r9, r5
    14f4:	d90d      	bls.n	1512 <__aeabi_ddiv+0x262>
    14f6:	465b      	mov	r3, fp
    14f8:	4445      	add	r5, r8
    14fa:	3b01      	subs	r3, #1
    14fc:	45a8      	cmp	r8, r5
    14fe:	d900      	bls.n	1502 <__aeabi_ddiv+0x252>
    1500:	e13a      	b.n	1778 <__aeabi_ddiv+0x4c8>
    1502:	45a9      	cmp	r9, r5
    1504:	d800      	bhi.n	1508 <__aeabi_ddiv+0x258>
    1506:	e137      	b.n	1778 <__aeabi_ddiv+0x4c8>
    1508:	2302      	movs	r3, #2
    150a:	425b      	negs	r3, r3
    150c:	469c      	mov	ip, r3
    150e:	4445      	add	r5, r8
    1510:	44e3      	add	fp, ip
    1512:	464b      	mov	r3, r9
    1514:	1aeb      	subs	r3, r5, r3
    1516:	0039      	movs	r1, r7
    1518:	0018      	movs	r0, r3
    151a:	9304      	str	r3, [sp, #16]
    151c:	f7ff fe1e 	bl	115c <__udivsi3>
    1520:	9b01      	ldr	r3, [sp, #4]
    1522:	0005      	movs	r5, r0
    1524:	4343      	muls	r3, r0
    1526:	0039      	movs	r1, r7
    1528:	9804      	ldr	r0, [sp, #16]
    152a:	4699      	mov	r9, r3
    152c:	f7ff fe9c 	bl	1268 <__aeabi_uidivmod>
    1530:	0433      	lsls	r3, r6, #16
    1532:	0409      	lsls	r1, r1, #16
    1534:	0c1b      	lsrs	r3, r3, #16
    1536:	430b      	orrs	r3, r1
    1538:	4599      	cmp	r9, r3
    153a:	d909      	bls.n	1550 <__aeabi_ddiv+0x2a0>
    153c:	4443      	add	r3, r8
    153e:	1e6a      	subs	r2, r5, #1
    1540:	4598      	cmp	r8, r3
    1542:	d900      	bls.n	1546 <__aeabi_ddiv+0x296>
    1544:	e11a      	b.n	177c <__aeabi_ddiv+0x4cc>
    1546:	4599      	cmp	r9, r3
    1548:	d800      	bhi.n	154c <__aeabi_ddiv+0x29c>
    154a:	e117      	b.n	177c <__aeabi_ddiv+0x4cc>
    154c:	3d02      	subs	r5, #2
    154e:	4443      	add	r3, r8
    1550:	464a      	mov	r2, r9
    1552:	1a9b      	subs	r3, r3, r2
    1554:	465a      	mov	r2, fp
    1556:	0412      	lsls	r2, r2, #16
    1558:	432a      	orrs	r2, r5
    155a:	9903      	ldr	r1, [sp, #12]
    155c:	4693      	mov	fp, r2
    155e:	0c10      	lsrs	r0, r2, #16
    1560:	0c0a      	lsrs	r2, r1, #16
    1562:	4691      	mov	r9, r2
    1564:	0409      	lsls	r1, r1, #16
    1566:	465a      	mov	r2, fp
    1568:	0c09      	lsrs	r1, r1, #16
    156a:	464e      	mov	r6, r9
    156c:	000d      	movs	r5, r1
    156e:	0412      	lsls	r2, r2, #16
    1570:	0c12      	lsrs	r2, r2, #16
    1572:	4345      	muls	r5, r0
    1574:	9105      	str	r1, [sp, #20]
    1576:	4351      	muls	r1, r2
    1578:	4372      	muls	r2, r6
    157a:	4370      	muls	r0, r6
    157c:	1952      	adds	r2, r2, r5
    157e:	0c0e      	lsrs	r6, r1, #16
    1580:	18b2      	adds	r2, r6, r2
    1582:	4295      	cmp	r5, r2
    1584:	d903      	bls.n	158e <__aeabi_ddiv+0x2de>
    1586:	2580      	movs	r5, #128	; 0x80
    1588:	026d      	lsls	r5, r5, #9
    158a:	46ac      	mov	ip, r5
    158c:	4460      	add	r0, ip
    158e:	0c15      	lsrs	r5, r2, #16
    1590:	0409      	lsls	r1, r1, #16
    1592:	0412      	lsls	r2, r2, #16
    1594:	0c09      	lsrs	r1, r1, #16
    1596:	1828      	adds	r0, r5, r0
    1598:	1852      	adds	r2, r2, r1
    159a:	4283      	cmp	r3, r0
    159c:	d200      	bcs.n	15a0 <__aeabi_ddiv+0x2f0>
    159e:	e0ce      	b.n	173e <__aeabi_ddiv+0x48e>
    15a0:	d100      	bne.n	15a4 <__aeabi_ddiv+0x2f4>
    15a2:	e0c8      	b.n	1736 <__aeabi_ddiv+0x486>
    15a4:	1a1d      	subs	r5, r3, r0
    15a6:	4653      	mov	r3, sl
    15a8:	1a9e      	subs	r6, r3, r2
    15aa:	45b2      	cmp	sl, r6
    15ac:	4192      	sbcs	r2, r2
    15ae:	4252      	negs	r2, r2
    15b0:	1aab      	subs	r3, r5, r2
    15b2:	469a      	mov	sl, r3
    15b4:	4598      	cmp	r8, r3
    15b6:	d100      	bne.n	15ba <__aeabi_ddiv+0x30a>
    15b8:	e117      	b.n	17ea <__aeabi_ddiv+0x53a>
    15ba:	0039      	movs	r1, r7
    15bc:	0018      	movs	r0, r3
    15be:	f7ff fdcd 	bl	115c <__udivsi3>
    15c2:	9b01      	ldr	r3, [sp, #4]
    15c4:	0005      	movs	r5, r0
    15c6:	4343      	muls	r3, r0
    15c8:	0039      	movs	r1, r7
    15ca:	4650      	mov	r0, sl
    15cc:	9304      	str	r3, [sp, #16]
    15ce:	f7ff fe4b 	bl	1268 <__aeabi_uidivmod>
    15d2:	9804      	ldr	r0, [sp, #16]
    15d4:	040b      	lsls	r3, r1, #16
    15d6:	0c31      	lsrs	r1, r6, #16
    15d8:	4319      	orrs	r1, r3
    15da:	4288      	cmp	r0, r1
    15dc:	d909      	bls.n	15f2 <__aeabi_ddiv+0x342>
    15de:	4441      	add	r1, r8
    15e0:	1e6b      	subs	r3, r5, #1
    15e2:	4588      	cmp	r8, r1
    15e4:	d900      	bls.n	15e8 <__aeabi_ddiv+0x338>
    15e6:	e107      	b.n	17f8 <__aeabi_ddiv+0x548>
    15e8:	4288      	cmp	r0, r1
    15ea:	d800      	bhi.n	15ee <__aeabi_ddiv+0x33e>
    15ec:	e104      	b.n	17f8 <__aeabi_ddiv+0x548>
    15ee:	3d02      	subs	r5, #2
    15f0:	4441      	add	r1, r8
    15f2:	9b04      	ldr	r3, [sp, #16]
    15f4:	1acb      	subs	r3, r1, r3
    15f6:	0018      	movs	r0, r3
    15f8:	0039      	movs	r1, r7
    15fa:	9304      	str	r3, [sp, #16]
    15fc:	f7ff fdae 	bl	115c <__udivsi3>
    1600:	9b01      	ldr	r3, [sp, #4]
    1602:	4682      	mov	sl, r0
    1604:	4343      	muls	r3, r0
    1606:	0039      	movs	r1, r7
    1608:	9804      	ldr	r0, [sp, #16]
    160a:	9301      	str	r3, [sp, #4]
    160c:	f7ff fe2c 	bl	1268 <__aeabi_uidivmod>
    1610:	9801      	ldr	r0, [sp, #4]
    1612:	040b      	lsls	r3, r1, #16
    1614:	0431      	lsls	r1, r6, #16
    1616:	0c09      	lsrs	r1, r1, #16
    1618:	4319      	orrs	r1, r3
    161a:	4288      	cmp	r0, r1
    161c:	d90d      	bls.n	163a <__aeabi_ddiv+0x38a>
    161e:	4653      	mov	r3, sl
    1620:	4441      	add	r1, r8
    1622:	3b01      	subs	r3, #1
    1624:	4588      	cmp	r8, r1
    1626:	d900      	bls.n	162a <__aeabi_ddiv+0x37a>
    1628:	e0e8      	b.n	17fc <__aeabi_ddiv+0x54c>
    162a:	4288      	cmp	r0, r1
    162c:	d800      	bhi.n	1630 <__aeabi_ddiv+0x380>
    162e:	e0e5      	b.n	17fc <__aeabi_ddiv+0x54c>
    1630:	2302      	movs	r3, #2
    1632:	425b      	negs	r3, r3
    1634:	469c      	mov	ip, r3
    1636:	4441      	add	r1, r8
    1638:	44e2      	add	sl, ip
    163a:	9b01      	ldr	r3, [sp, #4]
    163c:	042d      	lsls	r5, r5, #16
    163e:	1ace      	subs	r6, r1, r3
    1640:	4651      	mov	r1, sl
    1642:	4329      	orrs	r1, r5
    1644:	9d05      	ldr	r5, [sp, #20]
    1646:	464f      	mov	r7, r9
    1648:	002a      	movs	r2, r5
    164a:	040b      	lsls	r3, r1, #16
    164c:	0c08      	lsrs	r0, r1, #16
    164e:	0c1b      	lsrs	r3, r3, #16
    1650:	435a      	muls	r2, r3
    1652:	4345      	muls	r5, r0
    1654:	437b      	muls	r3, r7
    1656:	4378      	muls	r0, r7
    1658:	195b      	adds	r3, r3, r5
    165a:	0c17      	lsrs	r7, r2, #16
    165c:	18fb      	adds	r3, r7, r3
    165e:	429d      	cmp	r5, r3
    1660:	d903      	bls.n	166a <__aeabi_ddiv+0x3ba>
    1662:	2580      	movs	r5, #128	; 0x80
    1664:	026d      	lsls	r5, r5, #9
    1666:	46ac      	mov	ip, r5
    1668:	4460      	add	r0, ip
    166a:	0c1d      	lsrs	r5, r3, #16
    166c:	0412      	lsls	r2, r2, #16
    166e:	041b      	lsls	r3, r3, #16
    1670:	0c12      	lsrs	r2, r2, #16
    1672:	1828      	adds	r0, r5, r0
    1674:	189b      	adds	r3, r3, r2
    1676:	4286      	cmp	r6, r0
    1678:	d200      	bcs.n	167c <__aeabi_ddiv+0x3cc>
    167a:	e093      	b.n	17a4 <__aeabi_ddiv+0x4f4>
    167c:	d100      	bne.n	1680 <__aeabi_ddiv+0x3d0>
    167e:	e08e      	b.n	179e <__aeabi_ddiv+0x4ee>
    1680:	2301      	movs	r3, #1
    1682:	4319      	orrs	r1, r3
    1684:	4ba0      	ldr	r3, [pc, #640]	; (1908 <__aeabi_ddiv+0x658>)
    1686:	18e3      	adds	r3, r4, r3
    1688:	2b00      	cmp	r3, #0
    168a:	dc00      	bgt.n	168e <__aeabi_ddiv+0x3de>
    168c:	e099      	b.n	17c2 <__aeabi_ddiv+0x512>
    168e:	074a      	lsls	r2, r1, #29
    1690:	d000      	beq.n	1694 <__aeabi_ddiv+0x3e4>
    1692:	e09e      	b.n	17d2 <__aeabi_ddiv+0x522>
    1694:	465a      	mov	r2, fp
    1696:	01d2      	lsls	r2, r2, #7
    1698:	d506      	bpl.n	16a8 <__aeabi_ddiv+0x3f8>
    169a:	465a      	mov	r2, fp
    169c:	4b9b      	ldr	r3, [pc, #620]	; (190c <__aeabi_ddiv+0x65c>)
    169e:	401a      	ands	r2, r3
    16a0:	2380      	movs	r3, #128	; 0x80
    16a2:	4693      	mov	fp, r2
    16a4:	00db      	lsls	r3, r3, #3
    16a6:	18e3      	adds	r3, r4, r3
    16a8:	4a99      	ldr	r2, [pc, #612]	; (1910 <__aeabi_ddiv+0x660>)
    16aa:	4293      	cmp	r3, r2
    16ac:	dd68      	ble.n	1780 <__aeabi_ddiv+0x4d0>
    16ae:	2301      	movs	r3, #1
    16b0:	9a02      	ldr	r2, [sp, #8]
    16b2:	4c98      	ldr	r4, [pc, #608]	; (1914 <__aeabi_ddiv+0x664>)
    16b4:	401a      	ands	r2, r3
    16b6:	2300      	movs	r3, #0
    16b8:	4694      	mov	ip, r2
    16ba:	4698      	mov	r8, r3
    16bc:	2200      	movs	r2, #0
    16be:	e6c5      	b.n	144c <__aeabi_ddiv+0x19c>
    16c0:	2280      	movs	r2, #128	; 0x80
    16c2:	464b      	mov	r3, r9
    16c4:	0312      	lsls	r2, r2, #12
    16c6:	4213      	tst	r3, r2
    16c8:	d00a      	beq.n	16e0 <__aeabi_ddiv+0x430>
    16ca:	465b      	mov	r3, fp
    16cc:	4213      	tst	r3, r2
    16ce:	d106      	bne.n	16de <__aeabi_ddiv+0x42e>
    16d0:	431a      	orrs	r2, r3
    16d2:	0312      	lsls	r2, r2, #12
    16d4:	0b12      	lsrs	r2, r2, #12
    16d6:	46ac      	mov	ip, r5
    16d8:	4688      	mov	r8, r1
    16da:	4c8e      	ldr	r4, [pc, #568]	; (1914 <__aeabi_ddiv+0x664>)
    16dc:	e6b6      	b.n	144c <__aeabi_ddiv+0x19c>
    16de:	464b      	mov	r3, r9
    16e0:	431a      	orrs	r2, r3
    16e2:	0312      	lsls	r2, r2, #12
    16e4:	0b12      	lsrs	r2, r2, #12
    16e6:	46bc      	mov	ip, r7
    16e8:	4c8a      	ldr	r4, [pc, #552]	; (1914 <__aeabi_ddiv+0x664>)
    16ea:	e6af      	b.n	144c <__aeabi_ddiv+0x19c>
    16ec:	0003      	movs	r3, r0
    16ee:	465a      	mov	r2, fp
    16f0:	3b28      	subs	r3, #40	; 0x28
    16f2:	409a      	lsls	r2, r3
    16f4:	2300      	movs	r3, #0
    16f6:	4691      	mov	r9, r2
    16f8:	4698      	mov	r8, r3
    16fa:	e657      	b.n	13ac <__aeabi_ddiv+0xfc>
    16fc:	4658      	mov	r0, fp
    16fe:	f000 fcd5 	bl	20ac <__clzsi2>
    1702:	3020      	adds	r0, #32
    1704:	e640      	b.n	1388 <__aeabi_ddiv+0xd8>
    1706:	0003      	movs	r3, r0
    1708:	4652      	mov	r2, sl
    170a:	3b28      	subs	r3, #40	; 0x28
    170c:	409a      	lsls	r2, r3
    170e:	2100      	movs	r1, #0
    1710:	4693      	mov	fp, r2
    1712:	e677      	b.n	1404 <__aeabi_ddiv+0x154>
    1714:	f000 fcca 	bl	20ac <__clzsi2>
    1718:	3020      	adds	r0, #32
    171a:	e65f      	b.n	13dc <__aeabi_ddiv+0x12c>
    171c:	4588      	cmp	r8, r1
    171e:	d200      	bcs.n	1722 <__aeabi_ddiv+0x472>
    1720:	e6c7      	b.n	14b2 <__aeabi_ddiv+0x202>
    1722:	464b      	mov	r3, r9
    1724:	07de      	lsls	r6, r3, #31
    1726:	085d      	lsrs	r5, r3, #1
    1728:	4643      	mov	r3, r8
    172a:	085b      	lsrs	r3, r3, #1
    172c:	431e      	orrs	r6, r3
    172e:	4643      	mov	r3, r8
    1730:	07db      	lsls	r3, r3, #31
    1732:	469a      	mov	sl, r3
    1734:	e6c2      	b.n	14bc <__aeabi_ddiv+0x20c>
    1736:	2500      	movs	r5, #0
    1738:	4592      	cmp	sl, r2
    173a:	d300      	bcc.n	173e <__aeabi_ddiv+0x48e>
    173c:	e733      	b.n	15a6 <__aeabi_ddiv+0x2f6>
    173e:	9e03      	ldr	r6, [sp, #12]
    1740:	4659      	mov	r1, fp
    1742:	46b4      	mov	ip, r6
    1744:	44e2      	add	sl, ip
    1746:	45b2      	cmp	sl, r6
    1748:	41ad      	sbcs	r5, r5
    174a:	426d      	negs	r5, r5
    174c:	4445      	add	r5, r8
    174e:	18eb      	adds	r3, r5, r3
    1750:	3901      	subs	r1, #1
    1752:	4598      	cmp	r8, r3
    1754:	d207      	bcs.n	1766 <__aeabi_ddiv+0x4b6>
    1756:	4298      	cmp	r0, r3
    1758:	d900      	bls.n	175c <__aeabi_ddiv+0x4ac>
    175a:	e07f      	b.n	185c <__aeabi_ddiv+0x5ac>
    175c:	d100      	bne.n	1760 <__aeabi_ddiv+0x4b0>
    175e:	e0bc      	b.n	18da <__aeabi_ddiv+0x62a>
    1760:	1a1d      	subs	r5, r3, r0
    1762:	468b      	mov	fp, r1
    1764:	e71f      	b.n	15a6 <__aeabi_ddiv+0x2f6>
    1766:	4598      	cmp	r8, r3
    1768:	d1fa      	bne.n	1760 <__aeabi_ddiv+0x4b0>
    176a:	9d03      	ldr	r5, [sp, #12]
    176c:	4555      	cmp	r5, sl
    176e:	d9f2      	bls.n	1756 <__aeabi_ddiv+0x4a6>
    1770:	4643      	mov	r3, r8
    1772:	468b      	mov	fp, r1
    1774:	1a1d      	subs	r5, r3, r0
    1776:	e716      	b.n	15a6 <__aeabi_ddiv+0x2f6>
    1778:	469b      	mov	fp, r3
    177a:	e6ca      	b.n	1512 <__aeabi_ddiv+0x262>
    177c:	0015      	movs	r5, r2
    177e:	e6e7      	b.n	1550 <__aeabi_ddiv+0x2a0>
    1780:	465a      	mov	r2, fp
    1782:	08c9      	lsrs	r1, r1, #3
    1784:	0752      	lsls	r2, r2, #29
    1786:	430a      	orrs	r2, r1
    1788:	055b      	lsls	r3, r3, #21
    178a:	4690      	mov	r8, r2
    178c:	0d5c      	lsrs	r4, r3, #21
    178e:	465a      	mov	r2, fp
    1790:	2301      	movs	r3, #1
    1792:	9902      	ldr	r1, [sp, #8]
    1794:	0252      	lsls	r2, r2, #9
    1796:	4019      	ands	r1, r3
    1798:	0b12      	lsrs	r2, r2, #12
    179a:	468c      	mov	ip, r1
    179c:	e656      	b.n	144c <__aeabi_ddiv+0x19c>
    179e:	2b00      	cmp	r3, #0
    17a0:	d100      	bne.n	17a4 <__aeabi_ddiv+0x4f4>
    17a2:	e76f      	b.n	1684 <__aeabi_ddiv+0x3d4>
    17a4:	4446      	add	r6, r8
    17a6:	1e4a      	subs	r2, r1, #1
    17a8:	45b0      	cmp	r8, r6
    17aa:	d929      	bls.n	1800 <__aeabi_ddiv+0x550>
    17ac:	0011      	movs	r1, r2
    17ae:	4286      	cmp	r6, r0
    17b0:	d000      	beq.n	17b4 <__aeabi_ddiv+0x504>
    17b2:	e765      	b.n	1680 <__aeabi_ddiv+0x3d0>
    17b4:	9a03      	ldr	r2, [sp, #12]
    17b6:	4293      	cmp	r3, r2
    17b8:	d000      	beq.n	17bc <__aeabi_ddiv+0x50c>
    17ba:	e761      	b.n	1680 <__aeabi_ddiv+0x3d0>
    17bc:	e762      	b.n	1684 <__aeabi_ddiv+0x3d4>
    17be:	2101      	movs	r1, #1
    17c0:	4249      	negs	r1, r1
    17c2:	2001      	movs	r0, #1
    17c4:	1ac2      	subs	r2, r0, r3
    17c6:	2a38      	cmp	r2, #56	; 0x38
    17c8:	dd21      	ble.n	180e <__aeabi_ddiv+0x55e>
    17ca:	9b02      	ldr	r3, [sp, #8]
    17cc:	4003      	ands	r3, r0
    17ce:	469c      	mov	ip, r3
    17d0:	e638      	b.n	1444 <__aeabi_ddiv+0x194>
    17d2:	220f      	movs	r2, #15
    17d4:	400a      	ands	r2, r1
    17d6:	2a04      	cmp	r2, #4
    17d8:	d100      	bne.n	17dc <__aeabi_ddiv+0x52c>
    17da:	e75b      	b.n	1694 <__aeabi_ddiv+0x3e4>
    17dc:	000a      	movs	r2, r1
    17de:	1d11      	adds	r1, r2, #4
    17e0:	4291      	cmp	r1, r2
    17e2:	4192      	sbcs	r2, r2
    17e4:	4252      	negs	r2, r2
    17e6:	4493      	add	fp, r2
    17e8:	e754      	b.n	1694 <__aeabi_ddiv+0x3e4>
    17ea:	4b47      	ldr	r3, [pc, #284]	; (1908 <__aeabi_ddiv+0x658>)
    17ec:	18e3      	adds	r3, r4, r3
    17ee:	2b00      	cmp	r3, #0
    17f0:	dde5      	ble.n	17be <__aeabi_ddiv+0x50e>
    17f2:	2201      	movs	r2, #1
    17f4:	4252      	negs	r2, r2
    17f6:	e7f2      	b.n	17de <__aeabi_ddiv+0x52e>
    17f8:	001d      	movs	r5, r3
    17fa:	e6fa      	b.n	15f2 <__aeabi_ddiv+0x342>
    17fc:	469a      	mov	sl, r3
    17fe:	e71c      	b.n	163a <__aeabi_ddiv+0x38a>
    1800:	42b0      	cmp	r0, r6
    1802:	d839      	bhi.n	1878 <__aeabi_ddiv+0x5c8>
    1804:	d06e      	beq.n	18e4 <__aeabi_ddiv+0x634>
    1806:	0011      	movs	r1, r2
    1808:	e73a      	b.n	1680 <__aeabi_ddiv+0x3d0>
    180a:	9302      	str	r3, [sp, #8]
    180c:	e73a      	b.n	1684 <__aeabi_ddiv+0x3d4>
    180e:	2a1f      	cmp	r2, #31
    1810:	dc3c      	bgt.n	188c <__aeabi_ddiv+0x5dc>
    1812:	2320      	movs	r3, #32
    1814:	1a9b      	subs	r3, r3, r2
    1816:	000c      	movs	r4, r1
    1818:	4658      	mov	r0, fp
    181a:	4099      	lsls	r1, r3
    181c:	4098      	lsls	r0, r3
    181e:	1e4b      	subs	r3, r1, #1
    1820:	4199      	sbcs	r1, r3
    1822:	465b      	mov	r3, fp
    1824:	40d4      	lsrs	r4, r2
    1826:	40d3      	lsrs	r3, r2
    1828:	4320      	orrs	r0, r4
    182a:	4308      	orrs	r0, r1
    182c:	001a      	movs	r2, r3
    182e:	0743      	lsls	r3, r0, #29
    1830:	d009      	beq.n	1846 <__aeabi_ddiv+0x596>
    1832:	230f      	movs	r3, #15
    1834:	4003      	ands	r3, r0
    1836:	2b04      	cmp	r3, #4
    1838:	d005      	beq.n	1846 <__aeabi_ddiv+0x596>
    183a:	0001      	movs	r1, r0
    183c:	1d08      	adds	r0, r1, #4
    183e:	4288      	cmp	r0, r1
    1840:	419b      	sbcs	r3, r3
    1842:	425b      	negs	r3, r3
    1844:	18d2      	adds	r2, r2, r3
    1846:	0213      	lsls	r3, r2, #8
    1848:	d53a      	bpl.n	18c0 <__aeabi_ddiv+0x610>
    184a:	2301      	movs	r3, #1
    184c:	9a02      	ldr	r2, [sp, #8]
    184e:	2401      	movs	r4, #1
    1850:	401a      	ands	r2, r3
    1852:	2300      	movs	r3, #0
    1854:	4694      	mov	ip, r2
    1856:	4698      	mov	r8, r3
    1858:	2200      	movs	r2, #0
    185a:	e5f7      	b.n	144c <__aeabi_ddiv+0x19c>
    185c:	2102      	movs	r1, #2
    185e:	4249      	negs	r1, r1
    1860:	468c      	mov	ip, r1
    1862:	9d03      	ldr	r5, [sp, #12]
    1864:	44e3      	add	fp, ip
    1866:	46ac      	mov	ip, r5
    1868:	44e2      	add	sl, ip
    186a:	45aa      	cmp	sl, r5
    186c:	41ad      	sbcs	r5, r5
    186e:	426d      	negs	r5, r5
    1870:	4445      	add	r5, r8
    1872:	18ed      	adds	r5, r5, r3
    1874:	1a2d      	subs	r5, r5, r0
    1876:	e696      	b.n	15a6 <__aeabi_ddiv+0x2f6>
    1878:	1e8a      	subs	r2, r1, #2
    187a:	9903      	ldr	r1, [sp, #12]
    187c:	004d      	lsls	r5, r1, #1
    187e:	428d      	cmp	r5, r1
    1880:	4189      	sbcs	r1, r1
    1882:	4249      	negs	r1, r1
    1884:	4441      	add	r1, r8
    1886:	1876      	adds	r6, r6, r1
    1888:	9503      	str	r5, [sp, #12]
    188a:	e78f      	b.n	17ac <__aeabi_ddiv+0x4fc>
    188c:	201f      	movs	r0, #31
    188e:	4240      	negs	r0, r0
    1890:	1ac3      	subs	r3, r0, r3
    1892:	4658      	mov	r0, fp
    1894:	40d8      	lsrs	r0, r3
    1896:	0003      	movs	r3, r0
    1898:	2a20      	cmp	r2, #32
    189a:	d028      	beq.n	18ee <__aeabi_ddiv+0x63e>
    189c:	2040      	movs	r0, #64	; 0x40
    189e:	465d      	mov	r5, fp
    18a0:	1a82      	subs	r2, r0, r2
    18a2:	4095      	lsls	r5, r2
    18a4:	4329      	orrs	r1, r5
    18a6:	1e4a      	subs	r2, r1, #1
    18a8:	4191      	sbcs	r1, r2
    18aa:	4319      	orrs	r1, r3
    18ac:	2307      	movs	r3, #7
    18ae:	2200      	movs	r2, #0
    18b0:	400b      	ands	r3, r1
    18b2:	d009      	beq.n	18c8 <__aeabi_ddiv+0x618>
    18b4:	230f      	movs	r3, #15
    18b6:	2200      	movs	r2, #0
    18b8:	400b      	ands	r3, r1
    18ba:	0008      	movs	r0, r1
    18bc:	2b04      	cmp	r3, #4
    18be:	d1bd      	bne.n	183c <__aeabi_ddiv+0x58c>
    18c0:	0001      	movs	r1, r0
    18c2:	0753      	lsls	r3, r2, #29
    18c4:	0252      	lsls	r2, r2, #9
    18c6:	0b12      	lsrs	r2, r2, #12
    18c8:	08c9      	lsrs	r1, r1, #3
    18ca:	4319      	orrs	r1, r3
    18cc:	2301      	movs	r3, #1
    18ce:	4688      	mov	r8, r1
    18d0:	9902      	ldr	r1, [sp, #8]
    18d2:	2400      	movs	r4, #0
    18d4:	4019      	ands	r1, r3
    18d6:	468c      	mov	ip, r1
    18d8:	e5b8      	b.n	144c <__aeabi_ddiv+0x19c>
    18da:	4552      	cmp	r2, sl
    18dc:	d8be      	bhi.n	185c <__aeabi_ddiv+0x5ac>
    18de:	468b      	mov	fp, r1
    18e0:	2500      	movs	r5, #0
    18e2:	e660      	b.n	15a6 <__aeabi_ddiv+0x2f6>
    18e4:	9d03      	ldr	r5, [sp, #12]
    18e6:	429d      	cmp	r5, r3
    18e8:	d3c6      	bcc.n	1878 <__aeabi_ddiv+0x5c8>
    18ea:	0011      	movs	r1, r2
    18ec:	e762      	b.n	17b4 <__aeabi_ddiv+0x504>
    18ee:	2500      	movs	r5, #0
    18f0:	e7d8      	b.n	18a4 <__aeabi_ddiv+0x5f4>
    18f2:	2280      	movs	r2, #128	; 0x80
    18f4:	465b      	mov	r3, fp
    18f6:	0312      	lsls	r2, r2, #12
    18f8:	431a      	orrs	r2, r3
    18fa:	9b01      	ldr	r3, [sp, #4]
    18fc:	0312      	lsls	r2, r2, #12
    18fe:	0b12      	lsrs	r2, r2, #12
    1900:	469c      	mov	ip, r3
    1902:	4688      	mov	r8, r1
    1904:	4c03      	ldr	r4, [pc, #12]	; (1914 <__aeabi_ddiv+0x664>)
    1906:	e5a1      	b.n	144c <__aeabi_ddiv+0x19c>
    1908:	000003ff 	.word	0x000003ff
    190c:	feffffff 	.word	0xfeffffff
    1910:	000007fe 	.word	0x000007fe
    1914:	000007ff 	.word	0x000007ff

00001918 <__aeabi_dsub>:
    1918:	b5f0      	push	{r4, r5, r6, r7, lr}
    191a:	4646      	mov	r6, r8
    191c:	46d6      	mov	lr, sl
    191e:	464f      	mov	r7, r9
    1920:	030c      	lsls	r4, r1, #12
    1922:	b5c0      	push	{r6, r7, lr}
    1924:	0fcd      	lsrs	r5, r1, #31
    1926:	004e      	lsls	r6, r1, #1
    1928:	0a61      	lsrs	r1, r4, #9
    192a:	0f44      	lsrs	r4, r0, #29
    192c:	430c      	orrs	r4, r1
    192e:	00c1      	lsls	r1, r0, #3
    1930:	0058      	lsls	r0, r3, #1
    1932:	0d40      	lsrs	r0, r0, #21
    1934:	4684      	mov	ip, r0
    1936:	468a      	mov	sl, r1
    1938:	000f      	movs	r7, r1
    193a:	0319      	lsls	r1, r3, #12
    193c:	0f50      	lsrs	r0, r2, #29
    193e:	0a49      	lsrs	r1, r1, #9
    1940:	4301      	orrs	r1, r0
    1942:	48c6      	ldr	r0, [pc, #792]	; (1c5c <__aeabi_dsub+0x344>)
    1944:	0d76      	lsrs	r6, r6, #21
    1946:	46a8      	mov	r8, r5
    1948:	0fdb      	lsrs	r3, r3, #31
    194a:	00d2      	lsls	r2, r2, #3
    194c:	4584      	cmp	ip, r0
    194e:	d100      	bne.n	1952 <__aeabi_dsub+0x3a>
    1950:	e0d8      	b.n	1b04 <__aeabi_dsub+0x1ec>
    1952:	2001      	movs	r0, #1
    1954:	4043      	eors	r3, r0
    1956:	42ab      	cmp	r3, r5
    1958:	d100      	bne.n	195c <__aeabi_dsub+0x44>
    195a:	e0a6      	b.n	1aaa <__aeabi_dsub+0x192>
    195c:	4660      	mov	r0, ip
    195e:	1a35      	subs	r5, r6, r0
    1960:	2d00      	cmp	r5, #0
    1962:	dc00      	bgt.n	1966 <__aeabi_dsub+0x4e>
    1964:	e105      	b.n	1b72 <__aeabi_dsub+0x25a>
    1966:	2800      	cmp	r0, #0
    1968:	d110      	bne.n	198c <__aeabi_dsub+0x74>
    196a:	000b      	movs	r3, r1
    196c:	4313      	orrs	r3, r2
    196e:	d100      	bne.n	1972 <__aeabi_dsub+0x5a>
    1970:	e0d7      	b.n	1b22 <__aeabi_dsub+0x20a>
    1972:	1e6b      	subs	r3, r5, #1
    1974:	2b00      	cmp	r3, #0
    1976:	d000      	beq.n	197a <__aeabi_dsub+0x62>
    1978:	e14b      	b.n	1c12 <__aeabi_dsub+0x2fa>
    197a:	4653      	mov	r3, sl
    197c:	1a9f      	subs	r7, r3, r2
    197e:	45ba      	cmp	sl, r7
    1980:	4180      	sbcs	r0, r0
    1982:	1a64      	subs	r4, r4, r1
    1984:	4240      	negs	r0, r0
    1986:	1a24      	subs	r4, r4, r0
    1988:	2601      	movs	r6, #1
    198a:	e01e      	b.n	19ca <__aeabi_dsub+0xb2>
    198c:	4bb3      	ldr	r3, [pc, #716]	; (1c5c <__aeabi_dsub+0x344>)
    198e:	429e      	cmp	r6, r3
    1990:	d048      	beq.n	1a24 <__aeabi_dsub+0x10c>
    1992:	2380      	movs	r3, #128	; 0x80
    1994:	041b      	lsls	r3, r3, #16
    1996:	4319      	orrs	r1, r3
    1998:	2d38      	cmp	r5, #56	; 0x38
    199a:	dd00      	ble.n	199e <__aeabi_dsub+0x86>
    199c:	e119      	b.n	1bd2 <__aeabi_dsub+0x2ba>
    199e:	2d1f      	cmp	r5, #31
    19a0:	dd00      	ble.n	19a4 <__aeabi_dsub+0x8c>
    19a2:	e14c      	b.n	1c3e <__aeabi_dsub+0x326>
    19a4:	2320      	movs	r3, #32
    19a6:	000f      	movs	r7, r1
    19a8:	1b5b      	subs	r3, r3, r5
    19aa:	0010      	movs	r0, r2
    19ac:	409a      	lsls	r2, r3
    19ae:	409f      	lsls	r7, r3
    19b0:	40e8      	lsrs	r0, r5
    19b2:	1e53      	subs	r3, r2, #1
    19b4:	419a      	sbcs	r2, r3
    19b6:	40e9      	lsrs	r1, r5
    19b8:	4307      	orrs	r7, r0
    19ba:	4317      	orrs	r7, r2
    19bc:	4653      	mov	r3, sl
    19be:	1bdf      	subs	r7, r3, r7
    19c0:	1a61      	subs	r1, r4, r1
    19c2:	45ba      	cmp	sl, r7
    19c4:	41a4      	sbcs	r4, r4
    19c6:	4264      	negs	r4, r4
    19c8:	1b0c      	subs	r4, r1, r4
    19ca:	0223      	lsls	r3, r4, #8
    19cc:	d400      	bmi.n	19d0 <__aeabi_dsub+0xb8>
    19ce:	e0c5      	b.n	1b5c <__aeabi_dsub+0x244>
    19d0:	0264      	lsls	r4, r4, #9
    19d2:	0a65      	lsrs	r5, r4, #9
    19d4:	2d00      	cmp	r5, #0
    19d6:	d100      	bne.n	19da <__aeabi_dsub+0xc2>
    19d8:	e0f6      	b.n	1bc8 <__aeabi_dsub+0x2b0>
    19da:	0028      	movs	r0, r5
    19dc:	f000 fb66 	bl	20ac <__clzsi2>
    19e0:	0003      	movs	r3, r0
    19e2:	3b08      	subs	r3, #8
    19e4:	2b1f      	cmp	r3, #31
    19e6:	dd00      	ble.n	19ea <__aeabi_dsub+0xd2>
    19e8:	e0e9      	b.n	1bbe <__aeabi_dsub+0x2a6>
    19ea:	2220      	movs	r2, #32
    19ec:	003c      	movs	r4, r7
    19ee:	1ad2      	subs	r2, r2, r3
    19f0:	409d      	lsls	r5, r3
    19f2:	40d4      	lsrs	r4, r2
    19f4:	409f      	lsls	r7, r3
    19f6:	4325      	orrs	r5, r4
    19f8:	429e      	cmp	r6, r3
    19fa:	dd00      	ble.n	19fe <__aeabi_dsub+0xe6>
    19fc:	e0db      	b.n	1bb6 <__aeabi_dsub+0x29e>
    19fe:	1b9e      	subs	r6, r3, r6
    1a00:	1c73      	adds	r3, r6, #1
    1a02:	2b1f      	cmp	r3, #31
    1a04:	dd00      	ble.n	1a08 <__aeabi_dsub+0xf0>
    1a06:	e10a      	b.n	1c1e <__aeabi_dsub+0x306>
    1a08:	2220      	movs	r2, #32
    1a0a:	0038      	movs	r0, r7
    1a0c:	1ad2      	subs	r2, r2, r3
    1a0e:	0029      	movs	r1, r5
    1a10:	4097      	lsls	r7, r2
    1a12:	002c      	movs	r4, r5
    1a14:	4091      	lsls	r1, r2
    1a16:	40d8      	lsrs	r0, r3
    1a18:	1e7a      	subs	r2, r7, #1
    1a1a:	4197      	sbcs	r7, r2
    1a1c:	40dc      	lsrs	r4, r3
    1a1e:	2600      	movs	r6, #0
    1a20:	4301      	orrs	r1, r0
    1a22:	430f      	orrs	r7, r1
    1a24:	077b      	lsls	r3, r7, #29
    1a26:	d009      	beq.n	1a3c <__aeabi_dsub+0x124>
    1a28:	230f      	movs	r3, #15
    1a2a:	403b      	ands	r3, r7
    1a2c:	2b04      	cmp	r3, #4
    1a2e:	d005      	beq.n	1a3c <__aeabi_dsub+0x124>
    1a30:	1d3b      	adds	r3, r7, #4
    1a32:	42bb      	cmp	r3, r7
    1a34:	41bf      	sbcs	r7, r7
    1a36:	427f      	negs	r7, r7
    1a38:	19e4      	adds	r4, r4, r7
    1a3a:	001f      	movs	r7, r3
    1a3c:	0223      	lsls	r3, r4, #8
    1a3e:	d525      	bpl.n	1a8c <__aeabi_dsub+0x174>
    1a40:	4b86      	ldr	r3, [pc, #536]	; (1c5c <__aeabi_dsub+0x344>)
    1a42:	3601      	adds	r6, #1
    1a44:	429e      	cmp	r6, r3
    1a46:	d100      	bne.n	1a4a <__aeabi_dsub+0x132>
    1a48:	e0af      	b.n	1baa <__aeabi_dsub+0x292>
    1a4a:	4b85      	ldr	r3, [pc, #532]	; (1c60 <__aeabi_dsub+0x348>)
    1a4c:	2501      	movs	r5, #1
    1a4e:	401c      	ands	r4, r3
    1a50:	4643      	mov	r3, r8
    1a52:	0762      	lsls	r2, r4, #29
    1a54:	08ff      	lsrs	r7, r7, #3
    1a56:	0264      	lsls	r4, r4, #9
    1a58:	0576      	lsls	r6, r6, #21
    1a5a:	4317      	orrs	r7, r2
    1a5c:	0b24      	lsrs	r4, r4, #12
    1a5e:	0d76      	lsrs	r6, r6, #21
    1a60:	401d      	ands	r5, r3
    1a62:	2100      	movs	r1, #0
    1a64:	0324      	lsls	r4, r4, #12
    1a66:	0b23      	lsrs	r3, r4, #12
    1a68:	0d0c      	lsrs	r4, r1, #20
    1a6a:	4a7e      	ldr	r2, [pc, #504]	; (1c64 <__aeabi_dsub+0x34c>)
    1a6c:	0524      	lsls	r4, r4, #20
    1a6e:	431c      	orrs	r4, r3
    1a70:	4014      	ands	r4, r2
    1a72:	0533      	lsls	r3, r6, #20
    1a74:	4323      	orrs	r3, r4
    1a76:	005b      	lsls	r3, r3, #1
    1a78:	07ed      	lsls	r5, r5, #31
    1a7a:	085b      	lsrs	r3, r3, #1
    1a7c:	432b      	orrs	r3, r5
    1a7e:	0038      	movs	r0, r7
    1a80:	0019      	movs	r1, r3
    1a82:	bc1c      	pop	{r2, r3, r4}
    1a84:	4690      	mov	r8, r2
    1a86:	4699      	mov	r9, r3
    1a88:	46a2      	mov	sl, r4
    1a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a8c:	2501      	movs	r5, #1
    1a8e:	4643      	mov	r3, r8
    1a90:	0762      	lsls	r2, r4, #29
    1a92:	08ff      	lsrs	r7, r7, #3
    1a94:	4317      	orrs	r7, r2
    1a96:	08e4      	lsrs	r4, r4, #3
    1a98:	401d      	ands	r5, r3
    1a9a:	4b70      	ldr	r3, [pc, #448]	; (1c5c <__aeabi_dsub+0x344>)
    1a9c:	429e      	cmp	r6, r3
    1a9e:	d036      	beq.n	1b0e <__aeabi_dsub+0x1f6>
    1aa0:	0324      	lsls	r4, r4, #12
    1aa2:	0576      	lsls	r6, r6, #21
    1aa4:	0b24      	lsrs	r4, r4, #12
    1aa6:	0d76      	lsrs	r6, r6, #21
    1aa8:	e7db      	b.n	1a62 <__aeabi_dsub+0x14a>
    1aaa:	4663      	mov	r3, ip
    1aac:	1af3      	subs	r3, r6, r3
    1aae:	2b00      	cmp	r3, #0
    1ab0:	dc00      	bgt.n	1ab4 <__aeabi_dsub+0x19c>
    1ab2:	e094      	b.n	1bde <__aeabi_dsub+0x2c6>
    1ab4:	4660      	mov	r0, ip
    1ab6:	2800      	cmp	r0, #0
    1ab8:	d035      	beq.n	1b26 <__aeabi_dsub+0x20e>
    1aba:	4868      	ldr	r0, [pc, #416]	; (1c5c <__aeabi_dsub+0x344>)
    1abc:	4286      	cmp	r6, r0
    1abe:	d0b1      	beq.n	1a24 <__aeabi_dsub+0x10c>
    1ac0:	2780      	movs	r7, #128	; 0x80
    1ac2:	043f      	lsls	r7, r7, #16
    1ac4:	4339      	orrs	r1, r7
    1ac6:	2b38      	cmp	r3, #56	; 0x38
    1ac8:	dc00      	bgt.n	1acc <__aeabi_dsub+0x1b4>
    1aca:	e0fd      	b.n	1cc8 <__aeabi_dsub+0x3b0>
    1acc:	430a      	orrs	r2, r1
    1ace:	0017      	movs	r7, r2
    1ad0:	2100      	movs	r1, #0
    1ad2:	1e7a      	subs	r2, r7, #1
    1ad4:	4197      	sbcs	r7, r2
    1ad6:	4457      	add	r7, sl
    1ad8:	4557      	cmp	r7, sl
    1ada:	4180      	sbcs	r0, r0
    1adc:	1909      	adds	r1, r1, r4
    1ade:	4244      	negs	r4, r0
    1ae0:	190c      	adds	r4, r1, r4
    1ae2:	0223      	lsls	r3, r4, #8
    1ae4:	d53a      	bpl.n	1b5c <__aeabi_dsub+0x244>
    1ae6:	4b5d      	ldr	r3, [pc, #372]	; (1c5c <__aeabi_dsub+0x344>)
    1ae8:	3601      	adds	r6, #1
    1aea:	429e      	cmp	r6, r3
    1aec:	d100      	bne.n	1af0 <__aeabi_dsub+0x1d8>
    1aee:	e14b      	b.n	1d88 <__aeabi_dsub+0x470>
    1af0:	2201      	movs	r2, #1
    1af2:	4b5b      	ldr	r3, [pc, #364]	; (1c60 <__aeabi_dsub+0x348>)
    1af4:	401c      	ands	r4, r3
    1af6:	087b      	lsrs	r3, r7, #1
    1af8:	4017      	ands	r7, r2
    1afa:	431f      	orrs	r7, r3
    1afc:	07e2      	lsls	r2, r4, #31
    1afe:	4317      	orrs	r7, r2
    1b00:	0864      	lsrs	r4, r4, #1
    1b02:	e78f      	b.n	1a24 <__aeabi_dsub+0x10c>
    1b04:	0008      	movs	r0, r1
    1b06:	4310      	orrs	r0, r2
    1b08:	d000      	beq.n	1b0c <__aeabi_dsub+0x1f4>
    1b0a:	e724      	b.n	1956 <__aeabi_dsub+0x3e>
    1b0c:	e721      	b.n	1952 <__aeabi_dsub+0x3a>
    1b0e:	0023      	movs	r3, r4
    1b10:	433b      	orrs	r3, r7
    1b12:	d100      	bne.n	1b16 <__aeabi_dsub+0x1fe>
    1b14:	e1b9      	b.n	1e8a <__aeabi_dsub+0x572>
    1b16:	2280      	movs	r2, #128	; 0x80
    1b18:	0312      	lsls	r2, r2, #12
    1b1a:	4314      	orrs	r4, r2
    1b1c:	0324      	lsls	r4, r4, #12
    1b1e:	0b24      	lsrs	r4, r4, #12
    1b20:	e79f      	b.n	1a62 <__aeabi_dsub+0x14a>
    1b22:	002e      	movs	r6, r5
    1b24:	e77e      	b.n	1a24 <__aeabi_dsub+0x10c>
    1b26:	0008      	movs	r0, r1
    1b28:	4310      	orrs	r0, r2
    1b2a:	d100      	bne.n	1b2e <__aeabi_dsub+0x216>
    1b2c:	e0ca      	b.n	1cc4 <__aeabi_dsub+0x3ac>
    1b2e:	1e58      	subs	r0, r3, #1
    1b30:	4684      	mov	ip, r0
    1b32:	2800      	cmp	r0, #0
    1b34:	d000      	beq.n	1b38 <__aeabi_dsub+0x220>
    1b36:	e0e7      	b.n	1d08 <__aeabi_dsub+0x3f0>
    1b38:	4452      	add	r2, sl
    1b3a:	4552      	cmp	r2, sl
    1b3c:	4180      	sbcs	r0, r0
    1b3e:	1864      	adds	r4, r4, r1
    1b40:	4240      	negs	r0, r0
    1b42:	1824      	adds	r4, r4, r0
    1b44:	0017      	movs	r7, r2
    1b46:	2601      	movs	r6, #1
    1b48:	0223      	lsls	r3, r4, #8
    1b4a:	d507      	bpl.n	1b5c <__aeabi_dsub+0x244>
    1b4c:	2602      	movs	r6, #2
    1b4e:	e7cf      	b.n	1af0 <__aeabi_dsub+0x1d8>
    1b50:	4664      	mov	r4, ip
    1b52:	432c      	orrs	r4, r5
    1b54:	d100      	bne.n	1b58 <__aeabi_dsub+0x240>
    1b56:	e1b3      	b.n	1ec0 <__aeabi_dsub+0x5a8>
    1b58:	002c      	movs	r4, r5
    1b5a:	4667      	mov	r7, ip
    1b5c:	077b      	lsls	r3, r7, #29
    1b5e:	d000      	beq.n	1b62 <__aeabi_dsub+0x24a>
    1b60:	e762      	b.n	1a28 <__aeabi_dsub+0x110>
    1b62:	0763      	lsls	r3, r4, #29
    1b64:	08ff      	lsrs	r7, r7, #3
    1b66:	431f      	orrs	r7, r3
    1b68:	2501      	movs	r5, #1
    1b6a:	4643      	mov	r3, r8
    1b6c:	08e4      	lsrs	r4, r4, #3
    1b6e:	401d      	ands	r5, r3
    1b70:	e793      	b.n	1a9a <__aeabi_dsub+0x182>
    1b72:	2d00      	cmp	r5, #0
    1b74:	d178      	bne.n	1c68 <__aeabi_dsub+0x350>
    1b76:	1c75      	adds	r5, r6, #1
    1b78:	056d      	lsls	r5, r5, #21
    1b7a:	0d6d      	lsrs	r5, r5, #21
    1b7c:	2d01      	cmp	r5, #1
    1b7e:	dc00      	bgt.n	1b82 <__aeabi_dsub+0x26a>
    1b80:	e0f2      	b.n	1d68 <__aeabi_dsub+0x450>
    1b82:	4650      	mov	r0, sl
    1b84:	1a80      	subs	r0, r0, r2
    1b86:	4582      	cmp	sl, r0
    1b88:	41bf      	sbcs	r7, r7
    1b8a:	1a65      	subs	r5, r4, r1
    1b8c:	427f      	negs	r7, r7
    1b8e:	1bed      	subs	r5, r5, r7
    1b90:	4684      	mov	ip, r0
    1b92:	0228      	lsls	r0, r5, #8
    1b94:	d400      	bmi.n	1b98 <__aeabi_dsub+0x280>
    1b96:	e08c      	b.n	1cb2 <__aeabi_dsub+0x39a>
    1b98:	4650      	mov	r0, sl
    1b9a:	1a17      	subs	r7, r2, r0
    1b9c:	42ba      	cmp	r2, r7
    1b9e:	4192      	sbcs	r2, r2
    1ba0:	1b0c      	subs	r4, r1, r4
    1ba2:	4255      	negs	r5, r2
    1ba4:	1b65      	subs	r5, r4, r5
    1ba6:	4698      	mov	r8, r3
    1ba8:	e714      	b.n	19d4 <__aeabi_dsub+0xbc>
    1baa:	2501      	movs	r5, #1
    1bac:	4643      	mov	r3, r8
    1bae:	2400      	movs	r4, #0
    1bb0:	401d      	ands	r5, r3
    1bb2:	2700      	movs	r7, #0
    1bb4:	e755      	b.n	1a62 <__aeabi_dsub+0x14a>
    1bb6:	4c2a      	ldr	r4, [pc, #168]	; (1c60 <__aeabi_dsub+0x348>)
    1bb8:	1af6      	subs	r6, r6, r3
    1bba:	402c      	ands	r4, r5
    1bbc:	e732      	b.n	1a24 <__aeabi_dsub+0x10c>
    1bbe:	003d      	movs	r5, r7
    1bc0:	3828      	subs	r0, #40	; 0x28
    1bc2:	4085      	lsls	r5, r0
    1bc4:	2700      	movs	r7, #0
    1bc6:	e717      	b.n	19f8 <__aeabi_dsub+0xe0>
    1bc8:	0038      	movs	r0, r7
    1bca:	f000 fa6f 	bl	20ac <__clzsi2>
    1bce:	3020      	adds	r0, #32
    1bd0:	e706      	b.n	19e0 <__aeabi_dsub+0xc8>
    1bd2:	430a      	orrs	r2, r1
    1bd4:	0017      	movs	r7, r2
    1bd6:	2100      	movs	r1, #0
    1bd8:	1e7a      	subs	r2, r7, #1
    1bda:	4197      	sbcs	r7, r2
    1bdc:	e6ee      	b.n	19bc <__aeabi_dsub+0xa4>
    1bde:	2b00      	cmp	r3, #0
    1be0:	d000      	beq.n	1be4 <__aeabi_dsub+0x2cc>
    1be2:	e0e5      	b.n	1db0 <__aeabi_dsub+0x498>
    1be4:	1c73      	adds	r3, r6, #1
    1be6:	469c      	mov	ip, r3
    1be8:	055b      	lsls	r3, r3, #21
    1bea:	0d5b      	lsrs	r3, r3, #21
    1bec:	2b01      	cmp	r3, #1
    1bee:	dc00      	bgt.n	1bf2 <__aeabi_dsub+0x2da>
    1bf0:	e09f      	b.n	1d32 <__aeabi_dsub+0x41a>
    1bf2:	4b1a      	ldr	r3, [pc, #104]	; (1c5c <__aeabi_dsub+0x344>)
    1bf4:	459c      	cmp	ip, r3
    1bf6:	d100      	bne.n	1bfa <__aeabi_dsub+0x2e2>
    1bf8:	e0c5      	b.n	1d86 <__aeabi_dsub+0x46e>
    1bfa:	4452      	add	r2, sl
    1bfc:	4552      	cmp	r2, sl
    1bfe:	4180      	sbcs	r0, r0
    1c00:	1864      	adds	r4, r4, r1
    1c02:	4240      	negs	r0, r0
    1c04:	1824      	adds	r4, r4, r0
    1c06:	07e7      	lsls	r7, r4, #31
    1c08:	0852      	lsrs	r2, r2, #1
    1c0a:	4317      	orrs	r7, r2
    1c0c:	0864      	lsrs	r4, r4, #1
    1c0e:	4666      	mov	r6, ip
    1c10:	e708      	b.n	1a24 <__aeabi_dsub+0x10c>
    1c12:	4812      	ldr	r0, [pc, #72]	; (1c5c <__aeabi_dsub+0x344>)
    1c14:	4285      	cmp	r5, r0
    1c16:	d100      	bne.n	1c1a <__aeabi_dsub+0x302>
    1c18:	e085      	b.n	1d26 <__aeabi_dsub+0x40e>
    1c1a:	001d      	movs	r5, r3
    1c1c:	e6bc      	b.n	1998 <__aeabi_dsub+0x80>
    1c1e:	0029      	movs	r1, r5
    1c20:	3e1f      	subs	r6, #31
    1c22:	40f1      	lsrs	r1, r6
    1c24:	2b20      	cmp	r3, #32
    1c26:	d100      	bne.n	1c2a <__aeabi_dsub+0x312>
    1c28:	e07f      	b.n	1d2a <__aeabi_dsub+0x412>
    1c2a:	2240      	movs	r2, #64	; 0x40
    1c2c:	1ad3      	subs	r3, r2, r3
    1c2e:	409d      	lsls	r5, r3
    1c30:	432f      	orrs	r7, r5
    1c32:	1e7d      	subs	r5, r7, #1
    1c34:	41af      	sbcs	r7, r5
    1c36:	2400      	movs	r4, #0
    1c38:	430f      	orrs	r7, r1
    1c3a:	2600      	movs	r6, #0
    1c3c:	e78e      	b.n	1b5c <__aeabi_dsub+0x244>
    1c3e:	002b      	movs	r3, r5
    1c40:	000f      	movs	r7, r1
    1c42:	3b20      	subs	r3, #32
    1c44:	40df      	lsrs	r7, r3
    1c46:	2d20      	cmp	r5, #32
    1c48:	d071      	beq.n	1d2e <__aeabi_dsub+0x416>
    1c4a:	2340      	movs	r3, #64	; 0x40
    1c4c:	1b5d      	subs	r5, r3, r5
    1c4e:	40a9      	lsls	r1, r5
    1c50:	430a      	orrs	r2, r1
    1c52:	1e51      	subs	r1, r2, #1
    1c54:	418a      	sbcs	r2, r1
    1c56:	2100      	movs	r1, #0
    1c58:	4317      	orrs	r7, r2
    1c5a:	e6af      	b.n	19bc <__aeabi_dsub+0xa4>
    1c5c:	000007ff 	.word	0x000007ff
    1c60:	ff7fffff 	.word	0xff7fffff
    1c64:	800fffff 	.word	0x800fffff
    1c68:	2e00      	cmp	r6, #0
    1c6a:	d03e      	beq.n	1cea <__aeabi_dsub+0x3d2>
    1c6c:	4eb3      	ldr	r6, [pc, #716]	; (1f3c <__aeabi_dsub+0x624>)
    1c6e:	45b4      	cmp	ip, r6
    1c70:	d045      	beq.n	1cfe <__aeabi_dsub+0x3e6>
    1c72:	2680      	movs	r6, #128	; 0x80
    1c74:	0436      	lsls	r6, r6, #16
    1c76:	426d      	negs	r5, r5
    1c78:	4334      	orrs	r4, r6
    1c7a:	2d38      	cmp	r5, #56	; 0x38
    1c7c:	dd00      	ble.n	1c80 <__aeabi_dsub+0x368>
    1c7e:	e0a8      	b.n	1dd2 <__aeabi_dsub+0x4ba>
    1c80:	2d1f      	cmp	r5, #31
    1c82:	dd00      	ble.n	1c86 <__aeabi_dsub+0x36e>
    1c84:	e11f      	b.n	1ec6 <__aeabi_dsub+0x5ae>
    1c86:	2620      	movs	r6, #32
    1c88:	0027      	movs	r7, r4
    1c8a:	4650      	mov	r0, sl
    1c8c:	1b76      	subs	r6, r6, r5
    1c8e:	40b7      	lsls	r7, r6
    1c90:	40e8      	lsrs	r0, r5
    1c92:	4307      	orrs	r7, r0
    1c94:	4650      	mov	r0, sl
    1c96:	40b0      	lsls	r0, r6
    1c98:	1e46      	subs	r6, r0, #1
    1c9a:	41b0      	sbcs	r0, r6
    1c9c:	40ec      	lsrs	r4, r5
    1c9e:	4338      	orrs	r0, r7
    1ca0:	1a17      	subs	r7, r2, r0
    1ca2:	42ba      	cmp	r2, r7
    1ca4:	4192      	sbcs	r2, r2
    1ca6:	1b0c      	subs	r4, r1, r4
    1ca8:	4252      	negs	r2, r2
    1caa:	1aa4      	subs	r4, r4, r2
    1cac:	4666      	mov	r6, ip
    1cae:	4698      	mov	r8, r3
    1cb0:	e68b      	b.n	19ca <__aeabi_dsub+0xb2>
    1cb2:	4664      	mov	r4, ip
    1cb4:	4667      	mov	r7, ip
    1cb6:	432c      	orrs	r4, r5
    1cb8:	d000      	beq.n	1cbc <__aeabi_dsub+0x3a4>
    1cba:	e68b      	b.n	19d4 <__aeabi_dsub+0xbc>
    1cbc:	2500      	movs	r5, #0
    1cbe:	2600      	movs	r6, #0
    1cc0:	2700      	movs	r7, #0
    1cc2:	e6ea      	b.n	1a9a <__aeabi_dsub+0x182>
    1cc4:	001e      	movs	r6, r3
    1cc6:	e6ad      	b.n	1a24 <__aeabi_dsub+0x10c>
    1cc8:	2b1f      	cmp	r3, #31
    1cca:	dc60      	bgt.n	1d8e <__aeabi_dsub+0x476>
    1ccc:	2720      	movs	r7, #32
    1cce:	1af8      	subs	r0, r7, r3
    1cd0:	000f      	movs	r7, r1
    1cd2:	4684      	mov	ip, r0
    1cd4:	4087      	lsls	r7, r0
    1cd6:	0010      	movs	r0, r2
    1cd8:	40d8      	lsrs	r0, r3
    1cda:	4307      	orrs	r7, r0
    1cdc:	4660      	mov	r0, ip
    1cde:	4082      	lsls	r2, r0
    1ce0:	1e50      	subs	r0, r2, #1
    1ce2:	4182      	sbcs	r2, r0
    1ce4:	40d9      	lsrs	r1, r3
    1ce6:	4317      	orrs	r7, r2
    1ce8:	e6f5      	b.n	1ad6 <__aeabi_dsub+0x1be>
    1cea:	0026      	movs	r6, r4
    1cec:	4650      	mov	r0, sl
    1cee:	4306      	orrs	r6, r0
    1cf0:	d005      	beq.n	1cfe <__aeabi_dsub+0x3e6>
    1cf2:	43ed      	mvns	r5, r5
    1cf4:	2d00      	cmp	r5, #0
    1cf6:	d0d3      	beq.n	1ca0 <__aeabi_dsub+0x388>
    1cf8:	4e90      	ldr	r6, [pc, #576]	; (1f3c <__aeabi_dsub+0x624>)
    1cfa:	45b4      	cmp	ip, r6
    1cfc:	d1bd      	bne.n	1c7a <__aeabi_dsub+0x362>
    1cfe:	000c      	movs	r4, r1
    1d00:	0017      	movs	r7, r2
    1d02:	4666      	mov	r6, ip
    1d04:	4698      	mov	r8, r3
    1d06:	e68d      	b.n	1a24 <__aeabi_dsub+0x10c>
    1d08:	488c      	ldr	r0, [pc, #560]	; (1f3c <__aeabi_dsub+0x624>)
    1d0a:	4283      	cmp	r3, r0
    1d0c:	d00b      	beq.n	1d26 <__aeabi_dsub+0x40e>
    1d0e:	4663      	mov	r3, ip
    1d10:	e6d9      	b.n	1ac6 <__aeabi_dsub+0x1ae>
    1d12:	2d00      	cmp	r5, #0
    1d14:	d000      	beq.n	1d18 <__aeabi_dsub+0x400>
    1d16:	e096      	b.n	1e46 <__aeabi_dsub+0x52e>
    1d18:	0008      	movs	r0, r1
    1d1a:	4310      	orrs	r0, r2
    1d1c:	d100      	bne.n	1d20 <__aeabi_dsub+0x408>
    1d1e:	e0e2      	b.n	1ee6 <__aeabi_dsub+0x5ce>
    1d20:	000c      	movs	r4, r1
    1d22:	0017      	movs	r7, r2
    1d24:	4698      	mov	r8, r3
    1d26:	4e85      	ldr	r6, [pc, #532]	; (1f3c <__aeabi_dsub+0x624>)
    1d28:	e67c      	b.n	1a24 <__aeabi_dsub+0x10c>
    1d2a:	2500      	movs	r5, #0
    1d2c:	e780      	b.n	1c30 <__aeabi_dsub+0x318>
    1d2e:	2100      	movs	r1, #0
    1d30:	e78e      	b.n	1c50 <__aeabi_dsub+0x338>
    1d32:	0023      	movs	r3, r4
    1d34:	4650      	mov	r0, sl
    1d36:	4303      	orrs	r3, r0
    1d38:	2e00      	cmp	r6, #0
    1d3a:	d000      	beq.n	1d3e <__aeabi_dsub+0x426>
    1d3c:	e0a8      	b.n	1e90 <__aeabi_dsub+0x578>
    1d3e:	2b00      	cmp	r3, #0
    1d40:	d100      	bne.n	1d44 <__aeabi_dsub+0x42c>
    1d42:	e0de      	b.n	1f02 <__aeabi_dsub+0x5ea>
    1d44:	000b      	movs	r3, r1
    1d46:	4313      	orrs	r3, r2
    1d48:	d100      	bne.n	1d4c <__aeabi_dsub+0x434>
    1d4a:	e66b      	b.n	1a24 <__aeabi_dsub+0x10c>
    1d4c:	4452      	add	r2, sl
    1d4e:	4552      	cmp	r2, sl
    1d50:	4180      	sbcs	r0, r0
    1d52:	1864      	adds	r4, r4, r1
    1d54:	4240      	negs	r0, r0
    1d56:	1824      	adds	r4, r4, r0
    1d58:	0017      	movs	r7, r2
    1d5a:	0223      	lsls	r3, r4, #8
    1d5c:	d400      	bmi.n	1d60 <__aeabi_dsub+0x448>
    1d5e:	e6fd      	b.n	1b5c <__aeabi_dsub+0x244>
    1d60:	4b77      	ldr	r3, [pc, #476]	; (1f40 <__aeabi_dsub+0x628>)
    1d62:	4666      	mov	r6, ip
    1d64:	401c      	ands	r4, r3
    1d66:	e65d      	b.n	1a24 <__aeabi_dsub+0x10c>
    1d68:	0025      	movs	r5, r4
    1d6a:	4650      	mov	r0, sl
    1d6c:	4305      	orrs	r5, r0
    1d6e:	2e00      	cmp	r6, #0
    1d70:	d1cf      	bne.n	1d12 <__aeabi_dsub+0x3fa>
    1d72:	2d00      	cmp	r5, #0
    1d74:	d14f      	bne.n	1e16 <__aeabi_dsub+0x4fe>
    1d76:	000c      	movs	r4, r1
    1d78:	4314      	orrs	r4, r2
    1d7a:	d100      	bne.n	1d7e <__aeabi_dsub+0x466>
    1d7c:	e0a0      	b.n	1ec0 <__aeabi_dsub+0x5a8>
    1d7e:	000c      	movs	r4, r1
    1d80:	0017      	movs	r7, r2
    1d82:	4698      	mov	r8, r3
    1d84:	e64e      	b.n	1a24 <__aeabi_dsub+0x10c>
    1d86:	4666      	mov	r6, ip
    1d88:	2400      	movs	r4, #0
    1d8a:	2700      	movs	r7, #0
    1d8c:	e685      	b.n	1a9a <__aeabi_dsub+0x182>
    1d8e:	001f      	movs	r7, r3
    1d90:	0008      	movs	r0, r1
    1d92:	3f20      	subs	r7, #32
    1d94:	40f8      	lsrs	r0, r7
    1d96:	0007      	movs	r7, r0
    1d98:	2b20      	cmp	r3, #32
    1d9a:	d100      	bne.n	1d9e <__aeabi_dsub+0x486>
    1d9c:	e08e      	b.n	1ebc <__aeabi_dsub+0x5a4>
    1d9e:	2040      	movs	r0, #64	; 0x40
    1da0:	1ac3      	subs	r3, r0, r3
    1da2:	4099      	lsls	r1, r3
    1da4:	430a      	orrs	r2, r1
    1da6:	1e51      	subs	r1, r2, #1
    1da8:	418a      	sbcs	r2, r1
    1daa:	2100      	movs	r1, #0
    1dac:	4317      	orrs	r7, r2
    1dae:	e692      	b.n	1ad6 <__aeabi_dsub+0x1be>
    1db0:	2e00      	cmp	r6, #0
    1db2:	d114      	bne.n	1dde <__aeabi_dsub+0x4c6>
    1db4:	0026      	movs	r6, r4
    1db6:	4650      	mov	r0, sl
    1db8:	4306      	orrs	r6, r0
    1dba:	d062      	beq.n	1e82 <__aeabi_dsub+0x56a>
    1dbc:	43db      	mvns	r3, r3
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	d15c      	bne.n	1e7c <__aeabi_dsub+0x564>
    1dc2:	1887      	adds	r7, r0, r2
    1dc4:	4297      	cmp	r7, r2
    1dc6:	4192      	sbcs	r2, r2
    1dc8:	1864      	adds	r4, r4, r1
    1dca:	4252      	negs	r2, r2
    1dcc:	18a4      	adds	r4, r4, r2
    1dce:	4666      	mov	r6, ip
    1dd0:	e687      	b.n	1ae2 <__aeabi_dsub+0x1ca>
    1dd2:	4650      	mov	r0, sl
    1dd4:	4320      	orrs	r0, r4
    1dd6:	1e44      	subs	r4, r0, #1
    1dd8:	41a0      	sbcs	r0, r4
    1dda:	2400      	movs	r4, #0
    1ddc:	e760      	b.n	1ca0 <__aeabi_dsub+0x388>
    1dde:	4e57      	ldr	r6, [pc, #348]	; (1f3c <__aeabi_dsub+0x624>)
    1de0:	45b4      	cmp	ip, r6
    1de2:	d04e      	beq.n	1e82 <__aeabi_dsub+0x56a>
    1de4:	2680      	movs	r6, #128	; 0x80
    1de6:	0436      	lsls	r6, r6, #16
    1de8:	425b      	negs	r3, r3
    1dea:	4334      	orrs	r4, r6
    1dec:	2b38      	cmp	r3, #56	; 0x38
    1dee:	dd00      	ble.n	1df2 <__aeabi_dsub+0x4da>
    1df0:	e07f      	b.n	1ef2 <__aeabi_dsub+0x5da>
    1df2:	2b1f      	cmp	r3, #31
    1df4:	dd00      	ble.n	1df8 <__aeabi_dsub+0x4e0>
    1df6:	e08b      	b.n	1f10 <__aeabi_dsub+0x5f8>
    1df8:	2620      	movs	r6, #32
    1dfa:	0027      	movs	r7, r4
    1dfc:	4650      	mov	r0, sl
    1dfe:	1af6      	subs	r6, r6, r3
    1e00:	40b7      	lsls	r7, r6
    1e02:	40d8      	lsrs	r0, r3
    1e04:	4307      	orrs	r7, r0
    1e06:	4650      	mov	r0, sl
    1e08:	40b0      	lsls	r0, r6
    1e0a:	1e46      	subs	r6, r0, #1
    1e0c:	41b0      	sbcs	r0, r6
    1e0e:	4307      	orrs	r7, r0
    1e10:	40dc      	lsrs	r4, r3
    1e12:	18bf      	adds	r7, r7, r2
    1e14:	e7d6      	b.n	1dc4 <__aeabi_dsub+0x4ac>
    1e16:	000d      	movs	r5, r1
    1e18:	4315      	orrs	r5, r2
    1e1a:	d100      	bne.n	1e1e <__aeabi_dsub+0x506>
    1e1c:	e602      	b.n	1a24 <__aeabi_dsub+0x10c>
    1e1e:	4650      	mov	r0, sl
    1e20:	1a80      	subs	r0, r0, r2
    1e22:	4582      	cmp	sl, r0
    1e24:	41bf      	sbcs	r7, r7
    1e26:	1a65      	subs	r5, r4, r1
    1e28:	427f      	negs	r7, r7
    1e2a:	1bed      	subs	r5, r5, r7
    1e2c:	4684      	mov	ip, r0
    1e2e:	0228      	lsls	r0, r5, #8
    1e30:	d400      	bmi.n	1e34 <__aeabi_dsub+0x51c>
    1e32:	e68d      	b.n	1b50 <__aeabi_dsub+0x238>
    1e34:	4650      	mov	r0, sl
    1e36:	1a17      	subs	r7, r2, r0
    1e38:	42ba      	cmp	r2, r7
    1e3a:	4192      	sbcs	r2, r2
    1e3c:	1b0c      	subs	r4, r1, r4
    1e3e:	4252      	negs	r2, r2
    1e40:	1aa4      	subs	r4, r4, r2
    1e42:	4698      	mov	r8, r3
    1e44:	e5ee      	b.n	1a24 <__aeabi_dsub+0x10c>
    1e46:	000d      	movs	r5, r1
    1e48:	4315      	orrs	r5, r2
    1e4a:	d100      	bne.n	1e4e <__aeabi_dsub+0x536>
    1e4c:	e76b      	b.n	1d26 <__aeabi_dsub+0x40e>
    1e4e:	4650      	mov	r0, sl
    1e50:	0767      	lsls	r7, r4, #29
    1e52:	08c0      	lsrs	r0, r0, #3
    1e54:	4307      	orrs	r7, r0
    1e56:	2080      	movs	r0, #128	; 0x80
    1e58:	08e4      	lsrs	r4, r4, #3
    1e5a:	0300      	lsls	r0, r0, #12
    1e5c:	4204      	tst	r4, r0
    1e5e:	d007      	beq.n	1e70 <__aeabi_dsub+0x558>
    1e60:	08cd      	lsrs	r5, r1, #3
    1e62:	4205      	tst	r5, r0
    1e64:	d104      	bne.n	1e70 <__aeabi_dsub+0x558>
    1e66:	002c      	movs	r4, r5
    1e68:	4698      	mov	r8, r3
    1e6a:	08d7      	lsrs	r7, r2, #3
    1e6c:	0749      	lsls	r1, r1, #29
    1e6e:	430f      	orrs	r7, r1
    1e70:	0f7b      	lsrs	r3, r7, #29
    1e72:	00e4      	lsls	r4, r4, #3
    1e74:	431c      	orrs	r4, r3
    1e76:	00ff      	lsls	r7, r7, #3
    1e78:	4e30      	ldr	r6, [pc, #192]	; (1f3c <__aeabi_dsub+0x624>)
    1e7a:	e5d3      	b.n	1a24 <__aeabi_dsub+0x10c>
    1e7c:	4e2f      	ldr	r6, [pc, #188]	; (1f3c <__aeabi_dsub+0x624>)
    1e7e:	45b4      	cmp	ip, r6
    1e80:	d1b4      	bne.n	1dec <__aeabi_dsub+0x4d4>
    1e82:	000c      	movs	r4, r1
    1e84:	0017      	movs	r7, r2
    1e86:	4666      	mov	r6, ip
    1e88:	e5cc      	b.n	1a24 <__aeabi_dsub+0x10c>
    1e8a:	2700      	movs	r7, #0
    1e8c:	2400      	movs	r4, #0
    1e8e:	e5e8      	b.n	1a62 <__aeabi_dsub+0x14a>
    1e90:	2b00      	cmp	r3, #0
    1e92:	d039      	beq.n	1f08 <__aeabi_dsub+0x5f0>
    1e94:	000b      	movs	r3, r1
    1e96:	4313      	orrs	r3, r2
    1e98:	d100      	bne.n	1e9c <__aeabi_dsub+0x584>
    1e9a:	e744      	b.n	1d26 <__aeabi_dsub+0x40e>
    1e9c:	08c0      	lsrs	r0, r0, #3
    1e9e:	0767      	lsls	r7, r4, #29
    1ea0:	4307      	orrs	r7, r0
    1ea2:	2080      	movs	r0, #128	; 0x80
    1ea4:	08e4      	lsrs	r4, r4, #3
    1ea6:	0300      	lsls	r0, r0, #12
    1ea8:	4204      	tst	r4, r0
    1eaa:	d0e1      	beq.n	1e70 <__aeabi_dsub+0x558>
    1eac:	08cb      	lsrs	r3, r1, #3
    1eae:	4203      	tst	r3, r0
    1eb0:	d1de      	bne.n	1e70 <__aeabi_dsub+0x558>
    1eb2:	08d7      	lsrs	r7, r2, #3
    1eb4:	0749      	lsls	r1, r1, #29
    1eb6:	430f      	orrs	r7, r1
    1eb8:	001c      	movs	r4, r3
    1eba:	e7d9      	b.n	1e70 <__aeabi_dsub+0x558>
    1ebc:	2100      	movs	r1, #0
    1ebe:	e771      	b.n	1da4 <__aeabi_dsub+0x48c>
    1ec0:	2500      	movs	r5, #0
    1ec2:	2700      	movs	r7, #0
    1ec4:	e5e9      	b.n	1a9a <__aeabi_dsub+0x182>
    1ec6:	002e      	movs	r6, r5
    1ec8:	0027      	movs	r7, r4
    1eca:	3e20      	subs	r6, #32
    1ecc:	40f7      	lsrs	r7, r6
    1ece:	2d20      	cmp	r5, #32
    1ed0:	d02f      	beq.n	1f32 <__aeabi_dsub+0x61a>
    1ed2:	2640      	movs	r6, #64	; 0x40
    1ed4:	1b75      	subs	r5, r6, r5
    1ed6:	40ac      	lsls	r4, r5
    1ed8:	4650      	mov	r0, sl
    1eda:	4320      	orrs	r0, r4
    1edc:	1e44      	subs	r4, r0, #1
    1ede:	41a0      	sbcs	r0, r4
    1ee0:	2400      	movs	r4, #0
    1ee2:	4338      	orrs	r0, r7
    1ee4:	e6dc      	b.n	1ca0 <__aeabi_dsub+0x388>
    1ee6:	2480      	movs	r4, #128	; 0x80
    1ee8:	2500      	movs	r5, #0
    1eea:	0324      	lsls	r4, r4, #12
    1eec:	4e13      	ldr	r6, [pc, #76]	; (1f3c <__aeabi_dsub+0x624>)
    1eee:	2700      	movs	r7, #0
    1ef0:	e5d3      	b.n	1a9a <__aeabi_dsub+0x182>
    1ef2:	4650      	mov	r0, sl
    1ef4:	4320      	orrs	r0, r4
    1ef6:	0007      	movs	r7, r0
    1ef8:	1e78      	subs	r0, r7, #1
    1efa:	4187      	sbcs	r7, r0
    1efc:	2400      	movs	r4, #0
    1efe:	18bf      	adds	r7, r7, r2
    1f00:	e760      	b.n	1dc4 <__aeabi_dsub+0x4ac>
    1f02:	000c      	movs	r4, r1
    1f04:	0017      	movs	r7, r2
    1f06:	e58d      	b.n	1a24 <__aeabi_dsub+0x10c>
    1f08:	000c      	movs	r4, r1
    1f0a:	0017      	movs	r7, r2
    1f0c:	4e0b      	ldr	r6, [pc, #44]	; (1f3c <__aeabi_dsub+0x624>)
    1f0e:	e589      	b.n	1a24 <__aeabi_dsub+0x10c>
    1f10:	001e      	movs	r6, r3
    1f12:	0027      	movs	r7, r4
    1f14:	3e20      	subs	r6, #32
    1f16:	40f7      	lsrs	r7, r6
    1f18:	2b20      	cmp	r3, #32
    1f1a:	d00c      	beq.n	1f36 <__aeabi_dsub+0x61e>
    1f1c:	2640      	movs	r6, #64	; 0x40
    1f1e:	1af3      	subs	r3, r6, r3
    1f20:	409c      	lsls	r4, r3
    1f22:	4650      	mov	r0, sl
    1f24:	4320      	orrs	r0, r4
    1f26:	1e44      	subs	r4, r0, #1
    1f28:	41a0      	sbcs	r0, r4
    1f2a:	4307      	orrs	r7, r0
    1f2c:	2400      	movs	r4, #0
    1f2e:	18bf      	adds	r7, r7, r2
    1f30:	e748      	b.n	1dc4 <__aeabi_dsub+0x4ac>
    1f32:	2400      	movs	r4, #0
    1f34:	e7d0      	b.n	1ed8 <__aeabi_dsub+0x5c0>
    1f36:	2400      	movs	r4, #0
    1f38:	e7f3      	b.n	1f22 <__aeabi_dsub+0x60a>
    1f3a:	46c0      	nop			; (mov r8, r8)
    1f3c:	000007ff 	.word	0x000007ff
    1f40:	ff7fffff 	.word	0xff7fffff

00001f44 <__aeabi_d2iz>:
    1f44:	b530      	push	{r4, r5, lr}
    1f46:	4d13      	ldr	r5, [pc, #76]	; (1f94 <__aeabi_d2iz+0x50>)
    1f48:	030a      	lsls	r2, r1, #12
    1f4a:	004b      	lsls	r3, r1, #1
    1f4c:	0b12      	lsrs	r2, r2, #12
    1f4e:	0d5b      	lsrs	r3, r3, #21
    1f50:	0fc9      	lsrs	r1, r1, #31
    1f52:	2400      	movs	r4, #0
    1f54:	42ab      	cmp	r3, r5
    1f56:	dd10      	ble.n	1f7a <__aeabi_d2iz+0x36>
    1f58:	4c0f      	ldr	r4, [pc, #60]	; (1f98 <__aeabi_d2iz+0x54>)
    1f5a:	42a3      	cmp	r3, r4
    1f5c:	dc0f      	bgt.n	1f7e <__aeabi_d2iz+0x3a>
    1f5e:	2480      	movs	r4, #128	; 0x80
    1f60:	4d0e      	ldr	r5, [pc, #56]	; (1f9c <__aeabi_d2iz+0x58>)
    1f62:	0364      	lsls	r4, r4, #13
    1f64:	4322      	orrs	r2, r4
    1f66:	1aed      	subs	r5, r5, r3
    1f68:	2d1f      	cmp	r5, #31
    1f6a:	dd0b      	ble.n	1f84 <__aeabi_d2iz+0x40>
    1f6c:	480c      	ldr	r0, [pc, #48]	; (1fa0 <__aeabi_d2iz+0x5c>)
    1f6e:	1ac3      	subs	r3, r0, r3
    1f70:	40da      	lsrs	r2, r3
    1f72:	4254      	negs	r4, r2
    1f74:	2900      	cmp	r1, #0
    1f76:	d100      	bne.n	1f7a <__aeabi_d2iz+0x36>
    1f78:	0014      	movs	r4, r2
    1f7a:	0020      	movs	r0, r4
    1f7c:	bd30      	pop	{r4, r5, pc}
    1f7e:	4b09      	ldr	r3, [pc, #36]	; (1fa4 <__aeabi_d2iz+0x60>)
    1f80:	18cc      	adds	r4, r1, r3
    1f82:	e7fa      	b.n	1f7a <__aeabi_d2iz+0x36>
    1f84:	4c08      	ldr	r4, [pc, #32]	; (1fa8 <__aeabi_d2iz+0x64>)
    1f86:	40e8      	lsrs	r0, r5
    1f88:	46a4      	mov	ip, r4
    1f8a:	4463      	add	r3, ip
    1f8c:	409a      	lsls	r2, r3
    1f8e:	4302      	orrs	r2, r0
    1f90:	e7ef      	b.n	1f72 <__aeabi_d2iz+0x2e>
    1f92:	46c0      	nop			; (mov r8, r8)
    1f94:	000003fe 	.word	0x000003fe
    1f98:	0000041d 	.word	0x0000041d
    1f9c:	00000433 	.word	0x00000433
    1fa0:	00000413 	.word	0x00000413
    1fa4:	7fffffff 	.word	0x7fffffff
    1fa8:	fffffbed 	.word	0xfffffbed

00001fac <__aeabi_i2d>:
    1fac:	b570      	push	{r4, r5, r6, lr}
    1fae:	2800      	cmp	r0, #0
    1fb0:	d030      	beq.n	2014 <STACK_SIZE+0x14>
    1fb2:	17c3      	asrs	r3, r0, #31
    1fb4:	18c4      	adds	r4, r0, r3
    1fb6:	405c      	eors	r4, r3
    1fb8:	0fc5      	lsrs	r5, r0, #31
    1fba:	0020      	movs	r0, r4
    1fbc:	f000 f876 	bl	20ac <__clzsi2>
    1fc0:	4b17      	ldr	r3, [pc, #92]	; (2020 <STACK_SIZE+0x20>)
    1fc2:	4a18      	ldr	r2, [pc, #96]	; (2024 <STACK_SIZE+0x24>)
    1fc4:	1a1b      	subs	r3, r3, r0
    1fc6:	1ad2      	subs	r2, r2, r3
    1fc8:	2a1f      	cmp	r2, #31
    1fca:	dd18      	ble.n	1ffe <__aeabi_i2d+0x52>
    1fcc:	4a16      	ldr	r2, [pc, #88]	; (2028 <STACK_SIZE+0x28>)
    1fce:	1ad2      	subs	r2, r2, r3
    1fd0:	4094      	lsls	r4, r2
    1fd2:	2200      	movs	r2, #0
    1fd4:	0324      	lsls	r4, r4, #12
    1fd6:	055b      	lsls	r3, r3, #21
    1fd8:	0b24      	lsrs	r4, r4, #12
    1fda:	0d5b      	lsrs	r3, r3, #21
    1fdc:	2100      	movs	r1, #0
    1fde:	0010      	movs	r0, r2
    1fe0:	0324      	lsls	r4, r4, #12
    1fe2:	0d0a      	lsrs	r2, r1, #20
    1fe4:	0b24      	lsrs	r4, r4, #12
    1fe6:	0512      	lsls	r2, r2, #20
    1fe8:	4322      	orrs	r2, r4
    1fea:	4c10      	ldr	r4, [pc, #64]	; (202c <STACK_SIZE+0x2c>)
    1fec:	051b      	lsls	r3, r3, #20
    1fee:	4022      	ands	r2, r4
    1ff0:	4313      	orrs	r3, r2
    1ff2:	005b      	lsls	r3, r3, #1
    1ff4:	07ed      	lsls	r5, r5, #31
    1ff6:	085b      	lsrs	r3, r3, #1
    1ff8:	432b      	orrs	r3, r5
    1ffa:	0019      	movs	r1, r3
    1ffc:	bd70      	pop	{r4, r5, r6, pc}
    1ffe:	0021      	movs	r1, r4
    2000:	4091      	lsls	r1, r2
    2002:	000a      	movs	r2, r1
    2004:	210b      	movs	r1, #11
    2006:	1a08      	subs	r0, r1, r0
    2008:	40c4      	lsrs	r4, r0
    200a:	055b      	lsls	r3, r3, #21
    200c:	0324      	lsls	r4, r4, #12
    200e:	0b24      	lsrs	r4, r4, #12
    2010:	0d5b      	lsrs	r3, r3, #21
    2012:	e7e3      	b.n	1fdc <__aeabi_i2d+0x30>
    2014:	2500      	movs	r5, #0
    2016:	2300      	movs	r3, #0
    2018:	2400      	movs	r4, #0
    201a:	2200      	movs	r2, #0
    201c:	e7de      	b.n	1fdc <__aeabi_i2d+0x30>
    201e:	46c0      	nop			; (mov r8, r8)
    2020:	0000041e 	.word	0x0000041e
    2024:	00000433 	.word	0x00000433
    2028:	00000413 	.word	0x00000413
    202c:	800fffff 	.word	0x800fffff

00002030 <__aeabi_cdrcmple>:
    2030:	4684      	mov	ip, r0
    2032:	1c10      	adds	r0, r2, #0
    2034:	4662      	mov	r2, ip
    2036:	468c      	mov	ip, r1
    2038:	1c19      	adds	r1, r3, #0
    203a:	4663      	mov	r3, ip
    203c:	e000      	b.n	2040 <__aeabi_cdcmpeq>
    203e:	46c0      	nop			; (mov r8, r8)

00002040 <__aeabi_cdcmpeq>:
    2040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2042:	f000 f8ef 	bl	2224 <__ledf2>
    2046:	2800      	cmp	r0, #0
    2048:	d401      	bmi.n	204e <__aeabi_cdcmpeq+0xe>
    204a:	2100      	movs	r1, #0
    204c:	42c8      	cmn	r0, r1
    204e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002050 <__aeabi_dcmpeq>:
    2050:	b510      	push	{r4, lr}
    2052:	f000 f849 	bl	20e8 <__eqdf2>
    2056:	4240      	negs	r0, r0
    2058:	3001      	adds	r0, #1
    205a:	bd10      	pop	{r4, pc}

0000205c <__aeabi_dcmplt>:
    205c:	b510      	push	{r4, lr}
    205e:	f000 f8e1 	bl	2224 <__ledf2>
    2062:	2800      	cmp	r0, #0
    2064:	db01      	blt.n	206a <__aeabi_dcmplt+0xe>
    2066:	2000      	movs	r0, #0
    2068:	bd10      	pop	{r4, pc}
    206a:	2001      	movs	r0, #1
    206c:	bd10      	pop	{r4, pc}
    206e:	46c0      	nop			; (mov r8, r8)

00002070 <__aeabi_dcmple>:
    2070:	b510      	push	{r4, lr}
    2072:	f000 f8d7 	bl	2224 <__ledf2>
    2076:	2800      	cmp	r0, #0
    2078:	dd01      	ble.n	207e <__aeabi_dcmple+0xe>
    207a:	2000      	movs	r0, #0
    207c:	bd10      	pop	{r4, pc}
    207e:	2001      	movs	r0, #1
    2080:	bd10      	pop	{r4, pc}
    2082:	46c0      	nop			; (mov r8, r8)

00002084 <__aeabi_dcmpgt>:
    2084:	b510      	push	{r4, lr}
    2086:	f000 f869 	bl	215c <__gedf2>
    208a:	2800      	cmp	r0, #0
    208c:	dc01      	bgt.n	2092 <__aeabi_dcmpgt+0xe>
    208e:	2000      	movs	r0, #0
    2090:	bd10      	pop	{r4, pc}
    2092:	2001      	movs	r0, #1
    2094:	bd10      	pop	{r4, pc}
    2096:	46c0      	nop			; (mov r8, r8)

00002098 <__aeabi_dcmpge>:
    2098:	b510      	push	{r4, lr}
    209a:	f000 f85f 	bl	215c <__gedf2>
    209e:	2800      	cmp	r0, #0
    20a0:	da01      	bge.n	20a6 <__aeabi_dcmpge+0xe>
    20a2:	2000      	movs	r0, #0
    20a4:	bd10      	pop	{r4, pc}
    20a6:	2001      	movs	r0, #1
    20a8:	bd10      	pop	{r4, pc}
    20aa:	46c0      	nop			; (mov r8, r8)

000020ac <__clzsi2>:
    20ac:	211c      	movs	r1, #28
    20ae:	2301      	movs	r3, #1
    20b0:	041b      	lsls	r3, r3, #16
    20b2:	4298      	cmp	r0, r3
    20b4:	d301      	bcc.n	20ba <__clzsi2+0xe>
    20b6:	0c00      	lsrs	r0, r0, #16
    20b8:	3910      	subs	r1, #16
    20ba:	0a1b      	lsrs	r3, r3, #8
    20bc:	4298      	cmp	r0, r3
    20be:	d301      	bcc.n	20c4 <__clzsi2+0x18>
    20c0:	0a00      	lsrs	r0, r0, #8
    20c2:	3908      	subs	r1, #8
    20c4:	091b      	lsrs	r3, r3, #4
    20c6:	4298      	cmp	r0, r3
    20c8:	d301      	bcc.n	20ce <__clzsi2+0x22>
    20ca:	0900      	lsrs	r0, r0, #4
    20cc:	3904      	subs	r1, #4
    20ce:	a202      	add	r2, pc, #8	; (adr r2, 20d8 <__clzsi2+0x2c>)
    20d0:	5c10      	ldrb	r0, [r2, r0]
    20d2:	1840      	adds	r0, r0, r1
    20d4:	4770      	bx	lr
    20d6:	46c0      	nop			; (mov r8, r8)
    20d8:	02020304 	.word	0x02020304
    20dc:	01010101 	.word	0x01010101
	...

000020e8 <__eqdf2>:
    20e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20ea:	464f      	mov	r7, r9
    20ec:	4646      	mov	r6, r8
    20ee:	46d6      	mov	lr, sl
    20f0:	005c      	lsls	r4, r3, #1
    20f2:	b5c0      	push	{r6, r7, lr}
    20f4:	031f      	lsls	r7, r3, #12
    20f6:	0fdb      	lsrs	r3, r3, #31
    20f8:	469a      	mov	sl, r3
    20fa:	4b17      	ldr	r3, [pc, #92]	; (2158 <__eqdf2+0x70>)
    20fc:	030e      	lsls	r6, r1, #12
    20fe:	004d      	lsls	r5, r1, #1
    2100:	4684      	mov	ip, r0
    2102:	4680      	mov	r8, r0
    2104:	0b36      	lsrs	r6, r6, #12
    2106:	0d6d      	lsrs	r5, r5, #21
    2108:	0fc9      	lsrs	r1, r1, #31
    210a:	4691      	mov	r9, r2
    210c:	0b3f      	lsrs	r7, r7, #12
    210e:	0d64      	lsrs	r4, r4, #21
    2110:	2001      	movs	r0, #1
    2112:	429d      	cmp	r5, r3
    2114:	d008      	beq.n	2128 <__eqdf2+0x40>
    2116:	429c      	cmp	r4, r3
    2118:	d001      	beq.n	211e <__eqdf2+0x36>
    211a:	42a5      	cmp	r5, r4
    211c:	d00b      	beq.n	2136 <__eqdf2+0x4e>
    211e:	bc1c      	pop	{r2, r3, r4}
    2120:	4690      	mov	r8, r2
    2122:	4699      	mov	r9, r3
    2124:	46a2      	mov	sl, r4
    2126:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2128:	4663      	mov	r3, ip
    212a:	4333      	orrs	r3, r6
    212c:	d1f7      	bne.n	211e <__eqdf2+0x36>
    212e:	42ac      	cmp	r4, r5
    2130:	d1f5      	bne.n	211e <__eqdf2+0x36>
    2132:	433a      	orrs	r2, r7
    2134:	d1f3      	bne.n	211e <__eqdf2+0x36>
    2136:	2001      	movs	r0, #1
    2138:	42be      	cmp	r6, r7
    213a:	d1f0      	bne.n	211e <__eqdf2+0x36>
    213c:	45c8      	cmp	r8, r9
    213e:	d1ee      	bne.n	211e <__eqdf2+0x36>
    2140:	4551      	cmp	r1, sl
    2142:	d007      	beq.n	2154 <__eqdf2+0x6c>
    2144:	2d00      	cmp	r5, #0
    2146:	d1ea      	bne.n	211e <__eqdf2+0x36>
    2148:	4663      	mov	r3, ip
    214a:	431e      	orrs	r6, r3
    214c:	0030      	movs	r0, r6
    214e:	1e46      	subs	r6, r0, #1
    2150:	41b0      	sbcs	r0, r6
    2152:	e7e4      	b.n	211e <__eqdf2+0x36>
    2154:	2000      	movs	r0, #0
    2156:	e7e2      	b.n	211e <__eqdf2+0x36>
    2158:	000007ff 	.word	0x000007ff

0000215c <__gedf2>:
    215c:	b5f0      	push	{r4, r5, r6, r7, lr}
    215e:	4645      	mov	r5, r8
    2160:	46de      	mov	lr, fp
    2162:	4657      	mov	r7, sl
    2164:	464e      	mov	r6, r9
    2166:	b5e0      	push	{r5, r6, r7, lr}
    2168:	031f      	lsls	r7, r3, #12
    216a:	0b3d      	lsrs	r5, r7, #12
    216c:	4f2c      	ldr	r7, [pc, #176]	; (2220 <__gedf2+0xc4>)
    216e:	030e      	lsls	r6, r1, #12
    2170:	004c      	lsls	r4, r1, #1
    2172:	46ab      	mov	fp, r5
    2174:	005d      	lsls	r5, r3, #1
    2176:	4684      	mov	ip, r0
    2178:	0b36      	lsrs	r6, r6, #12
    217a:	0d64      	lsrs	r4, r4, #21
    217c:	0fc9      	lsrs	r1, r1, #31
    217e:	4690      	mov	r8, r2
    2180:	0d6d      	lsrs	r5, r5, #21
    2182:	0fdb      	lsrs	r3, r3, #31
    2184:	42bc      	cmp	r4, r7
    2186:	d02a      	beq.n	21de <__gedf2+0x82>
    2188:	4f25      	ldr	r7, [pc, #148]	; (2220 <__gedf2+0xc4>)
    218a:	42bd      	cmp	r5, r7
    218c:	d02d      	beq.n	21ea <__gedf2+0x8e>
    218e:	2c00      	cmp	r4, #0
    2190:	d10f      	bne.n	21b2 <__gedf2+0x56>
    2192:	4330      	orrs	r0, r6
    2194:	0007      	movs	r7, r0
    2196:	4681      	mov	r9, r0
    2198:	4278      	negs	r0, r7
    219a:	4178      	adcs	r0, r7
    219c:	b2c0      	uxtb	r0, r0
    219e:	2d00      	cmp	r5, #0
    21a0:	d117      	bne.n	21d2 <__gedf2+0x76>
    21a2:	465f      	mov	r7, fp
    21a4:	433a      	orrs	r2, r7
    21a6:	d114      	bne.n	21d2 <__gedf2+0x76>
    21a8:	464b      	mov	r3, r9
    21aa:	2000      	movs	r0, #0
    21ac:	2b00      	cmp	r3, #0
    21ae:	d00a      	beq.n	21c6 <__gedf2+0x6a>
    21b0:	e006      	b.n	21c0 <__gedf2+0x64>
    21b2:	2d00      	cmp	r5, #0
    21b4:	d102      	bne.n	21bc <__gedf2+0x60>
    21b6:	4658      	mov	r0, fp
    21b8:	4302      	orrs	r2, r0
    21ba:	d001      	beq.n	21c0 <__gedf2+0x64>
    21bc:	4299      	cmp	r1, r3
    21be:	d018      	beq.n	21f2 <__gedf2+0x96>
    21c0:	4248      	negs	r0, r1
    21c2:	2101      	movs	r1, #1
    21c4:	4308      	orrs	r0, r1
    21c6:	bc3c      	pop	{r2, r3, r4, r5}
    21c8:	4690      	mov	r8, r2
    21ca:	4699      	mov	r9, r3
    21cc:	46a2      	mov	sl, r4
    21ce:	46ab      	mov	fp, r5
    21d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21d2:	2800      	cmp	r0, #0
    21d4:	d0f2      	beq.n	21bc <__gedf2+0x60>
    21d6:	2001      	movs	r0, #1
    21d8:	3b01      	subs	r3, #1
    21da:	4318      	orrs	r0, r3
    21dc:	e7f3      	b.n	21c6 <__gedf2+0x6a>
    21de:	0037      	movs	r7, r6
    21e0:	4307      	orrs	r7, r0
    21e2:	d0d1      	beq.n	2188 <__gedf2+0x2c>
    21e4:	2002      	movs	r0, #2
    21e6:	4240      	negs	r0, r0
    21e8:	e7ed      	b.n	21c6 <__gedf2+0x6a>
    21ea:	465f      	mov	r7, fp
    21ec:	4317      	orrs	r7, r2
    21ee:	d0ce      	beq.n	218e <__gedf2+0x32>
    21f0:	e7f8      	b.n	21e4 <__gedf2+0x88>
    21f2:	42ac      	cmp	r4, r5
    21f4:	dce4      	bgt.n	21c0 <__gedf2+0x64>
    21f6:	da03      	bge.n	2200 <__gedf2+0xa4>
    21f8:	1e48      	subs	r0, r1, #1
    21fa:	2101      	movs	r1, #1
    21fc:	4308      	orrs	r0, r1
    21fe:	e7e2      	b.n	21c6 <__gedf2+0x6a>
    2200:	455e      	cmp	r6, fp
    2202:	d8dd      	bhi.n	21c0 <__gedf2+0x64>
    2204:	d006      	beq.n	2214 <__gedf2+0xb8>
    2206:	2000      	movs	r0, #0
    2208:	455e      	cmp	r6, fp
    220a:	d2dc      	bcs.n	21c6 <__gedf2+0x6a>
    220c:	2301      	movs	r3, #1
    220e:	1e48      	subs	r0, r1, #1
    2210:	4318      	orrs	r0, r3
    2212:	e7d8      	b.n	21c6 <__gedf2+0x6a>
    2214:	45c4      	cmp	ip, r8
    2216:	d8d3      	bhi.n	21c0 <__gedf2+0x64>
    2218:	2000      	movs	r0, #0
    221a:	45c4      	cmp	ip, r8
    221c:	d3f6      	bcc.n	220c <__gedf2+0xb0>
    221e:	e7d2      	b.n	21c6 <__gedf2+0x6a>
    2220:	000007ff 	.word	0x000007ff

00002224 <__ledf2>:
    2224:	b5f0      	push	{r4, r5, r6, r7, lr}
    2226:	464e      	mov	r6, r9
    2228:	4645      	mov	r5, r8
    222a:	46de      	mov	lr, fp
    222c:	4657      	mov	r7, sl
    222e:	005c      	lsls	r4, r3, #1
    2230:	b5e0      	push	{r5, r6, r7, lr}
    2232:	031f      	lsls	r7, r3, #12
    2234:	0fdb      	lsrs	r3, r3, #31
    2236:	4699      	mov	r9, r3
    2238:	4b2a      	ldr	r3, [pc, #168]	; (22e4 <__ledf2+0xc0>)
    223a:	030e      	lsls	r6, r1, #12
    223c:	004d      	lsls	r5, r1, #1
    223e:	0fc9      	lsrs	r1, r1, #31
    2240:	4684      	mov	ip, r0
    2242:	0b36      	lsrs	r6, r6, #12
    2244:	0d6d      	lsrs	r5, r5, #21
    2246:	468b      	mov	fp, r1
    2248:	4690      	mov	r8, r2
    224a:	0b3f      	lsrs	r7, r7, #12
    224c:	0d64      	lsrs	r4, r4, #21
    224e:	429d      	cmp	r5, r3
    2250:	d020      	beq.n	2294 <__ledf2+0x70>
    2252:	4b24      	ldr	r3, [pc, #144]	; (22e4 <__ledf2+0xc0>)
    2254:	429c      	cmp	r4, r3
    2256:	d022      	beq.n	229e <__ledf2+0x7a>
    2258:	2d00      	cmp	r5, #0
    225a:	d112      	bne.n	2282 <__ledf2+0x5e>
    225c:	4330      	orrs	r0, r6
    225e:	4243      	negs	r3, r0
    2260:	4143      	adcs	r3, r0
    2262:	b2db      	uxtb	r3, r3
    2264:	2c00      	cmp	r4, #0
    2266:	d01f      	beq.n	22a8 <__ledf2+0x84>
    2268:	2b00      	cmp	r3, #0
    226a:	d00c      	beq.n	2286 <__ledf2+0x62>
    226c:	464b      	mov	r3, r9
    226e:	2001      	movs	r0, #1
    2270:	3b01      	subs	r3, #1
    2272:	4303      	orrs	r3, r0
    2274:	0018      	movs	r0, r3
    2276:	bc3c      	pop	{r2, r3, r4, r5}
    2278:	4690      	mov	r8, r2
    227a:	4699      	mov	r9, r3
    227c:	46a2      	mov	sl, r4
    227e:	46ab      	mov	fp, r5
    2280:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2282:	2c00      	cmp	r4, #0
    2284:	d016      	beq.n	22b4 <__ledf2+0x90>
    2286:	45cb      	cmp	fp, r9
    2288:	d017      	beq.n	22ba <__ledf2+0x96>
    228a:	465b      	mov	r3, fp
    228c:	4259      	negs	r1, r3
    228e:	2301      	movs	r3, #1
    2290:	430b      	orrs	r3, r1
    2292:	e7ef      	b.n	2274 <__ledf2+0x50>
    2294:	0031      	movs	r1, r6
    2296:	2302      	movs	r3, #2
    2298:	4301      	orrs	r1, r0
    229a:	d1eb      	bne.n	2274 <__ledf2+0x50>
    229c:	e7d9      	b.n	2252 <__ledf2+0x2e>
    229e:	0039      	movs	r1, r7
    22a0:	2302      	movs	r3, #2
    22a2:	4311      	orrs	r1, r2
    22a4:	d1e6      	bne.n	2274 <__ledf2+0x50>
    22a6:	e7d7      	b.n	2258 <__ledf2+0x34>
    22a8:	433a      	orrs	r2, r7
    22aa:	d1dd      	bne.n	2268 <__ledf2+0x44>
    22ac:	2300      	movs	r3, #0
    22ae:	2800      	cmp	r0, #0
    22b0:	d0e0      	beq.n	2274 <__ledf2+0x50>
    22b2:	e7ea      	b.n	228a <__ledf2+0x66>
    22b4:	433a      	orrs	r2, r7
    22b6:	d1e6      	bne.n	2286 <__ledf2+0x62>
    22b8:	e7e7      	b.n	228a <__ledf2+0x66>
    22ba:	42a5      	cmp	r5, r4
    22bc:	dce5      	bgt.n	228a <__ledf2+0x66>
    22be:	db05      	blt.n	22cc <__ledf2+0xa8>
    22c0:	42be      	cmp	r6, r7
    22c2:	d8e2      	bhi.n	228a <__ledf2+0x66>
    22c4:	d007      	beq.n	22d6 <__ledf2+0xb2>
    22c6:	2300      	movs	r3, #0
    22c8:	42be      	cmp	r6, r7
    22ca:	d2d3      	bcs.n	2274 <__ledf2+0x50>
    22cc:	4659      	mov	r1, fp
    22ce:	2301      	movs	r3, #1
    22d0:	3901      	subs	r1, #1
    22d2:	430b      	orrs	r3, r1
    22d4:	e7ce      	b.n	2274 <__ledf2+0x50>
    22d6:	45c4      	cmp	ip, r8
    22d8:	d8d7      	bhi.n	228a <__ledf2+0x66>
    22da:	2300      	movs	r3, #0
    22dc:	45c4      	cmp	ip, r8
    22de:	d3f5      	bcc.n	22cc <__ledf2+0xa8>
    22e0:	e7c8      	b.n	2274 <__ledf2+0x50>
    22e2:	46c0      	nop			; (mov r8, r8)
    22e4:	000007ff 	.word	0x000007ff

000022e8 <__libc_init_array>:
    22e8:	b570      	push	{r4, r5, r6, lr}
    22ea:	4e0d      	ldr	r6, [pc, #52]	; (2320 <__libc_init_array+0x38>)
    22ec:	4d0d      	ldr	r5, [pc, #52]	; (2324 <__libc_init_array+0x3c>)
    22ee:	2400      	movs	r4, #0
    22f0:	1bad      	subs	r5, r5, r6
    22f2:	10ad      	asrs	r5, r5, #2
    22f4:	d005      	beq.n	2302 <__libc_init_array+0x1a>
    22f6:	00a3      	lsls	r3, r4, #2
    22f8:	58f3      	ldr	r3, [r6, r3]
    22fa:	3401      	adds	r4, #1
    22fc:	4798      	blx	r3
    22fe:	42a5      	cmp	r5, r4
    2300:	d1f9      	bne.n	22f6 <__libc_init_array+0xe>
    2302:	f000 f955 	bl	25b0 <_init>
    2306:	4e08      	ldr	r6, [pc, #32]	; (2328 <__libc_init_array+0x40>)
    2308:	4d08      	ldr	r5, [pc, #32]	; (232c <__libc_init_array+0x44>)
    230a:	2400      	movs	r4, #0
    230c:	1bad      	subs	r5, r5, r6
    230e:	10ad      	asrs	r5, r5, #2
    2310:	d005      	beq.n	231e <__libc_init_array+0x36>
    2312:	00a3      	lsls	r3, r4, #2
    2314:	58f3      	ldr	r3, [r6, r3]
    2316:	3401      	adds	r4, #1
    2318:	4798      	blx	r3
    231a:	42a5      	cmp	r5, r4
    231c:	d1f9      	bne.n	2312 <__libc_init_array+0x2a>
    231e:	bd70      	pop	{r4, r5, r6, pc}
    2320:	000025bc 	.word	0x000025bc
    2324:	000025bc 	.word	0x000025bc
    2328:	000025bc 	.word	0x000025bc
    232c:	000025c4 	.word	0x000025c4

00002330 <register_fini>:
    2330:	4b03      	ldr	r3, [pc, #12]	; (2340 <register_fini+0x10>)
    2332:	b510      	push	{r4, lr}
    2334:	2b00      	cmp	r3, #0
    2336:	d002      	beq.n	233e <register_fini+0xe>
    2338:	4802      	ldr	r0, [pc, #8]	; (2344 <register_fini+0x14>)
    233a:	f000 f805 	bl	2348 <atexit>
    233e:	bd10      	pop	{r4, pc}
    2340:	00000000 	.word	0x00000000
    2344:	00002359 	.word	0x00002359

00002348 <atexit>:
    2348:	b510      	push	{r4, lr}
    234a:	0001      	movs	r1, r0
    234c:	2300      	movs	r3, #0
    234e:	2200      	movs	r2, #0
    2350:	2000      	movs	r0, #0
    2352:	f000 f81f 	bl	2394 <__register_exitproc>
    2356:	bd10      	pop	{r4, pc}

00002358 <__libc_fini_array>:
    2358:	b570      	push	{r4, r5, r6, lr}
    235a:	4b09      	ldr	r3, [pc, #36]	; (2380 <__libc_fini_array+0x28>)
    235c:	4c09      	ldr	r4, [pc, #36]	; (2384 <__libc_fini_array+0x2c>)
    235e:	1ae4      	subs	r4, r4, r3
    2360:	10a4      	asrs	r4, r4, #2
    2362:	d009      	beq.n	2378 <__libc_fini_array+0x20>
    2364:	4a08      	ldr	r2, [pc, #32]	; (2388 <__libc_fini_array+0x30>)
    2366:	18a5      	adds	r5, r4, r2
    2368:	00ad      	lsls	r5, r5, #2
    236a:	18ed      	adds	r5, r5, r3
    236c:	682b      	ldr	r3, [r5, #0]
    236e:	3c01      	subs	r4, #1
    2370:	4798      	blx	r3
    2372:	3d04      	subs	r5, #4
    2374:	2c00      	cmp	r4, #0
    2376:	d1f9      	bne.n	236c <__libc_fini_array+0x14>
    2378:	f000 f924 	bl	25c4 <_fini>
    237c:	bd70      	pop	{r4, r5, r6, pc}
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	000025d0 	.word	0x000025d0
    2384:	000025d4 	.word	0x000025d4
    2388:	3fffffff 	.word	0x3fffffff

0000238c <__retarget_lock_acquire_recursive>:
    238c:	4770      	bx	lr
    238e:	46c0      	nop			; (mov r8, r8)

00002390 <__retarget_lock_release_recursive>:
    2390:	4770      	bx	lr
    2392:	46c0      	nop			; (mov r8, r8)

00002394 <__register_exitproc>:
    2394:	b5f0      	push	{r4, r5, r6, r7, lr}
    2396:	464e      	mov	r6, r9
    2398:	4645      	mov	r5, r8
    239a:	46de      	mov	lr, fp
    239c:	4657      	mov	r7, sl
    239e:	b5e0      	push	{r5, r6, r7, lr}
    23a0:	4d36      	ldr	r5, [pc, #216]	; (247c <__register_exitproc+0xe8>)
    23a2:	b083      	sub	sp, #12
    23a4:	0006      	movs	r6, r0
    23a6:	6828      	ldr	r0, [r5, #0]
    23a8:	4698      	mov	r8, r3
    23aa:	000f      	movs	r7, r1
    23ac:	4691      	mov	r9, r2
    23ae:	f7ff ffed 	bl	238c <__retarget_lock_acquire_recursive>
    23b2:	4b33      	ldr	r3, [pc, #204]	; (2480 <__register_exitproc+0xec>)
    23b4:	681c      	ldr	r4, [r3, #0]
    23b6:	23a4      	movs	r3, #164	; 0xa4
    23b8:	005b      	lsls	r3, r3, #1
    23ba:	58e0      	ldr	r0, [r4, r3]
    23bc:	2800      	cmp	r0, #0
    23be:	d052      	beq.n	2466 <__register_exitproc+0xd2>
    23c0:	6843      	ldr	r3, [r0, #4]
    23c2:	2b1f      	cmp	r3, #31
    23c4:	dc13      	bgt.n	23ee <__register_exitproc+0x5a>
    23c6:	1c5a      	adds	r2, r3, #1
    23c8:	9201      	str	r2, [sp, #4]
    23ca:	2e00      	cmp	r6, #0
    23cc:	d128      	bne.n	2420 <__register_exitproc+0x8c>
    23ce:	9a01      	ldr	r2, [sp, #4]
    23d0:	3302      	adds	r3, #2
    23d2:	009b      	lsls	r3, r3, #2
    23d4:	6042      	str	r2, [r0, #4]
    23d6:	501f      	str	r7, [r3, r0]
    23d8:	6828      	ldr	r0, [r5, #0]
    23da:	f7ff ffd9 	bl	2390 <__retarget_lock_release_recursive>
    23de:	2000      	movs	r0, #0
    23e0:	b003      	add	sp, #12
    23e2:	bc3c      	pop	{r2, r3, r4, r5}
    23e4:	4690      	mov	r8, r2
    23e6:	4699      	mov	r9, r3
    23e8:	46a2      	mov	sl, r4
    23ea:	46ab      	mov	fp, r5
    23ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23ee:	4b25      	ldr	r3, [pc, #148]	; (2484 <__register_exitproc+0xf0>)
    23f0:	2b00      	cmp	r3, #0
    23f2:	d03d      	beq.n	2470 <__register_exitproc+0xdc>
    23f4:	20c8      	movs	r0, #200	; 0xc8
    23f6:	0040      	lsls	r0, r0, #1
    23f8:	e000      	b.n	23fc <__register_exitproc+0x68>
    23fa:	bf00      	nop
    23fc:	2800      	cmp	r0, #0
    23fe:	d037      	beq.n	2470 <__register_exitproc+0xdc>
    2400:	22a4      	movs	r2, #164	; 0xa4
    2402:	2300      	movs	r3, #0
    2404:	0052      	lsls	r2, r2, #1
    2406:	58a1      	ldr	r1, [r4, r2]
    2408:	6043      	str	r3, [r0, #4]
    240a:	6001      	str	r1, [r0, #0]
    240c:	50a0      	str	r0, [r4, r2]
    240e:	3240      	adds	r2, #64	; 0x40
    2410:	5083      	str	r3, [r0, r2]
    2412:	3204      	adds	r2, #4
    2414:	5083      	str	r3, [r0, r2]
    2416:	3301      	adds	r3, #1
    2418:	9301      	str	r3, [sp, #4]
    241a:	2300      	movs	r3, #0
    241c:	2e00      	cmp	r6, #0
    241e:	d0d6      	beq.n	23ce <__register_exitproc+0x3a>
    2420:	009a      	lsls	r2, r3, #2
    2422:	4692      	mov	sl, r2
    2424:	4482      	add	sl, r0
    2426:	464a      	mov	r2, r9
    2428:	2188      	movs	r1, #136	; 0x88
    242a:	4654      	mov	r4, sl
    242c:	5062      	str	r2, [r4, r1]
    242e:	22c4      	movs	r2, #196	; 0xc4
    2430:	0052      	lsls	r2, r2, #1
    2432:	4691      	mov	r9, r2
    2434:	4481      	add	r9, r0
    2436:	464a      	mov	r2, r9
    2438:	3987      	subs	r1, #135	; 0x87
    243a:	4099      	lsls	r1, r3
    243c:	6812      	ldr	r2, [r2, #0]
    243e:	468b      	mov	fp, r1
    2440:	430a      	orrs	r2, r1
    2442:	4694      	mov	ip, r2
    2444:	464a      	mov	r2, r9
    2446:	4661      	mov	r1, ip
    2448:	6011      	str	r1, [r2, #0]
    244a:	2284      	movs	r2, #132	; 0x84
    244c:	4641      	mov	r1, r8
    244e:	0052      	lsls	r2, r2, #1
    2450:	50a1      	str	r1, [r4, r2]
    2452:	2e02      	cmp	r6, #2
    2454:	d1bb      	bne.n	23ce <__register_exitproc+0x3a>
    2456:	0002      	movs	r2, r0
    2458:	465c      	mov	r4, fp
    245a:	328d      	adds	r2, #141	; 0x8d
    245c:	32ff      	adds	r2, #255	; 0xff
    245e:	6811      	ldr	r1, [r2, #0]
    2460:	430c      	orrs	r4, r1
    2462:	6014      	str	r4, [r2, #0]
    2464:	e7b3      	b.n	23ce <__register_exitproc+0x3a>
    2466:	0020      	movs	r0, r4
    2468:	304d      	adds	r0, #77	; 0x4d
    246a:	30ff      	adds	r0, #255	; 0xff
    246c:	50e0      	str	r0, [r4, r3]
    246e:	e7a7      	b.n	23c0 <__register_exitproc+0x2c>
    2470:	6828      	ldr	r0, [r5, #0]
    2472:	f7ff ff8d 	bl	2390 <__retarget_lock_release_recursive>
    2476:	2001      	movs	r0, #1
    2478:	4240      	negs	r0, r0
    247a:	e7b1      	b.n	23e0 <__register_exitproc+0x4c>
    247c:	20000438 	.word	0x20000438
    2480:	000025ac 	.word	0x000025ac
    2484:	00000000 	.word	0x00000000
    2488:	69636552 	.word	0x69636552
    248c:	61206962 	.word	0x61206962
    2490:	0000000a 	.word	0x0000000a
    2494:	69636552 	.word	0x69636552
    2498:	62206962 	.word	0x62206962
    249c:	47644d20 	.word	0x47644d20
    24a0:	0000000a 	.word	0x0000000a
    24a4:	69766e45 	.word	0x69766e45
    24a8:	0a6f6461 	.word	0x0a6f6461
    24ac:	00000000 	.word	0x00000000
    24b0:	69636552 	.word	0x69636552
    24b4:	63206962 	.word	0x63206962
    24b8:	63617420 	.word	0x63617420
    24bc:	000a736f 	.word	0x000a736f
    24c0:	69636552 	.word	0x69636552
    24c4:	64206962 	.word	0x64206962
    24c8:	0000000a 	.word	0x0000000a
    24cc:	65636552 	.word	0x65636552
    24d0:	64657669 	.word	0x64657669
    24d4:	73656d20 	.word	0x73656d20
    24d8:	65676173 	.word	0x65676173
    24dc:	6449202e 	.word	0x6449202e
    24e0:	7825203a 	.word	0x7825203a
    24e4:	6144202c 	.word	0x6144202c
    24e8:	6c206174 	.word	0x6c206174
    24ec:	74676e65 	.word	0x74676e65
    24f0:	25203a68 	.word	0x25203a68
    24f4:	44202c64 	.word	0x44202c64
    24f8:	3a617461 	.word	0x3a617461
    24fc:	00000000 	.word	0x00000000
    2500:	00642520 	.word	0x00642520
    2504:	00000a0d 	.word	0x00000a0d
    2508:	00000716 	.word	0x00000716
    250c:	000006fa 	.word	0x000006fa
    2510:	0000071a 	.word	0x0000071a
    2514:	00000692 	.word	0x00000692
    2518:	00000722 	.word	0x00000722
    251c:	0000069a 	.word	0x0000069a
    2520:	000006a2 	.word	0x000006a2
    2524:	000006aa 	.word	0x000006aa
    2528:	000006b2 	.word	0x000006b2
    252c:	000006ba 	.word	0x000006ba
    2530:	000006c2 	.word	0x000006c2
    2534:	000006ca 	.word	0x000006ca
    2538:	000006d2 	.word	0x000006d2
    253c:	000006da 	.word	0x000006da
    2540:	000006e2 	.word	0x000006e2
    2544:	000006ea 	.word	0x000006ea
    2548:	000006f2 	.word	0x000006f2
    254c:	00000b4a 	.word	0x00000b4a
    2550:	00000b68 	.word	0x00000b68
    2554:	00000b74 	.word	0x00000b74
    2558:	00000b80 	.word	0x00000b80
    255c:	00000b8c 	.word	0x00000b8c
    2560:	00000b98 	.word	0x00000b98

00002564 <ctrla.10018>:
    2564:	0030000c                                ..0.

00002568 <wrconfig.10021>:
    2568:	d201000b 000014a8 0000148a 00001444     ............D...
    2578:	00001362 00001444 0000147c 00001444     b...D...|...D...
    2588:	00001362 0000148a 0000148a 0000147c     b...........|...
    2598:	00001362 0000135a 0000135a 0000135a     b...Z...Z...Z...
    25a8:	000016c0                                ....

000025ac <_global_impure_ptr>:
    25ac:	20000010                                ... 

000025b0 <_init>:
    25b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25b2:	46c0      	nop			; (mov r8, r8)
    25b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    25b6:	bc08      	pop	{r3}
    25b8:	469e      	mov	lr, r3
    25ba:	4770      	bx	lr

000025bc <__init_array_start>:
    25bc:	00002331 	.word	0x00002331

000025c0 <__frame_dummy_init_array_entry>:
    25c0:	000000dd                                ....

000025c4 <_fini>:
    25c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25c6:	46c0      	nop			; (mov r8, r8)
    25c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    25ca:	bc08      	pop	{r3}
    25cc:	469e      	mov	lr, r3
    25ce:	4770      	bx	lr

000025d0 <__fini_array_start>:
    25d0:	000000b5 	.word	0x000000b5
